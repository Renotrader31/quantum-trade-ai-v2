{"ast":null,"code":"import axios from 'axios';\nclass RealDataService {\n  constructor() {\n    this.apiKeys = {\n      unusualWhales: process.env.REACT_APP_UNUSUAL_WHALES_API_KEY,\n      alphaVantage: process.env.REACT_APP_ALPHA_VANTAGE_KEY,\n      twelveData: process.env.REACT_APP_TWELVE_DATA_KEY,\n      polygon: process.env.REACT_APP_POLYGON_API_KEY,\n      fmp: process.env.REACT_APP_FMP_API_KEY,\n      ortex: process.env.REACT_APP_ORTEX_API_KEY\n    };\n    this.timeout = parseInt(process.env.REACT_APP_API_TIMEOUT) || 10000;\n    this.cache = new Map();\n    this.cacheTimeout = 30000; // 30 seconds\n\n    // API endpoints\n    this.endpoints = {\n      polygon: 'https://api.polygon.io',\n      alphaVantage: 'https://www.alphavantage.co',\n      twelveData: 'https://api.twelvedata.com',\n      fmp: 'https://financialmodelingprep.com/api/v3',\n      unusualWhales: 'https://api.unusualwhales.com',\n      ortex: 'https://api.ortex.com'\n    };\n    console.log('🔑 RealDataService initialized with API keys:', {\n      unusualWhales: !!this.apiKeys.unusualWhales,\n      alphaVantage: !!this.apiKeys.alphaVantage,\n      twelveData: !!this.apiKeys.twelveData,\n      polygon: !!this.apiKeys.polygon,\n      fmp: !!this.apiKeys.fmp,\n      ortex: !!this.apiKeys.ortex\n    });\n  }\n\n  // Cache management\n  getCacheKey(endpoint, params) {\n    return `${endpoint}_${JSON.stringify(params)}`;\n  }\n  isCacheValid(timestamp) {\n    return Date.now() - timestamp < this.cacheTimeout;\n  }\n  setCache(key, data) {\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now()\n    });\n  }\n  getCache(key) {\n    const cached = this.cache.get(key);\n    if (cached && this.isCacheValid(cached.timestamp)) {\n      return cached.data;\n    }\n    return null;\n  }\n\n  // Generic API request handler\n  async makeRequest(url, options = {}) {\n    try {\n      const response = await axios.get(url, {\n        timeout: this.timeout,\n        ...options\n      });\n      return response.data;\n    } catch (error) {\n      console.error(`❌ API Request failed for ${url}:`, error.message);\n      throw error;\n    }\n  }\n\n  // Polygon.io - Real-time stock data\n  async getPolygonStockPrice(symbol) {\n    if (!this.apiKeys.polygon) {\n      throw new Error('Polygon API key not configured');\n    }\n    const cacheKey = this.getCacheKey('polygon_stock', {\n      symbol\n    });\n    const cached = this.getCache(cacheKey);\n    if (cached) return cached;\n    try {\n      const url = `${this.endpoints.polygon}/v2/aggs/ticker/${symbol}/prev?adjusted=true&apikey=${this.apiKeys.polygon}`;\n      const data = await this.makeRequest(url);\n      if (data.results && data.results.length > 0) {\n        const result = data.results[0];\n        const stockData = {\n          symbol,\n          price: result.c,\n          open: result.o,\n          high: result.h,\n          low: result.l,\n          volume: result.v,\n          change: result.c - result.o,\n          changePercent: (result.c - result.o) / result.o * 100,\n          source: 'Polygon',\n          timestamp: Date.now()\n        };\n        this.setCache(cacheKey, stockData);\n        return stockData;\n      }\n    } catch (error) {\n      console.error(`❌ Polygon API error for ${symbol}:`, error.message);\n      throw error;\n    }\n  }\n\n  // Alpha Vantage - Market data and indicators\n  async getAlphaVantageData(symbol, function_type = 'TIME_SERIES_INTRADAY') {\n    if (!this.apiKeys.alphaVantage) {\n      throw new Error('Alpha Vantage API key not configured');\n    }\n    const cacheKey = this.getCacheKey('alphavantage', {\n      symbol,\n      function_type\n    });\n    const cached = this.getCache(cacheKey);\n    if (cached) return cached;\n    try {\n      const url = `${this.endpoints.alphaVantage}/query?function=${function_type}&symbol=${symbol}&interval=1min&apikey=${this.apiKeys.alphaVantage}`;\n      const data = await this.makeRequest(url);\n      this.setCache(cacheKey, data);\n      return data;\n    } catch (error) {\n      console.error(`❌ Alpha Vantage API error for ${symbol}:`, error.message);\n      throw error;\n    }\n  }\n\n  // Twelve Data - Financial data\n  async getTwelveDataQuote(symbol) {\n    if (!this.apiKeys.twelveData) {\n      throw new Error('Twelve Data API key not configured');\n    }\n    const cacheKey = this.getCacheKey('twelvedata_quote', {\n      symbol\n    });\n    const cached = this.getCache(cacheKey);\n    if (cached) return cached;\n    try {\n      const url = `${this.endpoints.twelveData}/quote?symbol=${symbol}&apikey=${this.apiKeys.twelveData}`;\n      const data = await this.makeRequest(url);\n      if (data && !data.code) {\n        const stockData = {\n          symbol: data.symbol,\n          price: parseFloat(data.close),\n          open: parseFloat(data.open),\n          high: parseFloat(data.high),\n          low: parseFloat(data.low),\n          volume: parseInt(data.volume),\n          change: parseFloat(data.change),\n          changePercent: parseFloat(data.percent_change),\n          source: 'Twelve Data',\n          timestamp: Date.now()\n        };\n        this.setCache(cacheKey, stockData);\n        return stockData;\n      }\n    } catch (error) {\n      console.error(`❌ Twelve Data API error for ${symbol}:`, error.message);\n      throw error;\n    }\n  }\n\n  // Financial Modeling Prep - Comprehensive financial data\n  async getFMPQuote(symbol) {\n    if (!this.apiKeys.fmp) {\n      throw new Error('FMP API key not configured');\n    }\n    const cacheKey = this.getCacheKey('fmp_quote', {\n      symbol\n    });\n    const cached = this.getCache(cacheKey);\n    if (cached) return cached;\n    try {\n      const url = `${this.endpoints.fmp}/quote/${symbol}?apikey=${this.apiKeys.fmp}`;\n      const data = await this.makeRequest(url);\n      if (data && data.length > 0) {\n        const quote = data[0];\n        const stockData = {\n          symbol: quote.symbol,\n          price: quote.price,\n          open: quote.open,\n          high: quote.dayHigh,\n          low: quote.dayLow,\n          volume: quote.volume,\n          change: quote.change,\n          changePercent: quote.changesPercentage,\n          marketCap: quote.marketCap,\n          pe: quote.pe,\n          source: 'FMP',\n          timestamp: Date.now()\n        };\n        this.setCache(cacheKey, stockData);\n        return stockData;\n      }\n    } catch (error) {\n      console.error(`❌ FMP API error for ${symbol}:`, error.message);\n      throw error;\n    }\n  }\n\n  // Unusual Whales - Options flow data\n  async getUnusualWhalesOptionsFlow(symbol = null) {\n    if (!this.apiKeys.unusualWhales) {\n      throw new Error('Unusual Whales API key not configured');\n    }\n    const cacheKey = this.getCacheKey('unusual_whales_flow', {\n      symbol\n    });\n    const cached = this.getCache(cacheKey);\n    if (cached) return cached;\n    try {\n      const baseUrl = `${this.endpoints.unusualWhales}/api/stock_options_flow`;\n      const url = symbol ? `${baseUrl}/${symbol}` : baseUrl;\n      const data = await this.makeRequest(url, {\n        headers: {\n          'Authorization': `Bearer ${this.apiKeys.unusualWhales}`\n        }\n      });\n      this.setCache(cacheKey, data);\n      return data;\n    } catch (error) {\n      console.error(`❌ Unusual Whales API error:`, error.message);\n      throw error;\n    }\n  }\n\n  // Ortex - Short interest data\n  async getOrtexShortInterest(symbol) {\n    if (!this.apiKeys.ortex) {\n      throw new Error('Ortex API key not configured');\n    }\n    const cacheKey = this.getCacheKey('ortex_short', {\n      symbol\n    });\n    const cached = this.getCache(cacheKey);\n    if (cached) return cached;\n    try {\n      const url = `${this.endpoints.ortex}/securities/${symbol}/short_interest`;\n      const data = await this.makeRequest(url, {\n        headers: {\n          'Authorization': `Bearer ${this.apiKeys.ortex}`\n        }\n      });\n      this.setCache(cacheKey, data);\n      return data;\n    } catch (error) {\n      console.error(`❌ Ortex API error for ${symbol}:`, error.message);\n      throw error;\n    }\n  }\n\n  // Unified method to get stock data from multiple sources\n  async getStockData(symbol) {\n    const results = {};\n    const errors = [];\n\n    // Try multiple providers in parallel\n    const providers = [{\n      name: 'polygon',\n      method: () => this.getPolygonStockPrice(symbol)\n    }, {\n      name: 'twelveData',\n      method: () => this.getTwelveDataQuote(symbol)\n    }, {\n      name: 'fmp',\n      method: () => this.getFMPQuote(symbol)\n    }];\n    const promises = providers.map(async provider => {\n      try {\n        const data = await provider.method();\n        results[provider.name] = data;\n        return {\n          provider: provider.name,\n          success: true,\n          data\n        };\n      } catch (error) {\n        errors.push({\n          provider: provider.name,\n          error: error.message\n        });\n        return {\n          provider: provider.name,\n          success: false,\n          error: error.message\n        };\n      }\n    });\n    const responses = await Promise.allSettled(promises);\n\n    // Use the first successful response or combine data\n    const successful = responses.filter(r => r.status === 'fulfilled' && r.value.success).map(r => r.value.data);\n    if (successful.length > 0) {\n      // Use the most complete data (prefer FMP > Twelve Data > Polygon)\n      const priority = ['fmp', 'twelveData', 'polygon'];\n      for (const provider of priority) {\n        if (results[provider]) {\n          return {\n            ...results[provider],\n            sources: Object.keys(results),\n            errors: errors.length > 0 ? errors : undefined\n          };\n        }\n      }\n      return successful[0];\n    }\n    throw new Error(`Failed to fetch data for ${symbol} from all providers: ${errors.map(e => e.error).join(', ')}`);\n  }\n\n  // Get market overview with multiple stocks\n  async getMarketOverview() {\n    const symbols = ['SPY', 'QQQ', 'AAPL', 'NVDA', 'TSLA', 'MSFT', 'GOOGL', 'AMZN'];\n    const stocks = {};\n    const errors = [];\n    console.log('📊 Fetching market overview for symbols:', symbols);\n\n    // Fetch data for all symbols\n    const promises = symbols.map(async symbol => {\n      try {\n        const data = await this.getStockData(symbol);\n        stocks[symbol] = data;\n        return {\n          symbol,\n          success: true,\n          data\n        };\n      } catch (error) {\n        console.error(`❌ Failed to fetch data for ${symbol}:`, error.message);\n        errors.push({\n          symbol,\n          error: error.message\n        });\n        return {\n          symbol,\n          success: false,\n          error: error.message\n        };\n      }\n    });\n    await Promise.allSettled(promises);\n    if (Object.keys(stocks).length === 0) {\n      throw new Error('Failed to fetch data for any symbols');\n    }\n\n    // Calculate market sentiment\n    const validStocks = Object.values(stocks).filter(stock => stock.changePercent !== undefined);\n    const totalChange = validStocks.reduce((sum, stock) => sum + stock.changePercent, 0);\n    const avgChange = totalChange / validStocks.length;\n    console.log(`✅ Successfully fetched data for ${Object.keys(stocks).length}/${symbols.length} symbols`);\n    return {\n      stocks,\n      marketSentiment: avgChange > 0.5 ? 'Bullish' : avgChange < -0.5 ? 'Bearish' : 'Neutral',\n      avgChange: parseFloat(avgChange.toFixed(2)),\n      successCount: Object.keys(stocks).length,\n      errorCount: errors.length,\n      errors: errors.length > 0 ? errors : undefined,\n      timestamp: Date.now()\n    };\n  }\n\n  // Get options flow data\n  async getOptionsFlowData() {\n    try {\n      console.log('📈 Fetching options flow data from Unusual Whales...');\n      const data = await this.getUnusualWhalesOptionsFlow();\n      return data;\n    } catch (error) {\n      console.error('❌ Failed to fetch options flow data:', error.message);\n      throw error;\n    }\n  }\n\n  // Get technical indicators\n  async getTechnicalIndicators(symbol) {\n    try {\n      const data = await this.getAlphaVantageData(symbol, 'RSI');\n      return data;\n    } catch (error) {\n      console.error(`❌ Failed to fetch technical indicators for ${symbol}:`, error.message);\n      throw error;\n    }\n  }\n\n  // Health check for all APIs\n  async healthCheck() {\n    const services = [{\n      name: 'Polygon',\n      check: () => this.getPolygonStockPrice('AAPL')\n    }, {\n      name: 'Twelve Data',\n      check: () => this.getTwelveDataQuote('AAPL')\n    }, {\n      name: 'FMP',\n      check: () => this.getFMPQuote('AAPL')\n    }, {\n      name: 'Alpha Vantage',\n      check: () => this.getAlphaVantageData('AAPL')\n    }];\n    const results = {};\n    for (const service of services) {\n      try {\n        await service.check();\n        results[service.name] = {\n          status: 'OK',\n          timestamp: Date.now()\n        };\n        console.log(`✅ ${service.name} API: OK`);\n      } catch (error) {\n        results[service.name] = {\n          status: 'ERROR',\n          error: error.message,\n          timestamp: Date.now()\n        };\n        console.log(`❌ ${service.name} API: ERROR - ${error.message}`);\n      }\n    }\n    return results;\n  }\n}\nexport default new RealDataService();","map":{"version":3,"names":["axios","RealDataService","constructor","apiKeys","unusualWhales","process","env","REACT_APP_UNUSUAL_WHALES_API_KEY","alphaVantage","REACT_APP_ALPHA_VANTAGE_KEY","twelveData","REACT_APP_TWELVE_DATA_KEY","polygon","REACT_APP_POLYGON_API_KEY","fmp","REACT_APP_FMP_API_KEY","ortex","REACT_APP_ORTEX_API_KEY","timeout","parseInt","REACT_APP_API_TIMEOUT","cache","Map","cacheTimeout","endpoints","console","log","getCacheKey","endpoint","params","JSON","stringify","isCacheValid","timestamp","Date","now","setCache","key","data","set","getCache","cached","get","makeRequest","url","options","response","error","message","getPolygonStockPrice","symbol","Error","cacheKey","results","length","result","stockData","price","c","open","o","high","h","low","l","volume","v","change","changePercent","source","getAlphaVantageData","function_type","getTwelveDataQuote","code","parseFloat","close","percent_change","getFMPQuote","quote","dayHigh","dayLow","changesPercentage","marketCap","pe","getUnusualWhalesOptionsFlow","baseUrl","headers","getOrtexShortInterest","getStockData","errors","providers","name","method","promises","map","provider","success","push","responses","Promise","allSettled","successful","filter","r","status","value","priority","sources","Object","keys","undefined","e","join","getMarketOverview","symbols","stocks","validStocks","values","stock","totalChange","reduce","sum","avgChange","marketSentiment","toFixed","successCount","errorCount","getOptionsFlowData","getTechnicalIndicators","healthCheck","services","check","service"],"sources":["/home/user/webapp/src/services/realDataService.js"],"sourcesContent":["import axios from 'axios';\n\nclass RealDataService {\n    constructor() {\n        this.apiKeys = {\n            unusualWhales: process.env.REACT_APP_UNUSUAL_WHALES_API_KEY,\n            alphaVantage: process.env.REACT_APP_ALPHA_VANTAGE_KEY,\n            twelveData: process.env.REACT_APP_TWELVE_DATA_KEY,\n            polygon: process.env.REACT_APP_POLYGON_API_KEY,\n            fmp: process.env.REACT_APP_FMP_API_KEY,\n            ortex: process.env.REACT_APP_ORTEX_API_KEY\n        };\n        \n        this.timeout = parseInt(process.env.REACT_APP_API_TIMEOUT) || 10000;\n        this.cache = new Map();\n        this.cacheTimeout = 30000; // 30 seconds\n        \n        // API endpoints\n        this.endpoints = {\n            polygon: 'https://api.polygon.io',\n            alphaVantage: 'https://www.alphavantage.co',\n            twelveData: 'https://api.twelvedata.com',\n            fmp: 'https://financialmodelingprep.com/api/v3',\n            unusualWhales: 'https://api.unusualwhales.com',\n            ortex: 'https://api.ortex.com'\n        };\n        \n        console.log('🔑 RealDataService initialized with API keys:', {\n            unusualWhales: !!this.apiKeys.unusualWhales,\n            alphaVantage: !!this.apiKeys.alphaVantage,\n            twelveData: !!this.apiKeys.twelveData,\n            polygon: !!this.apiKeys.polygon,\n            fmp: !!this.apiKeys.fmp,\n            ortex: !!this.apiKeys.ortex\n        });\n    }\n\n    // Cache management\n    getCacheKey(endpoint, params) {\n        return `${endpoint}_${JSON.stringify(params)}`;\n    }\n\n    isCacheValid(timestamp) {\n        return Date.now() - timestamp < this.cacheTimeout;\n    }\n\n    setCache(key, data) {\n        this.cache.set(key, {\n            data,\n            timestamp: Date.now()\n        });\n    }\n\n    getCache(key) {\n        const cached = this.cache.get(key);\n        if (cached && this.isCacheValid(cached.timestamp)) {\n            return cached.data;\n        }\n        return null;\n    }\n\n    // Generic API request handler\n    async makeRequest(url, options = {}) {\n        try {\n            const response = await axios.get(url, {\n                timeout: this.timeout,\n                ...options\n            });\n            return response.data;\n        } catch (error) {\n            console.error(`❌ API Request failed for ${url}:`, error.message);\n            throw error;\n        }\n    }\n\n    // Polygon.io - Real-time stock data\n    async getPolygonStockPrice(symbol) {\n        if (!this.apiKeys.polygon) {\n            throw new Error('Polygon API key not configured');\n        }\n\n        const cacheKey = this.getCacheKey('polygon_stock', { symbol });\n        const cached = this.getCache(cacheKey);\n        if (cached) return cached;\n\n        try {\n            const url = `${this.endpoints.polygon}/v2/aggs/ticker/${symbol}/prev?adjusted=true&apikey=${this.apiKeys.polygon}`;\n            const data = await this.makeRequest(url);\n            \n            if (data.results && data.results.length > 0) {\n                const result = data.results[0];\n                const stockData = {\n                    symbol,\n                    price: result.c,\n                    open: result.o,\n                    high: result.h,\n                    low: result.l,\n                    volume: result.v,\n                    change: result.c - result.o,\n                    changePercent: ((result.c - result.o) / result.o) * 100,\n                    source: 'Polygon',\n                    timestamp: Date.now()\n                };\n                \n                this.setCache(cacheKey, stockData);\n                return stockData;\n            }\n        } catch (error) {\n            console.error(`❌ Polygon API error for ${symbol}:`, error.message);\n            throw error;\n        }\n    }\n\n    // Alpha Vantage - Market data and indicators\n    async getAlphaVantageData(symbol, function_type = 'TIME_SERIES_INTRADAY') {\n        if (!this.apiKeys.alphaVantage) {\n            throw new Error('Alpha Vantage API key not configured');\n        }\n\n        const cacheKey = this.getCacheKey('alphavantage', { symbol, function_type });\n        const cached = this.getCache(cacheKey);\n        if (cached) return cached;\n\n        try {\n            const url = `${this.endpoints.alphaVantage}/query?function=${function_type}&symbol=${symbol}&interval=1min&apikey=${this.apiKeys.alphaVantage}`;\n            const data = await this.makeRequest(url);\n            \n            this.setCache(cacheKey, data);\n            return data;\n        } catch (error) {\n            console.error(`❌ Alpha Vantage API error for ${symbol}:`, error.message);\n            throw error;\n        }\n    }\n\n    // Twelve Data - Financial data\n    async getTwelveDataQuote(symbol) {\n        if (!this.apiKeys.twelveData) {\n            throw new Error('Twelve Data API key not configured');\n        }\n\n        const cacheKey = this.getCacheKey('twelvedata_quote', { symbol });\n        const cached = this.getCache(cacheKey);\n        if (cached) return cached;\n\n        try {\n            const url = `${this.endpoints.twelveData}/quote?symbol=${symbol}&apikey=${this.apiKeys.twelveData}`;\n            const data = await this.makeRequest(url);\n            \n            if (data && !data.code) {\n                const stockData = {\n                    symbol: data.symbol,\n                    price: parseFloat(data.close),\n                    open: parseFloat(data.open),\n                    high: parseFloat(data.high),\n                    low: parseFloat(data.low),\n                    volume: parseInt(data.volume),\n                    change: parseFloat(data.change),\n                    changePercent: parseFloat(data.percent_change),\n                    source: 'Twelve Data',\n                    timestamp: Date.now()\n                };\n                \n                this.setCache(cacheKey, stockData);\n                return stockData;\n            }\n        } catch (error) {\n            console.error(`❌ Twelve Data API error for ${symbol}:`, error.message);\n            throw error;\n        }\n    }\n\n    // Financial Modeling Prep - Comprehensive financial data\n    async getFMPQuote(symbol) {\n        if (!this.apiKeys.fmp) {\n            throw new Error('FMP API key not configured');\n        }\n\n        const cacheKey = this.getCacheKey('fmp_quote', { symbol });\n        const cached = this.getCache(cacheKey);\n        if (cached) return cached;\n\n        try {\n            const url = `${this.endpoints.fmp}/quote/${symbol}?apikey=${this.apiKeys.fmp}`;\n            const data = await this.makeRequest(url);\n            \n            if (data && data.length > 0) {\n                const quote = data[0];\n                const stockData = {\n                    symbol: quote.symbol,\n                    price: quote.price,\n                    open: quote.open,\n                    high: quote.dayHigh,\n                    low: quote.dayLow,\n                    volume: quote.volume,\n                    change: quote.change,\n                    changePercent: quote.changesPercentage,\n                    marketCap: quote.marketCap,\n                    pe: quote.pe,\n                    source: 'FMP',\n                    timestamp: Date.now()\n                };\n                \n                this.setCache(cacheKey, stockData);\n                return stockData;\n            }\n        } catch (error) {\n            console.error(`❌ FMP API error for ${symbol}:`, error.message);\n            throw error;\n        }\n    }\n\n    // Unusual Whales - Options flow data\n    async getUnusualWhalesOptionsFlow(symbol = null) {\n        if (!this.apiKeys.unusualWhales) {\n            throw new Error('Unusual Whales API key not configured');\n        }\n\n        const cacheKey = this.getCacheKey('unusual_whales_flow', { symbol });\n        const cached = this.getCache(cacheKey);\n        if (cached) return cached;\n\n        try {\n            const baseUrl = `${this.endpoints.unusualWhales}/api/stock_options_flow`;\n            const url = symbol ? `${baseUrl}/${symbol}` : baseUrl;\n            \n            const data = await this.makeRequest(url, {\n                headers: {\n                    'Authorization': `Bearer ${this.apiKeys.unusualWhales}`\n                }\n            });\n            \n            this.setCache(cacheKey, data);\n            return data;\n        } catch (error) {\n            console.error(`❌ Unusual Whales API error:`, error.message);\n            throw error;\n        }\n    }\n\n    // Ortex - Short interest data\n    async getOrtexShortInterest(symbol) {\n        if (!this.apiKeys.ortex) {\n            throw new Error('Ortex API key not configured');\n        }\n\n        const cacheKey = this.getCacheKey('ortex_short', { symbol });\n        const cached = this.getCache(cacheKey);\n        if (cached) return cached;\n\n        try {\n            const url = `${this.endpoints.ortex}/securities/${symbol}/short_interest`;\n            const data = await this.makeRequest(url, {\n                headers: {\n                    'Authorization': `Bearer ${this.apiKeys.ortex}`\n                }\n            });\n            \n            this.setCache(cacheKey, data);\n            return data;\n        } catch (error) {\n            console.error(`❌ Ortex API error for ${symbol}:`, error.message);\n            throw error;\n        }\n    }\n\n    // Unified method to get stock data from multiple sources\n    async getStockData(symbol) {\n        const results = {};\n        const errors = [];\n\n        // Try multiple providers in parallel\n        const providers = [\n            { name: 'polygon', method: () => this.getPolygonStockPrice(symbol) },\n            { name: 'twelveData', method: () => this.getTwelveDataQuote(symbol) },\n            { name: 'fmp', method: () => this.getFMPQuote(symbol) }\n        ];\n\n        const promises = providers.map(async (provider) => {\n            try {\n                const data = await provider.method();\n                results[provider.name] = data;\n                return { provider: provider.name, success: true, data };\n            } catch (error) {\n                errors.push({ provider: provider.name, error: error.message });\n                return { provider: provider.name, success: false, error: error.message };\n            }\n        });\n\n        const responses = await Promise.allSettled(promises);\n        \n        // Use the first successful response or combine data\n        const successful = responses\n            .filter(r => r.status === 'fulfilled' && r.value.success)\n            .map(r => r.value.data);\n\n        if (successful.length > 0) {\n            // Use the most complete data (prefer FMP > Twelve Data > Polygon)\n            const priority = ['fmp', 'twelveData', 'polygon'];\n            for (const provider of priority) {\n                if (results[provider]) {\n                    return {\n                        ...results[provider],\n                        sources: Object.keys(results),\n                        errors: errors.length > 0 ? errors : undefined\n                    };\n                }\n            }\n            return successful[0];\n        }\n\n        throw new Error(`Failed to fetch data for ${symbol} from all providers: ${errors.map(e => e.error).join(', ')}`);\n    }\n\n    // Get market overview with multiple stocks\n    async getMarketOverview() {\n        const symbols = ['SPY', 'QQQ', 'AAPL', 'NVDA', 'TSLA', 'MSFT', 'GOOGL', 'AMZN'];\n        const stocks = {};\n        const errors = [];\n\n        console.log('📊 Fetching market overview for symbols:', symbols);\n\n        // Fetch data for all symbols\n        const promises = symbols.map(async (symbol) => {\n            try {\n                const data = await this.getStockData(symbol);\n                stocks[symbol] = data;\n                return { symbol, success: true, data };\n            } catch (error) {\n                console.error(`❌ Failed to fetch data for ${symbol}:`, error.message);\n                errors.push({ symbol, error: error.message });\n                return { symbol, success: false, error: error.message };\n            }\n        });\n\n        await Promise.allSettled(promises);\n\n        if (Object.keys(stocks).length === 0) {\n            throw new Error('Failed to fetch data for any symbols');\n        }\n\n        // Calculate market sentiment\n        const validStocks = Object.values(stocks).filter(stock => stock.changePercent !== undefined);\n        const totalChange = validStocks.reduce((sum, stock) => sum + stock.changePercent, 0);\n        const avgChange = totalChange / validStocks.length;\n\n        console.log(`✅ Successfully fetched data for ${Object.keys(stocks).length}/${symbols.length} symbols`);\n\n        return {\n            stocks,\n            marketSentiment: avgChange > 0.5 ? 'Bullish' : avgChange < -0.5 ? 'Bearish' : 'Neutral',\n            avgChange: parseFloat(avgChange.toFixed(2)),\n            successCount: Object.keys(stocks).length,\n            errorCount: errors.length,\n            errors: errors.length > 0 ? errors : undefined,\n            timestamp: Date.now()\n        };\n    }\n\n    // Get options flow data\n    async getOptionsFlowData() {\n        try {\n            console.log('📈 Fetching options flow data from Unusual Whales...');\n            const data = await this.getUnusualWhalesOptionsFlow();\n            return data;\n        } catch (error) {\n            console.error('❌ Failed to fetch options flow data:', error.message);\n            throw error;\n        }\n    }\n\n    // Get technical indicators\n    async getTechnicalIndicators(symbol) {\n        try {\n            const data = await this.getAlphaVantageData(symbol, 'RSI');\n            return data;\n        } catch (error) {\n            console.error(`❌ Failed to fetch technical indicators for ${symbol}:`, error.message);\n            throw error;\n        }\n    }\n\n    // Health check for all APIs\n    async healthCheck() {\n        const services = [\n            { name: 'Polygon', check: () => this.getPolygonStockPrice('AAPL') },\n            { name: 'Twelve Data', check: () => this.getTwelveDataQuote('AAPL') },\n            { name: 'FMP', check: () => this.getFMPQuote('AAPL') },\n            { name: 'Alpha Vantage', check: () => this.getAlphaVantageData('AAPL') }\n        ];\n\n        const results = {};\n\n        for (const service of services) {\n            try {\n                await service.check();\n                results[service.name] = { status: 'OK', timestamp: Date.now() };\n                console.log(`✅ ${service.name} API: OK`);\n            } catch (error) {\n                results[service.name] = { \n                    status: 'ERROR', \n                    error: error.message, \n                    timestamp: Date.now() \n                };\n                console.log(`❌ ${service.name} API: ERROR - ${error.message}`);\n            }\n        }\n\n        return results;\n    }\n}\n\nexport default new RealDataService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}