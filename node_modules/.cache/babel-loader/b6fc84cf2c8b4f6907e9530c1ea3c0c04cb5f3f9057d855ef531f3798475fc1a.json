{"ast":null,"code":"class MLTradingEngine{constructor(){this.features=['price','volume','change','rsi','macd','volatility','trend','momentum','support','resistance'];this.strategies={momentum:{weight:0.3,performance:0.65},meanReversion:{weight:0.25,performance:0.58},breakout:{weight:0.2,performance:0.72},scalping:{weight:0.15,performance:0.45},swing:{weight:0.1,performance:0.68}};}// Calculate technical indicators\ncalculateRSI(prices){let period=arguments.length>1&&arguments[1]!==undefined?arguments[1]:14;if(prices.length<period)return 50;let gains=0,losses=0;for(let i=1;i<period;i++){const diff=prices[i]-prices[i-1];if(diff>0)gains+=diff;else losses-=diff;}const avgGain=gains/period;const avgLoss=losses/period;const rs=avgGain/(avgLoss||1);return 100-100/(1+rs);}calculateMACD(prices){const ema12=this.calculateEMA(prices,12);const ema26=this.calculateEMA(prices,26);return ema12-ema26;}calculateEMA(prices,period){if(prices.length===0)return 0;const multiplier=2/(period+1);let ema=prices[0];for(let i=1;i<prices.length;i++){ema=(prices[i]-ema)*multiplier+ema;}return ema;}calculateVolatility(prices){if(prices.length<2)return 0;const returns=[];for(let i=1;i<prices.length;i++){returns.push((prices[i]-prices[i-1])/prices[i-1]);}const avgReturn=returns.reduce((a,b)=>a+b,0)/returns.length;const variance=returns.reduce((sum,ret)=>sum+Math.pow(ret-avgReturn,2),0)/returns.length;return Math.sqrt(variance*252);// Annualized\n}// Extract features from market data\nextractFeatures(stockData){const prices=this.generatePriceHistory(stockData.price);return{price:stockData.price,volume:stockData.volume/1000000,// Normalize\nchange:stockData.changePercent,rsi:this.calculateRSI(prices),macd:this.calculateMACD(prices),volatility:this.calculateVolatility(prices),trend:stockData.changePercent>0?1:-1,momentum:Math.abs(stockData.changePercent)/10,support:stockData.low,resistance:stockData.high};}// Generate realistic price history\ngeneratePriceHistory(currentPrice){let days=arguments.length>1&&arguments[1]!==undefined?arguments[1]:50;const prices=[];let price=currentPrice;for(let i=0;i<days;i++){price=price*(1+(Math.random()-0.5)*0.02);prices.push(price);}return prices;}// Generate AI trading recommendations (enhanced version)\nasync generateRecommendations(marketData){let optionsFlowData=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;try{// Use enhanced ML engine if available\nif(typeof window!=='undefined'){// In browser environment, use dynamic import\nconst{default:enhancedML}=await import('./enhancedMLEngine.js');console.log('🤖 Using Enhanced ML Engine for recommendations...');return await enhancedML.generateEnhancedRecommendations(marketData,optionsFlowData);}}catch(error){console.warn('⚠️ Enhanced ML Engine not available, using fallback:',error.message);}// Fallback to original recommendations\nconst recommendations=[];Object.entries(marketData).forEach(_ref=>{let[symbol,data]=_ref;const features=this.extractFeatures(data);const analysis=this.analyzeStock(features);if(analysis.confidence>60){recommendations.push({symbol,action:analysis.action,confidence:analysis.confidence,strategy:analysis.strategy,entryPrice:data.price,targetPrice:this.calculateTarget(data.price,analysis.action),stopLoss:this.calculateStopLoss(data.price,analysis.action),reasoning:analysis.reasoning,riskReward:analysis.riskReward,timeframe:analysis.timeframe,timestamp:Date.now()});}});return recommendations.sort((a,b)=>b.confidence-a.confidence).slice(0,5);}// Analyze individual stock\nanalyzeStock(features){let score=0;let reasoning=[];// RSI Analysis\nif(features.rsi<30){score+=0.3;reasoning.push('RSI indicates oversold conditions');}else if(features.rsi>70){score-=0.3;reasoning.push('RSI indicates overbought conditions');}// MACD Analysis\nif(features.macd>0){score+=0.2;reasoning.push('MACD showing bullish momentum');}else{score-=0.2;reasoning.push('MACD showing bearish momentum');}// Volume Analysis\nif(features.volume>5){score+=0.15;reasoning.push('High volume supporting move');}// Trend Analysis\nif(features.trend>0&&features.momentum>0.5){score+=0.25;reasoning.push('Strong upward trend detected');}else if(features.trend<0&&features.momentum>0.5){score-=0.25;reasoning.push('Strong downward trend detected');}// Volatility Analysis\nif(features.volatility>0.3){score+=0.1;reasoning.push('High volatility creating opportunities');}const action=score>0.1?'BUY':score<-0.1?'SELL':'HOLD';const confidence=Math.min(Math.abs(score)*100+50,95);return{action,confidence:parseFloat(confidence.toFixed(1)),strategy:this.selectStrategy(features),reasoning:reasoning.join(', '),riskReward:this.calculateRiskReward(score),timeframe:this.selectTimeframe(features.volatility)};}selectStrategy(features){if(features.rsi<30||features.rsi>70)return'meanReversion';if(features.momentum>0.7)return'momentum';if(features.volatility>0.4)return'breakout';return'swing';}calculateTarget(price,action){const multiplier=action==='BUY'?1.05:0.95;return parseFloat((price*multiplier).toFixed(2));}calculateStopLoss(price,action){const multiplier=action==='BUY'?0.97:1.03;return parseFloat((price*multiplier).toFixed(2));}calculateRiskReward(score){const ratio=Math.abs(score)*3+1;return\"1:\".concat(ratio.toFixed(1));}selectTimeframe(volatility){if(volatility>0.4)return'1-3 days';if(volatility>0.2)return'3-7 days';return'1-3 weeks';}// Learn from completed trades\nlearnFromTrade(trade){const strategy=trade.strategy;if(!this.strategies[strategy]){this.strategies[strategy]={weight:0.1,performance:0.5};}const isWin=trade.profit>0;const currentPerf=this.strategies[strategy].performance;// Update performance with exponential moving average\nthis.strategies[strategy].performance=currentPerf*0.9+(isWin?1:0)*0.1;// Adjust weight based on performance\nif(this.strategies[strategy].performance>0.6){this.strategies[strategy].weight=Math.min(this.strategies[strategy].weight*1.1,0.4);}else if(this.strategies[strategy].performance<0.4){this.strategies[strategy].weight=Math.max(this.strategies[strategy].weight*0.9,0.05);}return{strategy,newPerformance:this.strategies[strategy].performance,newWeight:this.strategies[strategy].weight};}// Mock market data for testing\ngenerateMockData(symbol){const basePrice={'AAPL':175,'NVDA':485,'TSLA':248,'SPY':485,'QQQ':385}[symbol]||150;const change=(Math.random()-0.5)*10;const price=basePrice+change;return{symbol,price:parseFloat(price.toFixed(2)),change:parseFloat(change.toFixed(2)),changePercent:parseFloat((change/basePrice*100).toFixed(2)),volume:Math.floor(Math.random()*10000000)+1000000,high:parseFloat((price*1.02).toFixed(2)),low:parseFloat((price*0.98).toFixed(2)),open:parseFloat(basePrice.toFixed(2)),source:'Mock Data',timestamp:Date.now()};}// Get market overview (now uses real data)\nasync getMarketOverview(){try{// Import real data service dynamically to avoid circular imports\nconst{default:realDataService}=await import('./realDataService');console.log('🔄 Fetching real market data...');const realData=await realDataService.getMarketOverview();console.log('✅ Real data fetched successfully:',Object.keys(realData.stocks));return realData;}catch(error){console.warn('⚠️ Real data fetch failed, falling back to mock data:',error.message);// Fallback to mock data if real data fails\nconst symbols=['SPY','QQQ','AAPL','NVDA','TSLA'];const stocks={};symbols.forEach(symbol=>{stocks[symbol]=this.generateMockData(symbol);});const totalChange=Object.values(stocks).reduce((sum,stock)=>sum+stock.changePercent,0);const avgChange=totalChange/symbols.length;return{stocks,marketSentiment:avgChange>0.5?'Bullish':avgChange<-0.5?'Bearish':'Neutral',avgChange:parseFloat(avgChange.toFixed(2)),timestamp:Date.now(),usingMockData:true,error:error.message};}}}export default new MLTradingEngine();","map":{"version":3,"names":["MLTradingEngine","constructor","features","strategies","momentum","weight","performance","meanReversion","breakout","scalping","swing","calculateRSI","prices","period","arguments","length","undefined","gains","losses","i","diff","avgGain","avgLoss","rs","calculateMACD","ema12","calculateEMA","ema26","multiplier","ema","calculateVolatility","returns","push","avgReturn","reduce","a","b","variance","sum","ret","Math","pow","sqrt","extractFeatures","stockData","generatePriceHistory","price","volume","change","changePercent","rsi","macd","volatility","trend","abs","support","low","resistance","high","currentPrice","days","random","generateRecommendations","marketData","optionsFlowData","window","default","enhancedML","console","log","generateEnhancedRecommendations","error","warn","message","recommendations","Object","entries","forEach","_ref","symbol","data","analysis","analyzeStock","confidence","action","strategy","entryPrice","targetPrice","calculateTarget","stopLoss","calculateStopLoss","reasoning","riskReward","timeframe","timestamp","Date","now","sort","slice","score","min","parseFloat","toFixed","selectStrategy","join","calculateRiskReward","selectTimeframe","ratio","concat","learnFromTrade","trade","isWin","profit","currentPerf","max","newPerformance","newWeight","generateMockData","basePrice","floor","open","source","getMarketOverview","realDataService","realData","keys","stocks","symbols","totalChange","values","stock","avgChange","marketSentiment","usingMockData"],"sources":["/home/user/webapp/src/services/apiService.js"],"sourcesContent":["class MLTradingEngine {\n    constructor() {\n        this.features = [\n            'price', 'volume', 'change', 'rsi', 'macd', 'volatility',\n            'trend', 'momentum', 'support', 'resistance'\n        ];\n        \n        this.strategies = {\n            momentum: { weight: 0.3, performance: 0.65 },\n            meanReversion: { weight: 0.25, performance: 0.58 },\n            breakout: { weight: 0.2, performance: 0.72 },\n            scalping: { weight: 0.15, performance: 0.45 },\n            swing: { weight: 0.1, performance: 0.68 }\n        };\n    }\n\n    // Calculate technical indicators\n    calculateRSI(prices, period = 14) {\n        if (prices.length < period) return 50;\n        \n        let gains = 0, losses = 0;\n        for (let i = 1; i < period; i++) {\n            const diff = prices[i] - prices[i - 1];\n            if (diff > 0) gains += diff;\n            else losses -= diff;\n        }\n        \n        const avgGain = gains / period;\n        const avgLoss = losses / period;\n        const rs = avgGain / (avgLoss || 1);\n        return 100 - (100 / (1 + rs));\n    }\n\n    calculateMACD(prices) {\n        const ema12 = this.calculateEMA(prices, 12);\n        const ema26 = this.calculateEMA(prices, 26);\n        return ema12 - ema26;\n    }\n\n    calculateEMA(prices, period) {\n        if (prices.length === 0) return 0;\n        \n        const multiplier = 2 / (period + 1);\n        let ema = prices[0];\n        \n        for (let i = 1; i < prices.length; i++) {\n            ema = (prices[i] - ema) * multiplier + ema;\n        }\n        return ema;\n    }\n\n    calculateVolatility(prices) {\n        if (prices.length < 2) return 0;\n        \n        const returns = [];\n        for (let i = 1; i < prices.length; i++) {\n            returns.push((prices[i] - prices[i - 1]) / prices[i - 1]);\n        }\n        \n        const avgReturn = returns.reduce((a, b) => a + b, 0) / returns.length;\n        const variance = returns.reduce((sum, ret) => \n            sum + Math.pow(ret - avgReturn, 2), 0) / returns.length;\n        \n        return Math.sqrt(variance * 252); // Annualized\n    }\n\n    // Extract features from market data\n    extractFeatures(stockData) {\n        const prices = this.generatePriceHistory(stockData.price);\n        return {\n            price: stockData.price,\n            volume: stockData.volume / 1000000, // Normalize\n            change: stockData.changePercent,\n            rsi: this.calculateRSI(prices),\n            macd: this.calculateMACD(prices),\n            volatility: this.calculateVolatility(prices),\n            trend: stockData.changePercent > 0 ? 1 : -1,\n            momentum: Math.abs(stockData.changePercent) / 10,\n            support: stockData.low,\n            resistance: stockData.high\n        };\n    }\n\n    // Generate realistic price history\n    generatePriceHistory(currentPrice, days = 50) {\n        const prices = [];\n        let price = currentPrice;\n        \n        for (let i = 0; i < days; i++) {\n            price = price * (1 + (Math.random() - 0.5) * 0.02);\n            prices.push(price);\n        }\n        return prices;\n    }\n\n    // Generate AI trading recommendations (enhanced version)\n    async generateRecommendations(marketData, optionsFlowData = null) {\n        try {\n            // Use enhanced ML engine if available\n            if (typeof window !== 'undefined') {\n                // In browser environment, use dynamic import\n                const { default: enhancedML } = await import('./enhancedMLEngine.js');\n                console.log('🤖 Using Enhanced ML Engine for recommendations...');\n                return await enhancedML.generateEnhancedRecommendations(marketData, optionsFlowData);\n            }\n        } catch (error) {\n            console.warn('⚠️ Enhanced ML Engine not available, using fallback:', error.message);\n        }\n\n        // Fallback to original recommendations\n        const recommendations = [];\n        \n        Object.entries(marketData).forEach(([symbol, data]) => {\n            const features = this.extractFeatures(data);\n            const analysis = this.analyzeStock(features);\n            \n            if (analysis.confidence > 60) {\n                recommendations.push({\n                    symbol,\n                    action: analysis.action,\n                    confidence: analysis.confidence,\n                    strategy: analysis.strategy,\n                    entryPrice: data.price,\n                    targetPrice: this.calculateTarget(data.price, analysis.action),\n                    stopLoss: this.calculateStopLoss(data.price, analysis.action),\n                    reasoning: analysis.reasoning,\n                    riskReward: analysis.riskReward,\n                    timeframe: analysis.timeframe,\n                    timestamp: Date.now()\n                });\n            }\n        });\n        \n        return recommendations\n            .sort((a, b) => b.confidence - a.confidence)\n            .slice(0, 5);\n    }\n\n    // Analyze individual stock\n    analyzeStock(features) {\n        let score = 0;\n        let reasoning = [];\n\n        // RSI Analysis\n        if (features.rsi < 30) {\n            score += 0.3;\n            reasoning.push('RSI indicates oversold conditions');\n        } else if (features.rsi > 70) {\n            score -= 0.3;\n            reasoning.push('RSI indicates overbought conditions');\n        }\n\n        // MACD Analysis\n        if (features.macd > 0) {\n            score += 0.2;\n            reasoning.push('MACD showing bullish momentum');\n        } else {\n            score -= 0.2;\n            reasoning.push('MACD showing bearish momentum');\n        }\n\n        // Volume Analysis\n        if (features.volume > 5) {\n            score += 0.15;\n            reasoning.push('High volume supporting move');\n        }\n\n        // Trend Analysis\n        if (features.trend > 0 && features.momentum > 0.5) {\n            score += 0.25;\n            reasoning.push('Strong upward trend detected');\n        } else if (features.trend < 0 && features.momentum > 0.5) {\n            score -= 0.25;\n            reasoning.push('Strong downward trend detected');\n        }\n\n        // Volatility Analysis\n        if (features.volatility > 0.3) {\n            score += 0.1;\n            reasoning.push('High volatility creating opportunities');\n        }\n\n        const action = score > 0.1 ? 'BUY' : score < -0.1 ? 'SELL' : 'HOLD';\n        const confidence = Math.min(Math.abs(score) * 100 + 50, 95);\n\n        return {\n            action,\n            confidence: parseFloat(confidence.toFixed(1)),\n            strategy: this.selectStrategy(features),\n            reasoning: reasoning.join(', '),\n            riskReward: this.calculateRiskReward(score),\n            timeframe: this.selectTimeframe(features.volatility)\n        };\n    }\n\n    selectStrategy(features) {\n        if (features.rsi < 30 || features.rsi > 70) return 'meanReversion';\n        if (features.momentum > 0.7) return 'momentum';\n        if (features.volatility > 0.4) return 'breakout';\n        return 'swing';\n    }\n\n    calculateTarget(price, action) {\n        const multiplier = action === 'BUY' ? 1.05 : 0.95;\n        return parseFloat((price * multiplier).toFixed(2));\n    }\n\n    calculateStopLoss(price, action) {\n        const multiplier = action === 'BUY' ? 0.97 : 1.03;\n        return parseFloat((price * multiplier).toFixed(2));\n    }\n\n    calculateRiskReward(score) {\n        const ratio = Math.abs(score) * 3 + 1;\n        return `1:${ratio.toFixed(1)}`;\n    }\n\n    selectTimeframe(volatility) {\n        if (volatility > 0.4) return '1-3 days';\n        if (volatility > 0.2) return '3-7 days';\n        return '1-3 weeks';\n    }\n\n    // Learn from completed trades\n    learnFromTrade(trade) {\n        const strategy = trade.strategy;\n        if (!this.strategies[strategy]) {\n            this.strategies[strategy] = { weight: 0.1, performance: 0.5 };\n        }\n\n        const isWin = trade.profit > 0;\n        const currentPerf = this.strategies[strategy].performance;\n\n        // Update performance with exponential moving average\n        this.strategies[strategy].performance = currentPerf * 0.9 + (isWin ? 1 : 0) * 0.1;\n\n        // Adjust weight based on performance\n        if (this.strategies[strategy].performance > 0.6) {\n            this.strategies[strategy].weight = Math.min(\n                this.strategies[strategy].weight * 1.1, \n                0.4\n            );\n        } else if (this.strategies[strategy].performance < 0.4) {\n            this.strategies[strategy].weight = Math.max(\n                this.strategies[strategy].weight * 0.9, \n                0.05\n            );\n        }\n\n        return {\n            strategy,\n            newPerformance: this.strategies[strategy].performance,\n            newWeight: this.strategies[strategy].weight\n        };\n    }\n\n    // Mock market data for testing\n    generateMockData(symbol) {\n        const basePrice = {\n            'AAPL': 175,\n            'NVDA': 485,\n            'TSLA': 248,\n            'SPY': 485,\n            'QQQ': 385\n        }[symbol] || 150;\n\n        const change = (Math.random() - 0.5) * 10;\n        const price = basePrice + change;\n\n        return {\n            symbol,\n            price: parseFloat(price.toFixed(2)),\n            change: parseFloat(change.toFixed(2)),\n            changePercent: parseFloat((change / basePrice * 100).toFixed(2)),\n            volume: Math.floor(Math.random() * 10000000) + 1000000,\n            high: parseFloat((price * 1.02).toFixed(2)),\n            low: parseFloat((price * 0.98).toFixed(2)),\n            open: parseFloat(basePrice.toFixed(2)),\n            source: 'Mock Data',\n            timestamp: Date.now()\n        };\n    }\n\n    // Get market overview (now uses real data)\n    async getMarketOverview() {\n        try {\n            // Import real data service dynamically to avoid circular imports\n            const { default: realDataService } = await import('./realDataService');\n            \n            console.log('🔄 Fetching real market data...');\n            const realData = await realDataService.getMarketOverview();\n            \n            console.log('✅ Real data fetched successfully:', Object.keys(realData.stocks));\n            return realData;\n        } catch (error) {\n            console.warn('⚠️ Real data fetch failed, falling back to mock data:', error.message);\n            \n            // Fallback to mock data if real data fails\n            const symbols = ['SPY', 'QQQ', 'AAPL', 'NVDA', 'TSLA'];\n            const stocks = {};\n            \n            symbols.forEach(symbol => {\n                stocks[symbol] = this.generateMockData(symbol);\n            });\n\n            const totalChange = Object.values(stocks).reduce((sum, stock) => sum + stock.changePercent, 0);\n            const avgChange = totalChange / symbols.length;\n\n            return {\n                stocks,\n                marketSentiment: avgChange > 0.5 ? 'Bullish' : avgChange < -0.5 ? 'Bearish' : 'Neutral',\n                avgChange: parseFloat(avgChange.toFixed(2)),\n                timestamp: Date.now(),\n                usingMockData: true,\n                error: error.message\n            };\n        }\n    }\n}\n\nexport default new MLTradingEngine();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}