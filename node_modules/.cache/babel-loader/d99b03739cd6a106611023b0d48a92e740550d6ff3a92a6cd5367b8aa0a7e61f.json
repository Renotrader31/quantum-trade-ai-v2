{"ast":null,"code":"/**\n * Advanced Options Flow Analysis Engine\n * Sophisticated analysis of unusual options activity and market sentiment\n */\n\nclass FlowAnalysis {\n  constructor() {\n    this.flowPatterns = {};\n    this.whaleThresholds = {\n      premium: 50000,\n      // $50K+ premium\n      volume: 100,\n      // 100+ contracts\n      unusualVolume: 5 // 5x average volume\n    };\n    this.sentimentWeights = {\n      callPutRatio: 0.3,\n      volumeProfile: 0.25,\n      premiumFlow: 0.25,\n      timeDecay: 0.2\n    };\n  }\n\n  // ==================== FLOW PATTERN ANALYSIS ====================\n\n  /**\n   * Analyze options flow patterns and identify whale activity\n   */\n  analyzeFlowPatterns(flowData) {\n    if (!flowData || flowData.length === 0) {\n      return this.getEmptyAnalysis();\n    }\n    const analysis = {\n      whaleActivity: this.detectWhaleActivity(flowData),\n      sentimentAnalysis: this.analyzeSentiment(flowData),\n      volumeAnalysis: this.analyzeVolume(flowData),\n      premiumFlow: this.analyzePremiumFlow(flowData),\n      timeAnalysis: this.analyzeTimePatterns(flowData),\n      unusualActivity: this.detectUnusualActivity(flowData),\n      gamma: this.analyzeGammaExposure(flowData),\n      strategies: this.identifyStrategies(flowData)\n    };\n    analysis.overallSignal = this.calculateOverallFlowSignal(analysis);\n    return analysis;\n  }\n\n  /**\n   * Detect whale activity (large premium trades)\n   */\n  detectWhaleActivity(flowData) {\n    const whaleFlows = flowData.filter(flow => {\n      const premium = flow.premium || flow.total_premium || 0;\n      const volume = flow.volume || 0;\n      return premium >= this.whaleThresholds.premium || volume >= this.whaleThresholds.volume;\n    });\n    const totalWhalePremium = whaleFlows.reduce((sum, flow) => sum + (flow.premium || flow.total_premium || 0), 0);\n    const whaleCallPremium = whaleFlows.filter(f => (f.type || f.call_put || '').toLowerCase().includes('call')).reduce((sum, flow) => sum + (flow.premium || flow.total_premium || 0), 0);\n    const whalePutPremium = whaleFlows.filter(f => (f.type || f.call_put || '').toLowerCase().includes('put')).reduce((sum, flow) => sum + (flow.premium || flow.total_premium || 0), 0);\n    return {\n      totalWhaleFlows: whaleFlows.length,\n      totalWhalePremium: totalWhalePremium,\n      whaleCallPremium: whaleCallPremium,\n      whalePutPremium: whalePutPremium,\n      whaleCallPutRatio: whalePutPremium > 0 ? whaleCallPremium / whalePutPremium : whaleCallPremium > 0 ? 999 : 0,\n      averageWhalePremium: whaleFlows.length > 0 ? totalWhalePremium / whaleFlows.length : 0,\n      largestFlow: whaleFlows.reduce((max, flow) => Math.max(max, flow.premium || flow.total_premium || 0), 0),\n      whaleFlows: whaleFlows.slice(0, 10) // Top 10 whale flows\n    };\n  }\n\n  /**\n   * Analyze overall market sentiment from flow\n   */\n  analyzeSentiment(flowData) {\n    const calls = flowData.filter(f => (f.type || f.call_put || '').toLowerCase().includes('call'));\n    const puts = flowData.filter(f => (f.type || f.call_put || '').toLowerCase().includes('put'));\n    const callVolume = calls.reduce((sum, f) => sum + (f.volume || 0), 0);\n    const putVolume = puts.reduce((sum, f) => sum + (f.volume || 0), 0);\n    const callPremium = calls.reduce((sum, f) => sum + (f.premium || f.total_premium || 0), 0);\n    const putPremium = puts.reduce((sum, f) => sum + (f.premium || f.total_premium || 0), 0);\n    const callPutRatio = putVolume > 0 ? callVolume / putVolume : callVolume > 0 ? 999 : 1;\n    const premiumRatio = putPremium > 0 ? callPremium / putPremium : callPremium > 0 ? 999 : 1;\n\n    // Calculate sentiment score (0-100, 50 = neutral)\n    let sentimentScore = 50;\n\n    // Call/Put ratio influence (higher ratio = more bullish)\n    if (callPutRatio > 1.5) sentimentScore += 15;else if (callPutRatio > 1.2) sentimentScore += 10;else if (callPutRatio > 1.0) sentimentScore += 5;else if (callPutRatio < 0.7) sentimentScore -= 15;else if (callPutRatio < 0.8) sentimentScore -= 10;else if (callPutRatio < 0.9) sentimentScore -= 5;\n\n    // Premium flow influence\n    if (premiumRatio > 2.0) sentimentScore += 10;else if (premiumRatio < 0.5) sentimentScore -= 10;\n    return {\n      callCount: calls.length,\n      putCount: puts.length,\n      callVolume: callVolume,\n      putVolume: putVolume,\n      callPremium: callPremium,\n      putPremium: putPremium,\n      callPutRatio: callPutRatio,\n      premiumRatio: premiumRatio,\n      sentimentScore: Math.max(0, Math.min(100, sentimentScore)),\n      sentiment: sentimentScore > 70 ? 'VERY_BULLISH' : sentimentScore > 60 ? 'BULLISH' : sentimentScore > 40 ? 'NEUTRAL' : sentimentScore > 30 ? 'BEARISH' : 'VERY_BEARISH'\n    };\n  }\n\n  /**\n   * Analyze volume patterns\n   */\n  analyzeVolume(flowData) {\n    const totalVolume = flowData.reduce((sum, f) => sum + (f.volume || 0), 0);\n    const totalContracts = flowData.length;\n    const avgVolumePerContract = totalContracts > 0 ? totalVolume / totalContracts : 0;\n\n    // Group by strike ranges for volume distribution\n    const strikes = flowData.map(f => f.strike || f.strike_price || 0).filter(s => s > 0);\n    const strikeVolumes = {};\n    flowData.forEach(flow => {\n      const strike = flow.strike || flow.strike_price || 0;\n      if (strike > 0) {\n        strikeVolumes[strike] = (strikeVolumes[strike] || 0) + (flow.volume || 0);\n      }\n    });\n    const maxVolumeStrike = Object.keys(strikeVolumes).reduce((maxStrike, strike) => strikeVolumes[strike] > (strikeVolumes[maxStrike] || 0) ? strike : maxStrike, '0');\n    return {\n      totalVolume: totalVolume,\n      totalContracts: totalContracts,\n      avgVolumePerContract: avgVolumePerContract,\n      maxVolumeStrike: parseFloat(maxVolumeStrike),\n      maxVolumeAmount: strikeVolumes[maxVolumeStrike] || 0,\n      strikeDistribution: Object.keys(strikeVolumes).length,\n      volumeConcentration: totalVolume > 0 ? (strikeVolumes[maxVolumeStrike] || 0) / totalVolume : 0\n    };\n  }\n\n  /**\n   * Analyze premium flow patterns\n   */\n  analyzePremiumFlow(flowData) {\n    const totalPremium = flowData.reduce((sum, f) => sum + (f.premium || f.total_premium || 0), 0);\n    const premiumByStrike = {};\n    flowData.forEach(flow => {\n      const strike = flow.strike || flow.strike_price || 0;\n      const premium = flow.premium || flow.total_premium || 0;\n      if (strike > 0 && premium > 0) {\n        premiumByStrike[strike] = (premiumByStrike[strike] || 0) + premium;\n      }\n    });\n    const largestPremiumFlow = flowData.reduce((max, flow) => {\n      const premium = flow.premium || flow.total_premium || 0;\n      return premium > (max.premium || max.total_premium || 0) ? flow : max;\n    }, flowData[0] || {});\n    return {\n      totalPremium: totalPremium,\n      avgPremiumPerFlow: flowData.length > 0 ? totalPremium / flowData.length : 0,\n      largestPremiumFlow: largestPremiumFlow,\n      premiumDistribution: premiumByStrike,\n      highPremiumFlows: flowData.filter(f => (f.premium || f.total_premium || 0) > this.whaleThresholds.premium).length\n    };\n  }\n\n  /**\n   * Analyze time-based patterns\n   */\n  analyzeTimePatterns(flowData) {\n    const now = Date.now();\n    const recentFlows = flowData.filter(flow => {\n      const flowTime = flow.timestamp || flow.time || now;\n      return now - flowTime < 3600000; // Last hour\n    });\n\n    // Group by expiration dates\n    const expirationGroups = {};\n    flowData.forEach(flow => {\n      const exp = flow.expiration || flow.exp_date || 'unknown';\n      expirationGroups[exp] = (expirationGroups[exp] || 0) + 1;\n    });\n    const mostPopularExpiration = Object.keys(expirationGroups).reduce((maxExp, exp) => expirationGroups[exp] > (expirationGroups[maxExp] || 0) ? exp : maxExp, 'unknown');\n    return {\n      totalFlows: flowData.length,\n      recentFlows: recentFlows.length,\n      recentActivity: flowData.length > 0 ? recentFlows.length / flowData.length : 0,\n      expirationDistribution: expirationGroups,\n      mostPopularExpiration: mostPopularExpiration,\n      shortTermFlows: Object.keys(expirationGroups).filter(exp => this.isShortTermExpiration(exp)).length\n    };\n  }\n\n  /**\n   * Detect unusual activity patterns\n   */\n  detectUnusualActivity(flowData) {\n    const unusualPatterns = [];\n\n    // Large single trades\n    const largeTrades = flowData.filter(f => (f.premium || f.total_premium || 0) > this.whaleThresholds.premium * 2);\n    if (largeTrades.length > 0) {\n      unusualPatterns.push({\n        type: 'LARGE_TRADES',\n        count: largeTrades.length,\n        description: `${largeTrades.length} trades with premium > $${this.whaleThresholds.premium * 2}`,\n        significance: 'HIGH'\n      });\n    }\n\n    // Concentrated strikes\n    const strikes = {};\n    flowData.forEach(f => {\n      const strike = f.strike || f.strike_price || 0;\n      strikes[strike] = (strikes[strike] || 0) + 1;\n    });\n    const maxStrikes = Math.max(...Object.values(strikes));\n    if (maxStrikes > flowData.length * 0.3) {\n      unusualPatterns.push({\n        type: 'STRIKE_CONCENTRATION',\n        count: maxStrikes,\n        description: `Heavy concentration at single strike level`,\n        significance: 'MEDIUM'\n      });\n    }\n\n    // Time concentration\n    const hourGroups = {};\n    flowData.forEach(f => {\n      const time = new Date(f.timestamp || f.time || Date.now());\n      const hour = time.getHours();\n      hourGroups[hour] = (hourGroups[hour] || 0) + 1;\n    });\n    const maxHourActivity = Math.max(...Object.values(hourGroups));\n    if (maxHourActivity > flowData.length * 0.5) {\n      unusualPatterns.push({\n        type: 'TIME_CONCENTRATION',\n        count: maxHourActivity,\n        description: `Heavy activity concentrated in single hour`,\n        significance: 'MEDIUM'\n      });\n    }\n    return unusualPatterns;\n  }\n\n  /**\n   * Analyze gamma exposure implications\n   */\n  analyzeGammaExposure(flowData) {\n    // Simplified gamma analysis\n    const callFlows = flowData.filter(f => (f.type || f.call_put || '').toLowerCase().includes('call'));\n    const putFlows = flowData.filter(f => (f.type || f.call_put || '').toLowerCase().includes('put'));\n    const totalCallVolume = callFlows.reduce((sum, f) => sum + (f.volume || 0), 0);\n    const totalPutVolume = putFlows.reduce((sum, f) => sum + (f.volume || 0), 0);\n\n    // Estimate net gamma exposure (simplified)\n    const netGammaExposure = totalCallVolume - totalPutVolume;\n    return {\n      callGamma: totalCallVolume,\n      putGamma: totalPutVolume,\n      netGamma: netGammaExposure,\n      gammaImplication: netGammaExposure > 1000 ? 'POSITIVE_GAMMA' : netGammaExposure < -1000 ? 'NEGATIVE_GAMMA' : 'NEUTRAL_GAMMA',\n      volatilityImpact: Math.abs(netGammaExposure) > 2000 ? 'HIGH' : Math.abs(netGammaExposure) > 500 ? 'MEDIUM' : 'LOW'\n    };\n  }\n\n  /**\n   * Identify potential trading strategies from flow\n   */\n  identifyStrategies(flowData) {\n    const strategies = [];\n\n    // Group by symbol and analyze\n    const symbolGroups = {};\n    flowData.forEach(flow => {\n      const symbol = flow.symbol || flow.ticker || 'UNKNOWN';\n      if (!symbolGroups[symbol]) symbolGroups[symbol] = [];\n      symbolGroups[symbol].push(flow);\n    });\n    Object.keys(symbolGroups).forEach(symbol => {\n      const flows = symbolGroups[symbol];\n      if (flows.length < 2) return;\n      const calls = flows.filter(f => (f.type || f.call_put || '').toLowerCase().includes('call'));\n      const puts = flows.filter(f => (f.type || f.call_put || '').toLowerCase().includes('put'));\n\n      // Straddle/Strangle detection\n      if (calls.length > 0 && puts.length > 0) {\n        const callStrikes = calls.map(f => f.strike || f.strike_price || 0);\n        const putStrikes = puts.map(f => f.strike || f.strike_price || 0);\n\n        // Check for same strikes (straddle)\n        const commonStrikes = callStrikes.filter(strike => putStrikes.includes(strike));\n        if (commonStrikes.length > 0) {\n          strategies.push({\n            type: 'LONG_STRADDLE',\n            symbol: symbol,\n            strikes: commonStrikes,\n            confidence: 80,\n            implication: 'VOLATILITY_PLAY'\n          });\n        }\n\n        // Check for different strikes (strangle)\n        if (commonStrikes.length === 0 && calls.length > 0 && puts.length > 0) {\n          strategies.push({\n            type: 'STRANGLE',\n            symbol: symbol,\n            callStrikes: [...new Set(callStrikes)],\n            putStrikes: [...new Set(putStrikes)],\n            confidence: 70,\n            implication: 'VOLATILITY_PLAY'\n          });\n        }\n      }\n\n      // Sweep detection (large volume at specific strike)\n      flows.forEach(flow => {\n        const volume = flow.volume || 0;\n        const premium = flow.premium || flow.total_premium || 0;\n        if (volume > 500 || premium > 100000) {\n          strategies.push({\n            type: 'SWEEP',\n            symbol: symbol,\n            strike: flow.strike || flow.strike_price,\n            volume: volume,\n            premium: premium,\n            confidence: 90,\n            implication: 'DIRECTIONAL_BET'\n          });\n        }\n      });\n    });\n    return strategies;\n  }\n\n  /**\n   * Calculate overall flow signal\n   */\n  calculateOverallFlowSignal(analysis) {\n    let bullishScore = 0;\n    let bearishScore = 0;\n    let totalWeight = 0;\n\n    // Sentiment analysis weight\n    const sentimentWeight = this.sentimentWeights.callPutRatio;\n    if (analysis.sentimentAnalysis.sentimentScore > 60) {\n      bullishScore += sentimentWeight * (analysis.sentimentAnalysis.sentimentScore - 50) / 50;\n    } else if (analysis.sentimentAnalysis.sentimentScore < 40) {\n      bearishScore += sentimentWeight * (50 - analysis.sentimentAnalysis.sentimentScore) / 50;\n    }\n    totalWeight += sentimentWeight;\n\n    // Whale activity weight\n    const whaleWeight = this.sentimentWeights.premiumFlow;\n    if (analysis.whaleActivity.whaleCallPutRatio > 1.5) {\n      bullishScore += whaleWeight * 0.8;\n    } else if (analysis.whaleActivity.whaleCallPutRatio < 0.7) {\n      bearishScore += whaleWeight * 0.8;\n    }\n    totalWeight += whaleWeight;\n\n    // Volume analysis weight\n    const volumeWeight = this.sentimentWeights.volumeProfile;\n    if (analysis.volumeAnalysis.volumeConcentration > 0.7) {\n      // High concentration might indicate strong conviction\n      if (analysis.sentimentAnalysis.sentimentScore > 50) {\n        bullishScore += volumeWeight * 0.6;\n      } else {\n        bearishScore += volumeWeight * 0.6;\n      }\n    }\n    totalWeight += volumeWeight;\n    const finalScore = totalWeight > 0 ? (bullishScore - bearishScore) / totalWeight : 0;\n    const confidence = Math.abs(finalScore) * 100;\n    return {\n      signal: finalScore > 0.3 ? 'BULLISH' : finalScore > 0.1 ? 'SLIGHTLY_BULLISH' : finalScore < -0.3 ? 'BEARISH' : finalScore < -0.1 ? 'SLIGHTLY_BEARISH' : 'NEUTRAL',\n      confidence: Math.min(confidence, 95),\n      score: finalScore,\n      components: {\n        sentimentContribution: (bullishScore - bearishScore) * sentimentWeight,\n        whaleContribution: analysis.whaleActivity.whaleCallPutRatio,\n        volumeContribution: analysis.volumeAnalysis.volumeConcentration\n      }\n    };\n  }\n\n  // ==================== HELPER METHODS ====================\n\n  isShortTermExpiration(expiration) {\n    if (!expiration || expiration === 'unknown') return false;\n    try {\n      const expDate = new Date(expiration);\n      const now = new Date();\n      const daysToExp = (expDate - now) / (1000 * 60 * 60 * 24);\n      return daysToExp <= 7; // 7 days or less\n    } catch {\n      return false;\n    }\n  }\n  getEmptyAnalysis() {\n    return {\n      whaleActivity: {\n        totalWhaleFlows: 0,\n        totalWhalePremium: 0,\n        whaleCallPremium: 0,\n        whalePutPremium: 0,\n        whaleCallPutRatio: 0,\n        averageWhalePremium: 0,\n        largestFlow: 0,\n        whaleFlows: []\n      },\n      sentimentAnalysis: {\n        callCount: 0,\n        putCount: 0,\n        callVolume: 0,\n        putVolume: 0,\n        callPremium: 0,\n        putPremium: 0,\n        callPutRatio: 1,\n        premiumRatio: 1,\n        sentimentScore: 50,\n        sentiment: 'NEUTRAL'\n      },\n      overallSignal: {\n        signal: 'NO_DATA',\n        confidence: 0,\n        score: 0\n      }\n    };\n  }\n}\nexport default new FlowAnalysis();","map":{"version":3,"names":["FlowAnalysis","constructor","flowPatterns","whaleThresholds","premium","volume","unusualVolume","sentimentWeights","callPutRatio","volumeProfile","premiumFlow","timeDecay","analyzeFlowPatterns","flowData","length","getEmptyAnalysis","analysis","whaleActivity","detectWhaleActivity","sentimentAnalysis","analyzeSentiment","volumeAnalysis","analyzeVolume","analyzePremiumFlow","timeAnalysis","analyzeTimePatterns","unusualActivity","detectUnusualActivity","gamma","analyzeGammaExposure","strategies","identifyStrategies","overallSignal","calculateOverallFlowSignal","whaleFlows","filter","flow","total_premium","totalWhalePremium","reduce","sum","whaleCallPremium","f","type","call_put","toLowerCase","includes","whalePutPremium","totalWhaleFlows","whaleCallPutRatio","averageWhalePremium","largestFlow","max","Math","slice","calls","puts","callVolume","putVolume","callPremium","putPremium","premiumRatio","sentimentScore","callCount","putCount","min","sentiment","totalVolume","totalContracts","avgVolumePerContract","strikes","map","strike","strike_price","s","strikeVolumes","forEach","maxVolumeStrike","Object","keys","maxStrike","parseFloat","maxVolumeAmount","strikeDistribution","volumeConcentration","totalPremium","premiumByStrike","largestPremiumFlow","avgPremiumPerFlow","premiumDistribution","highPremiumFlows","now","Date","recentFlows","flowTime","timestamp","time","expirationGroups","exp","expiration","exp_date","mostPopularExpiration","maxExp","totalFlows","recentActivity","expirationDistribution","shortTermFlows","isShortTermExpiration","unusualPatterns","largeTrades","push","count","description","significance","maxStrikes","values","hourGroups","hour","getHours","maxHourActivity","callFlows","putFlows","totalCallVolume","totalPutVolume","netGammaExposure","callGamma","putGamma","netGamma","gammaImplication","volatilityImpact","abs","symbolGroups","symbol","ticker","flows","callStrikes","putStrikes","commonStrikes","confidence","implication","Set","bullishScore","bearishScore","totalWeight","sentimentWeight","whaleWeight","volumeWeight","finalScore","signal","score","components","sentimentContribution","whaleContribution","volumeContribution","expDate","daysToExp"],"sources":["/home/user/webapp/src/services/flowAnalysis.js"],"sourcesContent":["/**\n * Advanced Options Flow Analysis Engine\n * Sophisticated analysis of unusual options activity and market sentiment\n */\n\nclass FlowAnalysis {\n    constructor() {\n        this.flowPatterns = {};\n        this.whaleThresholds = {\n            premium: 50000,    // $50K+ premium\n            volume: 100,       // 100+ contracts\n            unusualVolume: 5   // 5x average volume\n        };\n        \n        this.sentimentWeights = {\n            callPutRatio: 0.3,\n            volumeProfile: 0.25,\n            premiumFlow: 0.25,\n            timeDecay: 0.2\n        };\n    }\n\n    // ==================== FLOW PATTERN ANALYSIS ====================\n\n    /**\n     * Analyze options flow patterns and identify whale activity\n     */\n    analyzeFlowPatterns(flowData) {\n        if (!flowData || flowData.length === 0) {\n            return this.getEmptyAnalysis();\n        }\n\n        const analysis = {\n            whaleActivity: this.detectWhaleActivity(flowData),\n            sentimentAnalysis: this.analyzeSentiment(flowData),\n            volumeAnalysis: this.analyzeVolume(flowData),\n            premiumFlow: this.analyzePremiumFlow(flowData),\n            timeAnalysis: this.analyzeTimePatterns(flowData),\n            unusualActivity: this.detectUnusualActivity(flowData),\n            gamma: this.analyzeGammaExposure(flowData),\n            strategies: this.identifyStrategies(flowData)\n        };\n\n        analysis.overallSignal = this.calculateOverallFlowSignal(analysis);\n        return analysis;\n    }\n\n    /**\n     * Detect whale activity (large premium trades)\n     */\n    detectWhaleActivity(flowData) {\n        const whaleFlows = flowData.filter(flow => {\n            const premium = flow.premium || flow.total_premium || 0;\n            const volume = flow.volume || 0;\n            \n            return premium >= this.whaleThresholds.premium || \n                   volume >= this.whaleThresholds.volume;\n        });\n\n        const totalWhalePremium = whaleFlows.reduce((sum, flow) => \n            sum + (flow.premium || flow.total_premium || 0), 0);\n        \n        const whaleCallPremium = whaleFlows\n            .filter(f => (f.type || f.call_put || '').toLowerCase().includes('call'))\n            .reduce((sum, flow) => sum + (flow.premium || flow.total_premium || 0), 0);\n        \n        const whalePutPremium = whaleFlows\n            .filter(f => (f.type || f.call_put || '').toLowerCase().includes('put'))\n            .reduce((sum, flow) => sum + (flow.premium || flow.total_premium || 0), 0);\n\n        return {\n            totalWhaleFlows: whaleFlows.length,\n            totalWhalePremium: totalWhalePremium,\n            whaleCallPremium: whaleCallPremium,\n            whalePutPremium: whalePutPremium,\n            whaleCallPutRatio: whalePutPremium > 0 ? whaleCallPremium / whalePutPremium : \n                              whaleCallPremium > 0 ? 999 : 0,\n            averageWhalePremium: whaleFlows.length > 0 ? totalWhalePremium / whaleFlows.length : 0,\n            largestFlow: whaleFlows.reduce((max, flow) => \n                Math.max(max, flow.premium || flow.total_premium || 0), 0),\n            whaleFlows: whaleFlows.slice(0, 10) // Top 10 whale flows\n        };\n    }\n\n    /**\n     * Analyze overall market sentiment from flow\n     */\n    analyzeSentiment(flowData) {\n        const calls = flowData.filter(f => (f.type || f.call_put || '').toLowerCase().includes('call'));\n        const puts = flowData.filter(f => (f.type || f.call_put || '').toLowerCase().includes('put'));\n        \n        const callVolume = calls.reduce((sum, f) => sum + (f.volume || 0), 0);\n        const putVolume = puts.reduce((sum, f) => sum + (f.volume || 0), 0);\n        \n        const callPremium = calls.reduce((sum, f) => sum + (f.premium || f.total_premium || 0), 0);\n        const putPremium = puts.reduce((sum, f) => sum + (f.premium || f.total_premium || 0), 0);\n        \n        const callPutRatio = putVolume > 0 ? callVolume / putVolume : callVolume > 0 ? 999 : 1;\n        const premiumRatio = putPremium > 0 ? callPremium / putPremium : callPremium > 0 ? 999 : 1;\n        \n        // Calculate sentiment score (0-100, 50 = neutral)\n        let sentimentScore = 50;\n        \n        // Call/Put ratio influence (higher ratio = more bullish)\n        if (callPutRatio > 1.5) sentimentScore += 15;\n        else if (callPutRatio > 1.2) sentimentScore += 10;\n        else if (callPutRatio > 1.0) sentimentScore += 5;\n        else if (callPutRatio < 0.7) sentimentScore -= 15;\n        else if (callPutRatio < 0.8) sentimentScore -= 10;\n        else if (callPutRatio < 0.9) sentimentScore -= 5;\n        \n        // Premium flow influence\n        if (premiumRatio > 2.0) sentimentScore += 10;\n        else if (premiumRatio < 0.5) sentimentScore -= 10;\n        \n        return {\n            callCount: calls.length,\n            putCount: puts.length,\n            callVolume: callVolume,\n            putVolume: putVolume,\n            callPremium: callPremium,\n            putPremium: putPremium,\n            callPutRatio: callPutRatio,\n            premiumRatio: premiumRatio,\n            sentimentScore: Math.max(0, Math.min(100, sentimentScore)),\n            sentiment: sentimentScore > 70 ? 'VERY_BULLISH' :\n                      sentimentScore > 60 ? 'BULLISH' :\n                      sentimentScore > 40 ? 'NEUTRAL' :\n                      sentimentScore > 30 ? 'BEARISH' : 'VERY_BEARISH'\n        };\n    }\n\n    /**\n     * Analyze volume patterns\n     */\n    analyzeVolume(flowData) {\n        const totalVolume = flowData.reduce((sum, f) => sum + (f.volume || 0), 0);\n        const totalContracts = flowData.length;\n        const avgVolumePerContract = totalContracts > 0 ? totalVolume / totalContracts : 0;\n        \n        // Group by strike ranges for volume distribution\n        const strikes = flowData.map(f => f.strike || f.strike_price || 0).filter(s => s > 0);\n        const strikeVolumes = {};\n        \n        flowData.forEach(flow => {\n            const strike = flow.strike || flow.strike_price || 0;\n            if (strike > 0) {\n                strikeVolumes[strike] = (strikeVolumes[strike] || 0) + (flow.volume || 0);\n            }\n        });\n        \n        const maxVolumeStrike = Object.keys(strikeVolumes).reduce((maxStrike, strike) => \n            strikeVolumes[strike] > (strikeVolumes[maxStrike] || 0) ? strike : maxStrike, '0');\n        \n        return {\n            totalVolume: totalVolume,\n            totalContracts: totalContracts,\n            avgVolumePerContract: avgVolumePerContract,\n            maxVolumeStrike: parseFloat(maxVolumeStrike),\n            maxVolumeAmount: strikeVolumes[maxVolumeStrike] || 0,\n            strikeDistribution: Object.keys(strikeVolumes).length,\n            volumeConcentration: totalVolume > 0 ? (strikeVolumes[maxVolumeStrike] || 0) / totalVolume : 0\n        };\n    }\n\n    /**\n     * Analyze premium flow patterns\n     */\n    analyzePremiumFlow(flowData) {\n        const totalPremium = flowData.reduce((sum, f) => \n            sum + (f.premium || f.total_premium || 0), 0);\n        \n        const premiumByStrike = {};\n        flowData.forEach(flow => {\n            const strike = flow.strike || flow.strike_price || 0;\n            const premium = flow.premium || flow.total_premium || 0;\n            if (strike > 0 && premium > 0) {\n                premiumByStrike[strike] = (premiumByStrike[strike] || 0) + premium;\n            }\n        });\n        \n        const largestPremiumFlow = flowData.reduce((max, flow) => {\n            const premium = flow.premium || flow.total_premium || 0;\n            return premium > (max.premium || max.total_premium || 0) ? flow : max;\n        }, flowData[0] || {});\n        \n        return {\n            totalPremium: totalPremium,\n            avgPremiumPerFlow: flowData.length > 0 ? totalPremium / flowData.length : 0,\n            largestPremiumFlow: largestPremiumFlow,\n            premiumDistribution: premiumByStrike,\n            highPremiumFlows: flowData.filter(f => \n                (f.premium || f.total_premium || 0) > this.whaleThresholds.premium\n            ).length\n        };\n    }\n\n    /**\n     * Analyze time-based patterns\n     */\n    analyzeTimePatterns(flowData) {\n        const now = Date.now();\n        const recentFlows = flowData.filter(flow => {\n            const flowTime = flow.timestamp || flow.time || now;\n            return (now - flowTime) < 3600000; // Last hour\n        });\n        \n        // Group by expiration dates\n        const expirationGroups = {};\n        flowData.forEach(flow => {\n            const exp = flow.expiration || flow.exp_date || 'unknown';\n            expirationGroups[exp] = (expirationGroups[exp] || 0) + 1;\n        });\n        \n        const mostPopularExpiration = Object.keys(expirationGroups).reduce((maxExp, exp) => \n            expirationGroups[exp] > (expirationGroups[maxExp] || 0) ? exp : maxExp, 'unknown');\n        \n        return {\n            totalFlows: flowData.length,\n            recentFlows: recentFlows.length,\n            recentActivity: flowData.length > 0 ? recentFlows.length / flowData.length : 0,\n            expirationDistribution: expirationGroups,\n            mostPopularExpiration: mostPopularExpiration,\n            shortTermFlows: Object.keys(expirationGroups).filter(exp => \n                this.isShortTermExpiration(exp)).length\n        };\n    }\n\n    /**\n     * Detect unusual activity patterns\n     */\n    detectUnusualActivity(flowData) {\n        const unusualPatterns = [];\n        \n        // Large single trades\n        const largeTrades = flowData.filter(f => \n            (f.premium || f.total_premium || 0) > this.whaleThresholds.premium * 2);\n        if (largeTrades.length > 0) {\n            unusualPatterns.push({\n                type: 'LARGE_TRADES',\n                count: largeTrades.length,\n                description: `${largeTrades.length} trades with premium > $${this.whaleThresholds.premium * 2}`,\n                significance: 'HIGH'\n            });\n        }\n        \n        // Concentrated strikes\n        const strikes = {};\n        flowData.forEach(f => {\n            const strike = f.strike || f.strike_price || 0;\n            strikes[strike] = (strikes[strike] || 0) + 1;\n        });\n        \n        const maxStrikes = Math.max(...Object.values(strikes));\n        if (maxStrikes > flowData.length * 0.3) {\n            unusualPatterns.push({\n                type: 'STRIKE_CONCENTRATION',\n                count: maxStrikes,\n                description: `Heavy concentration at single strike level`,\n                significance: 'MEDIUM'\n            });\n        }\n        \n        // Time concentration\n        const hourGroups = {};\n        flowData.forEach(f => {\n            const time = new Date(f.timestamp || f.time || Date.now());\n            const hour = time.getHours();\n            hourGroups[hour] = (hourGroups[hour] || 0) + 1;\n        });\n        \n        const maxHourActivity = Math.max(...Object.values(hourGroups));\n        if (maxHourActivity > flowData.length * 0.5) {\n            unusualPatterns.push({\n                type: 'TIME_CONCENTRATION',\n                count: maxHourActivity,\n                description: `Heavy activity concentrated in single hour`,\n                significance: 'MEDIUM'\n            });\n        }\n        \n        return unusualPatterns;\n    }\n\n    /**\n     * Analyze gamma exposure implications\n     */\n    analyzeGammaExposure(flowData) {\n        // Simplified gamma analysis\n        const callFlows = flowData.filter(f => (f.type || f.call_put || '').toLowerCase().includes('call'));\n        const putFlows = flowData.filter(f => (f.type || f.call_put || '').toLowerCase().includes('put'));\n        \n        const totalCallVolume = callFlows.reduce((sum, f) => sum + (f.volume || 0), 0);\n        const totalPutVolume = putFlows.reduce((sum, f) => sum + (f.volume || 0), 0);\n        \n        // Estimate net gamma exposure (simplified)\n        const netGammaExposure = totalCallVolume - totalPutVolume;\n        \n        return {\n            callGamma: totalCallVolume,\n            putGamma: totalPutVolume,\n            netGamma: netGammaExposure,\n            gammaImplication: netGammaExposure > 1000 ? 'POSITIVE_GAMMA' :\n                            netGammaExposure < -1000 ? 'NEGATIVE_GAMMA' : 'NEUTRAL_GAMMA',\n            volatilityImpact: Math.abs(netGammaExposure) > 2000 ? 'HIGH' : \n                            Math.abs(netGammaExposure) > 500 ? 'MEDIUM' : 'LOW'\n        };\n    }\n\n    /**\n     * Identify potential trading strategies from flow\n     */\n    identifyStrategies(flowData) {\n        const strategies = [];\n        \n        // Group by symbol and analyze\n        const symbolGroups = {};\n        flowData.forEach(flow => {\n            const symbol = flow.symbol || flow.ticker || 'UNKNOWN';\n            if (!symbolGroups[symbol]) symbolGroups[symbol] = [];\n            symbolGroups[symbol].push(flow);\n        });\n        \n        Object.keys(symbolGroups).forEach(symbol => {\n            const flows = symbolGroups[symbol];\n            if (flows.length < 2) return;\n            \n            const calls = flows.filter(f => (f.type || f.call_put || '').toLowerCase().includes('call'));\n            const puts = flows.filter(f => (f.type || f.call_put || '').toLowerCase().includes('put'));\n            \n            // Straddle/Strangle detection\n            if (calls.length > 0 && puts.length > 0) {\n                const callStrikes = calls.map(f => f.strike || f.strike_price || 0);\n                const putStrikes = puts.map(f => f.strike || f.strike_price || 0);\n                \n                // Check for same strikes (straddle)\n                const commonStrikes = callStrikes.filter(strike => putStrikes.includes(strike));\n                if (commonStrikes.length > 0) {\n                    strategies.push({\n                        type: 'LONG_STRADDLE',\n                        symbol: symbol,\n                        strikes: commonStrikes,\n                        confidence: 80,\n                        implication: 'VOLATILITY_PLAY'\n                    });\n                }\n                \n                // Check for different strikes (strangle)\n                if (commonStrikes.length === 0 && calls.length > 0 && puts.length > 0) {\n                    strategies.push({\n                        type: 'STRANGLE',\n                        symbol: symbol,\n                        callStrikes: [...new Set(callStrikes)],\n                        putStrikes: [...new Set(putStrikes)],\n                        confidence: 70,\n                        implication: 'VOLATILITY_PLAY'\n                    });\n                }\n            }\n            \n            // Sweep detection (large volume at specific strike)\n            flows.forEach(flow => {\n                const volume = flow.volume || 0;\n                const premium = flow.premium || flow.total_premium || 0;\n                \n                if (volume > 500 || premium > 100000) {\n                    strategies.push({\n                        type: 'SWEEP',\n                        symbol: symbol,\n                        strike: flow.strike || flow.strike_price,\n                        volume: volume,\n                        premium: premium,\n                        confidence: 90,\n                        implication: 'DIRECTIONAL_BET'\n                    });\n                }\n            });\n        });\n        \n        return strategies;\n    }\n\n    /**\n     * Calculate overall flow signal\n     */\n    calculateOverallFlowSignal(analysis) {\n        let bullishScore = 0;\n        let bearishScore = 0;\n        let totalWeight = 0;\n        \n        // Sentiment analysis weight\n        const sentimentWeight = this.sentimentWeights.callPutRatio;\n        if (analysis.sentimentAnalysis.sentimentScore > 60) {\n            bullishScore += sentimentWeight * (analysis.sentimentAnalysis.sentimentScore - 50) / 50;\n        } else if (analysis.sentimentAnalysis.sentimentScore < 40) {\n            bearishScore += sentimentWeight * (50 - analysis.sentimentAnalysis.sentimentScore) / 50;\n        }\n        totalWeight += sentimentWeight;\n        \n        // Whale activity weight\n        const whaleWeight = this.sentimentWeights.premiumFlow;\n        if (analysis.whaleActivity.whaleCallPutRatio > 1.5) {\n            bullishScore += whaleWeight * 0.8;\n        } else if (analysis.whaleActivity.whaleCallPutRatio < 0.7) {\n            bearishScore += whaleWeight * 0.8;\n        }\n        totalWeight += whaleWeight;\n        \n        // Volume analysis weight\n        const volumeWeight = this.sentimentWeights.volumeProfile;\n        if (analysis.volumeAnalysis.volumeConcentration > 0.7) {\n            // High concentration might indicate strong conviction\n            if (analysis.sentimentAnalysis.sentimentScore > 50) {\n                bullishScore += volumeWeight * 0.6;\n            } else {\n                bearishScore += volumeWeight * 0.6;\n            }\n        }\n        totalWeight += volumeWeight;\n        \n        const finalScore = totalWeight > 0 ? (bullishScore - bearishScore) / totalWeight : 0;\n        const confidence = Math.abs(finalScore) * 100;\n        \n        return {\n            signal: finalScore > 0.3 ? 'BULLISH' :\n                   finalScore > 0.1 ? 'SLIGHTLY_BULLISH' :\n                   finalScore < -0.3 ? 'BEARISH' :\n                   finalScore < -0.1 ? 'SLIGHTLY_BEARISH' : 'NEUTRAL',\n            confidence: Math.min(confidence, 95),\n            score: finalScore,\n            components: {\n                sentimentContribution: (bullishScore - bearishScore) * sentimentWeight,\n                whaleContribution: analysis.whaleActivity.whaleCallPutRatio,\n                volumeContribution: analysis.volumeAnalysis.volumeConcentration\n            }\n        };\n    }\n\n    // ==================== HELPER METHODS ====================\n\n    isShortTermExpiration(expiration) {\n        if (!expiration || expiration === 'unknown') return false;\n        \n        try {\n            const expDate = new Date(expiration);\n            const now = new Date();\n            const daysToExp = (expDate - now) / (1000 * 60 * 60 * 24);\n            return daysToExp <= 7; // 7 days or less\n        } catch {\n            return false;\n        }\n    }\n\n    getEmptyAnalysis() {\n        return {\n            whaleActivity: {\n                totalWhaleFlows: 0,\n                totalWhalePremium: 0,\n                whaleCallPremium: 0,\n                whalePutPremium: 0,\n                whaleCallPutRatio: 0,\n                averageWhalePremium: 0,\n                largestFlow: 0,\n                whaleFlows: []\n            },\n            sentimentAnalysis: {\n                callCount: 0,\n                putCount: 0,\n                callVolume: 0,\n                putVolume: 0,\n                callPremium: 0,\n                putPremium: 0,\n                callPutRatio: 1,\n                premiumRatio: 1,\n                sentimentScore: 50,\n                sentiment: 'NEUTRAL'\n            },\n            overallSignal: {\n                signal: 'NO_DATA',\n                confidence: 0,\n                score: 0\n            }\n        };\n    }\n}\n\nexport default new FlowAnalysis();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}