{"ast":null,"code":"/**\n * Advanced Technical Analysis Engine\n * Comprehensive collection of 20+ technical indicators\n */\n\nclass TechnicalAnalysis {\n  constructor() {\n    this.indicators = {};\n    this.patterns = {};\n  }\n\n  // ==================== MOMENTUM INDICATORS ====================\n\n  /**\n   * Relative Strength Index (RSI)\n   */\n  calculateRSI(prices, period = 14) {\n    if (prices.length < period + 1) return null;\n    const gains = [];\n    const losses = [];\n    for (let i = 1; i < prices.length; i++) {\n      const change = prices[i] - prices[i - 1];\n      gains.push(change > 0 ? change : 0);\n      losses.push(change < 0 ? -change : 0);\n    }\n    const avgGain = gains.slice(0, period).reduce((sum, gain) => sum + gain, 0) / period;\n    const avgLoss = losses.slice(0, period).reduce((sum, loss) => sum + loss, 0) / period;\n    if (avgLoss === 0) return 100;\n    const rs = avgGain / avgLoss;\n    return 100 - 100 / (1 + rs);\n  }\n\n  /**\n   * Stochastic Oscillator\n   */\n  calculateStochastic(prices, highs, lows, kPeriod = 14, dPeriod = 3) {\n    if (prices.length < kPeriod) return null;\n    const kValues = [];\n    for (let i = kPeriod - 1; i < prices.length; i++) {\n      const periodHigh = Math.max(...highs.slice(i - kPeriod + 1, i + 1));\n      const periodLow = Math.min(...lows.slice(i - kPeriod + 1, i + 1));\n      const k = (prices[i] - periodLow) / (periodHigh - periodLow) * 100;\n      kValues.push(k);\n    }\n\n    // Calculate %D (SMA of %K)\n    const dValues = [];\n    for (let i = dPeriod - 1; i < kValues.length; i++) {\n      const d = kValues.slice(i - dPeriod + 1, i + 1).reduce((sum, k) => sum + k, 0) / dPeriod;\n      dValues.push(d);\n    }\n    return {\n      k: kValues[kValues.length - 1],\n      d: dValues[dValues.length - 1],\n      signal: kValues[kValues.length - 1] > 80 ? 'OVERBOUGHT' : kValues[kValues.length - 1] < 20 ? 'OVERSOLD' : 'NEUTRAL'\n    };\n  }\n\n  /**\n   * Williams %R\n   */\n  calculateWilliamsR(prices, highs, lows, period = 14) {\n    if (prices.length < period) return null;\n    const periodHigh = Math.max(...highs.slice(-period));\n    const periodLow = Math.min(...lows.slice(-period));\n    const currentPrice = prices[prices.length - 1];\n    return (periodHigh - currentPrice) / (periodHigh - periodLow) * -100;\n  }\n\n  // ==================== TREND INDICATORS ====================\n\n  /**\n   * Moving Average Convergence Divergence (MACD)\n   */\n  calculateMACD(prices, fastPeriod = 12, slowPeriod = 26, signalPeriod = 9) {\n    const fastEMA = this.calculateEMA(prices, fastPeriod);\n    const slowEMA = this.calculateEMA(prices, slowPeriod);\n    if (!fastEMA || !slowEMA) return null;\n    const macdLine = fastEMA - slowEMA;\n\n    // Calculate signal line (EMA of MACD)\n    const macdHistory = [];\n    for (let i = slowPeriod - 1; i < prices.length; i++) {\n      const fastEmaAtI = this.calculateEMA(prices.slice(0, i + 1), fastPeriod);\n      const slowEmaAtI = this.calculateEMA(prices.slice(0, i + 1), slowPeriod);\n      macdHistory.push(fastEmaAtI - slowEmaAtI);\n    }\n    const signalLine = this.calculateEMA(macdHistory, signalPeriod);\n    const histogram = macdLine - signalLine;\n    return {\n      macd: macdLine,\n      signal: signalLine,\n      histogram: histogram,\n      crossover: macdLine > signalLine ? 'BULLISH' : 'BEARISH'\n    };\n  }\n\n  /**\n   * Exponential Moving Average (EMA)\n   */\n  calculateEMA(prices, period) {\n    if (prices.length < period) return null;\n    const multiplier = 2 / (period + 1);\n    let ema = prices.slice(0, period).reduce((sum, price) => sum + price, 0) / period;\n    for (let i = period; i < prices.length; i++) {\n      ema = (prices[i] - ema) * multiplier + ema;\n    }\n    return ema;\n  }\n\n  /**\n   * Simple Moving Average (SMA)\n   */\n  calculateSMA(prices, period) {\n    if (prices.length < period) return null;\n    const sum = prices.slice(-period).reduce((sum, price) => sum + price, 0);\n    return sum / period;\n  }\n\n  /**\n   * Average Directional Index (ADX)\n   */\n  calculateADX(highs, lows, closes, period = 14) {\n    if (highs.length < period + 1) return null;\n    const trueRanges = [];\n    const plusDMs = [];\n    const minusDMs = [];\n    for (let i = 1; i < closes.length; i++) {\n      // True Range\n      const tr = Math.max(highs[i] - lows[i], Math.abs(highs[i] - closes[i - 1]), Math.abs(lows[i] - closes[i - 1]));\n      trueRanges.push(tr);\n\n      // Directional Movement\n      const plusDM = highs[i] - highs[i - 1] > lows[i - 1] - lows[i] ? Math.max(highs[i] - highs[i - 1], 0) : 0;\n      const minusDM = lows[i - 1] - lows[i] > highs[i] - highs[i - 1] ? Math.max(lows[i - 1] - lows[i], 0) : 0;\n      plusDMs.push(plusDM);\n      minusDMs.push(minusDM);\n    }\n\n    // Calculate smoothed values\n    const avgTR = trueRanges.slice(-period).reduce((sum, tr) => sum + tr, 0) / period;\n    const avgPlusDM = plusDMs.slice(-period).reduce((sum, dm) => sum + dm, 0) / period;\n    const avgMinusDM = minusDMs.slice(-period).reduce((sum, dm) => sum + dm, 0) / period;\n    const plusDI = avgPlusDM / avgTR * 100;\n    const minusDI = avgMinusDM / avgTR * 100;\n    const dx = Math.abs(plusDI - minusDI) / (plusDI + minusDI) * 100;\n    return {\n      adx: dx,\n      plusDI: plusDI,\n      minusDI: minusDI,\n      trend: dx > 25 ? plusDI > minusDI ? 'STRONG_UPTREND' : 'STRONG_DOWNTREND' : 'WEAK_TREND'\n    };\n  }\n\n  // ==================== VOLATILITY INDICATORS ====================\n\n  /**\n   * Bollinger Bands\n   */\n  calculateBollingerBands(prices, period = 20, stdDev = 2) {\n    if (prices.length < period) return null;\n    const sma = this.calculateSMA(prices, period);\n    const variance = prices.slice(-period).reduce((sum, price) => sum + Math.pow(price - sma, 2), 0) / period;\n    const standardDeviation = Math.sqrt(variance);\n    const upperBand = sma + standardDeviation * stdDev;\n    const lowerBand = sma - standardDeviation * stdDev;\n    const currentPrice = prices[prices.length - 1];\n    return {\n      upper: upperBand,\n      middle: sma,\n      lower: lowerBand,\n      bandwidth: (upperBand - lowerBand) / sma * 100,\n      position: (currentPrice - lowerBand) / (upperBand - lowerBand) * 100,\n      signal: currentPrice > upperBand ? 'OVERBOUGHT' : currentPrice < lowerBand ? 'OVERSOLD' : 'NEUTRAL'\n    };\n  }\n\n  /**\n   * Average True Range (ATR)\n   */\n  calculateATR(highs, lows, closes, period = 14) {\n    if (highs.length < period + 1) return null;\n    const trueRanges = [];\n    for (let i = 1; i < closes.length; i++) {\n      const tr = Math.max(highs[i] - lows[i], Math.abs(highs[i] - closes[i - 1]), Math.abs(lows[i] - closes[i - 1]));\n      trueRanges.push(tr);\n    }\n    return trueRanges.slice(-period).reduce((sum, tr) => sum + tr, 0) / period;\n  }\n\n  // ==================== VOLUME INDICATORS ====================\n\n  /**\n   * Volume Weighted Average Price (VWAP)\n   */\n  calculateVWAP(prices, volumes) {\n    if (prices.length !== volumes.length) return null;\n    let totalPriceVolume = 0;\n    let totalVolume = 0;\n    for (let i = 0; i < prices.length; i++) {\n      totalPriceVolume += prices[i] * volumes[i];\n      totalVolume += volumes[i];\n    }\n    return totalVolume > 0 ? totalPriceVolume / totalVolume : null;\n  }\n\n  /**\n   * On-Balance Volume (OBV)\n   */\n  calculateOBV(prices, volumes) {\n    if (prices.length !== volumes.length || prices.length < 2) return null;\n    let obv = 0;\n    const obvValues = [0];\n    for (let i = 1; i < prices.length; i++) {\n      if (prices[i] > prices[i - 1]) {\n        obv += volumes[i];\n      } else if (prices[i] < prices[i - 1]) {\n        obv -= volumes[i];\n      }\n      obvValues.push(obv);\n    }\n    return obvValues[obvValues.length - 1];\n  }\n\n  // ==================== SUPPORT & RESISTANCE ====================\n\n  /**\n   * Fibonacci Retracement Levels\n   */\n  calculateFibonacci(high, low) {\n    const range = high - low;\n    return {\n      level_0: high,\n      level_236: high - range * 0.236,\n      level_382: high - range * 0.382,\n      level_500: high - range * 0.500,\n      level_618: high - range * 0.618,\n      level_786: high - range * 0.786,\n      level_100: low\n    };\n  }\n\n  /**\n   * Pivot Points\n   */\n  calculatePivotPoints(high, low, close) {\n    const pivot = (high + low + close) / 3;\n    return {\n      pivot: pivot,\n      r1: 2 * pivot - low,\n      r2: pivot + (high - low),\n      r3: high + 2 * (pivot - low),\n      s1: 2 * pivot - high,\n      s2: pivot - (high - low),\n      s3: low - 2 * (high - pivot)\n    };\n  }\n\n  // ==================== PATTERN RECOGNITION ====================\n\n  /**\n   * Detect Candlestick Patterns\n   */\n  detectCandlestickPatterns(ohlcData) {\n    if (ohlcData.length < 3) return [];\n    const patterns = [];\n    const current = ohlcData[ohlcData.length - 1];\n    const previous = ohlcData[ohlcData.length - 2];\n    const beforePrevious = ohlcData[ohlcData.length - 3];\n\n    // Doji\n    if (Math.abs(current.close - current.open) < (current.high - current.low) * 0.1) {\n      patterns.push({\n        name: 'Doji',\n        type: 'REVERSAL',\n        confidence: 70,\n        signal: 'NEUTRAL'\n      });\n    }\n\n    // Hammer\n    const bodySize = Math.abs(current.close - current.open);\n    const lowerShadow = current.open < current.close ? current.open - current.low : current.close - current.low;\n    const upperShadow = current.high - Math.max(current.open, current.close);\n    if (lowerShadow > bodySize * 2 && upperShadow < bodySize * 0.5) {\n      patterns.push({\n        name: 'Hammer',\n        type: 'REVERSAL',\n        confidence: 75,\n        signal: 'BULLISH'\n      });\n    }\n\n    // Engulfing Pattern\n    if (previous.close > previous.open && current.open < current.close && current.open < previous.close && current.close > previous.open) {\n      patterns.push({\n        name: 'Bullish Engulfing',\n        type: 'REVERSAL',\n        confidence: 80,\n        signal: 'BULLISH'\n      });\n    }\n    return patterns;\n  }\n\n  /**\n   * Detect Chart Patterns\n   */\n  detectChartPatterns(prices, period = 20) {\n    if (prices.length < period) return [];\n    const patterns = [];\n    const recentPrices = prices.slice(-period);\n    const high = Math.max(...recentPrices);\n    const low = Math.min(...recentPrices);\n    const current = prices[prices.length - 1];\n\n    // Breakout Detection\n    const sma20 = this.calculateSMA(prices, 20);\n    if (current > high * 0.99) {\n      patterns.push({\n        name: 'Upward Breakout',\n        type: 'CONTINUATION',\n        confidence: 85,\n        signal: 'BULLISH'\n      });\n    }\n    if (current < low * 1.01) {\n      patterns.push({\n        name: 'Downward Breakdown',\n        type: 'CONTINUATION',\n        confidence: 85,\n        signal: 'BEARISH'\n      });\n    }\n\n    // Triangle Pattern Detection\n    const slope1 = this.calculateSlope(recentPrices.slice(0, 10));\n    const slope2 = this.calculateSlope(recentPrices.slice(10));\n    if (Math.abs(slope1) < 0.1 && Math.abs(slope2) < 0.1) {\n      patterns.push({\n        name: 'Symmetrical Triangle',\n        type: 'CONTINUATION',\n        confidence: 70,\n        signal: 'NEUTRAL'\n      });\n    }\n    return patterns;\n  }\n\n  /**\n   * Calculate slope of price series\n   */\n  calculateSlope(prices) {\n    const n = prices.length;\n    const sumX = n * (n - 1) / 2;\n    const sumY = prices.reduce((sum, price) => sum + price, 0);\n    const sumXY = prices.reduce((sum, price, index) => sum + index * price, 0);\n    const sumX2 = n * (n - 1) * (2 * n - 1) / 6;\n    return (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n  }\n\n  // ==================== COMPREHENSIVE ANALYSIS ====================\n\n  /**\n   * Perform complete technical analysis on stock data\n   */\n  performCompleteAnalysis(stockData, historicalData = null) {\n    const prices = historicalData ? historicalData.closes : this.generatePriceHistory(stockData.price);\n    const highs = historicalData ? historicalData.highs : this.generatePriceHistory(stockData.high);\n    const lows = historicalData ? historicalData.lows : this.generatePriceHistory(stockData.low);\n    const volumes = historicalData ? historicalData.volumes : this.generateVolumeHistory(stockData.volume);\n    return {\n      // Momentum Indicators\n      rsi: this.calculateRSI(prices),\n      stochastic: this.calculateStochastic(prices, highs, lows),\n      williamsR: this.calculateWilliamsR(prices, highs, lows),\n      // Trend Indicators\n      macd: this.calculateMACD(prices),\n      sma20: this.calculateSMA(prices, 20),\n      sma50: this.calculateSMA(prices, 50),\n      ema12: this.calculateEMA(prices, 12),\n      ema26: this.calculateEMA(prices, 26),\n      adx: this.calculateADX(highs, lows, prices),\n      // Volatility Indicators\n      bollingerBands: this.calculateBollingerBands(prices),\n      atr: this.calculateATR(highs, lows, prices),\n      // Volume Indicators\n      vwap: this.calculateVWAP(prices, volumes),\n      obv: this.calculateOBV(prices, volumes),\n      // Support & Resistance\n      fibonacci: this.calculateFibonacci(Math.max(...highs), Math.min(...lows)),\n      pivotPoints: this.calculatePivotPoints(stockData.high, stockData.low, stockData.price),\n      // Pattern Recognition\n      candlestickPatterns: this.detectCandlestickPatterns(this.generateOHLCData(stockData, prices)),\n      chartPatterns: this.detectChartPatterns(prices),\n      // Overall Signal\n      overallSignal: this.calculateOverallSignal({\n        rsi: this.calculateRSI(prices),\n        macd: this.calculateMACD(prices),\n        bollingerBands: this.calculateBollingerBands(prices),\n        adx: this.calculateADX(highs, lows, prices)\n      })\n    };\n  }\n\n  /**\n   * Calculate overall trading signal from multiple indicators\n   */\n  calculateOverallSignal(indicators) {\n    let bullishSignals = 0;\n    let bearishSignals = 0;\n    let totalSignals = 0;\n\n    // RSI Analysis\n    if (indicators.rsi) {\n      totalSignals++;\n      if (indicators.rsi < 30) bullishSignals++;else if (indicators.rsi > 70) bearishSignals++;\n    }\n\n    // MACD Analysis\n    if (indicators.macd) {\n      totalSignals++;\n      if (indicators.macd.crossover === 'BULLISH') bullishSignals++;else if (indicators.macd.crossover === 'BEARISH') bearishSignals++;\n    }\n\n    // Bollinger Bands Analysis\n    if (indicators.bollingerBands) {\n      totalSignals++;\n      if (indicators.bollingerBands.signal === 'OVERSOLD') bullishSignals++;else if (indicators.bollingerBands.signal === 'OVERBOUGHT') bearishSignals++;\n    }\n\n    // ADX Analysis\n    if (indicators.adx) {\n      totalSignals++;\n      if (indicators.adx.trend === 'STRONG_UPTREND') bullishSignals++;else if (indicators.adx.trend === 'STRONG_DOWNTREND') bearishSignals++;\n    }\n    const bullishPercentage = bullishSignals / totalSignals * 100;\n    const bearishPercentage = bearishSignals / totalSignals * 100;\n    return {\n      signal: bullishPercentage > 60 ? 'STRONG_BUY' : bullishPercentage > 40 ? 'BUY' : bearishPercentage > 60 ? 'STRONG_SELL' : bearishPercentage > 40 ? 'SELL' : 'HOLD',\n      confidence: Math.max(bullishPercentage, bearishPercentage),\n      bullishSignals,\n      bearishSignals,\n      totalSignals\n    };\n  }\n\n  // ==================== HELPER METHODS ====================\n\n  generatePriceHistory(currentPrice, days = 50) {\n    const prices = [];\n    let price = currentPrice * 0.95; // Start slightly lower\n\n    for (let i = 0; i < days; i++) {\n      price = price * (1 + (Math.random() - 0.5) * 0.03);\n      prices.push(price);\n    }\n    return prices;\n  }\n  generateVolumeHistory(currentVolume, days = 50) {\n    const volumes = [];\n    let volume = currentVolume;\n    for (let i = 0; i < days; i++) {\n      volume = Math.max(volume * (1 + (Math.random() - 0.5) * 0.5), 100000);\n      volumes.push(Math.floor(volume));\n    }\n    return volumes;\n  }\n  generateOHLCData(stockData, prices) {\n    const ohlc = [];\n    for (let i = 0; i < Math.min(prices.length, 10); i++) {\n      const price = prices[i];\n      ohlc.push({\n        open: price * (1 + (Math.random() - 0.5) * 0.02),\n        high: price * (1 + Math.random() * 0.03),\n        low: price * (1 - Math.random() * 0.03),\n        close: price\n      });\n    }\n    return ohlc;\n  }\n}\nexport default new TechnicalAnalysis();","map":{"version":3,"names":["TechnicalAnalysis","constructor","indicators","patterns","calculateRSI","prices","period","length","gains","losses","i","change","push","avgGain","slice","reduce","sum","gain","avgLoss","loss","rs","calculateStochastic","highs","lows","kPeriod","dPeriod","kValues","periodHigh","Math","max","periodLow","min","k","dValues","d","signal","calculateWilliamsR","currentPrice","calculateMACD","fastPeriod","slowPeriod","signalPeriod","fastEMA","calculateEMA","slowEMA","macdLine","macdHistory","fastEmaAtI","slowEmaAtI","signalLine","histogram","macd","crossover","multiplier","ema","price","calculateSMA","calculateADX","closes","trueRanges","plusDMs","minusDMs","tr","abs","plusDM","minusDM","avgTR","avgPlusDM","dm","avgMinusDM","plusDI","minusDI","dx","adx","trend","calculateBollingerBands","stdDev","sma","variance","pow","standardDeviation","sqrt","upperBand","lowerBand","upper","middle","lower","bandwidth","position","calculateATR","calculateVWAP","volumes","totalPriceVolume","totalVolume","calculateOBV","obv","obvValues","calculateFibonacci","high","low","range","level_0","level_236","level_382","level_500","level_618","level_786","level_100","calculatePivotPoints","close","pivot","r1","r2","r3","s1","s2","s3","detectCandlestickPatterns","ohlcData","current","previous","beforePrevious","open","name","type","confidence","bodySize","lowerShadow","upperShadow","detectChartPatterns","recentPrices","sma20","slope1","calculateSlope","slope2","n","sumX","sumY","sumXY","index","sumX2","performCompleteAnalysis","stockData","historicalData","generatePriceHistory","generateVolumeHistory","volume","rsi","stochastic","williamsR","sma50","ema12","ema26","bollingerBands","atr","vwap","fibonacci","pivotPoints","candlestickPatterns","generateOHLCData","chartPatterns","overallSignal","calculateOverallSignal","bullishSignals","bearishSignals","totalSignals","bullishPercentage","bearishPercentage","days","random","currentVolume","floor","ohlc"],"sources":["/home/user/webapp/src/services/technicalAnalysis.js"],"sourcesContent":["/**\n * Advanced Technical Analysis Engine\n * Comprehensive collection of 20+ technical indicators\n */\n\nclass TechnicalAnalysis {\n    constructor() {\n        this.indicators = {};\n        this.patterns = {};\n    }\n\n    // ==================== MOMENTUM INDICATORS ====================\n    \n    /**\n     * Relative Strength Index (RSI)\n     */\n    calculateRSI(prices, period = 14) {\n        if (prices.length < period + 1) return null;\n        \n        const gains = [];\n        const losses = [];\n        \n        for (let i = 1; i < prices.length; i++) {\n            const change = prices[i] - prices[i - 1];\n            gains.push(change > 0 ? change : 0);\n            losses.push(change < 0 ? -change : 0);\n        }\n        \n        const avgGain = gains.slice(0, period).reduce((sum, gain) => sum + gain, 0) / period;\n        const avgLoss = losses.slice(0, period).reduce((sum, loss) => sum + loss, 0) / period;\n        \n        if (avgLoss === 0) return 100;\n        const rs = avgGain / avgLoss;\n        return 100 - (100 / (1 + rs));\n    }\n\n    /**\n     * Stochastic Oscillator\n     */\n    calculateStochastic(prices, highs, lows, kPeriod = 14, dPeriod = 3) {\n        if (prices.length < kPeriod) return null;\n        \n        const kValues = [];\n        \n        for (let i = kPeriod - 1; i < prices.length; i++) {\n            const periodHigh = Math.max(...highs.slice(i - kPeriod + 1, i + 1));\n            const periodLow = Math.min(...lows.slice(i - kPeriod + 1, i + 1));\n            \n            const k = ((prices[i] - periodLow) / (periodHigh - periodLow)) * 100;\n            kValues.push(k);\n        }\n        \n        // Calculate %D (SMA of %K)\n        const dValues = [];\n        for (let i = dPeriod - 1; i < kValues.length; i++) {\n            const d = kValues.slice(i - dPeriod + 1, i + 1).reduce((sum, k) => sum + k, 0) / dPeriod;\n            dValues.push(d);\n        }\n        \n        return {\n            k: kValues[kValues.length - 1],\n            d: dValues[dValues.length - 1],\n            signal: kValues[kValues.length - 1] > 80 ? 'OVERBOUGHT' : \n                   kValues[kValues.length - 1] < 20 ? 'OVERSOLD' : 'NEUTRAL'\n        };\n    }\n\n    /**\n     * Williams %R\n     */\n    calculateWilliamsR(prices, highs, lows, period = 14) {\n        if (prices.length < period) return null;\n        \n        const periodHigh = Math.max(...highs.slice(-period));\n        const periodLow = Math.min(...lows.slice(-period));\n        const currentPrice = prices[prices.length - 1];\n        \n        return ((periodHigh - currentPrice) / (periodHigh - periodLow)) * -100;\n    }\n\n    // ==================== TREND INDICATORS ====================\n\n    /**\n     * Moving Average Convergence Divergence (MACD)\n     */\n    calculateMACD(prices, fastPeriod = 12, slowPeriod = 26, signalPeriod = 9) {\n        const fastEMA = this.calculateEMA(prices, fastPeriod);\n        const slowEMA = this.calculateEMA(prices, slowPeriod);\n        \n        if (!fastEMA || !slowEMA) return null;\n        \n        const macdLine = fastEMA - slowEMA;\n        \n        // Calculate signal line (EMA of MACD)\n        const macdHistory = [];\n        for (let i = slowPeriod - 1; i < prices.length; i++) {\n            const fastEmaAtI = this.calculateEMA(prices.slice(0, i + 1), fastPeriod);\n            const slowEmaAtI = this.calculateEMA(prices.slice(0, i + 1), slowPeriod);\n            macdHistory.push(fastEmaAtI - slowEmaAtI);\n        }\n        \n        const signalLine = this.calculateEMA(macdHistory, signalPeriod);\n        const histogram = macdLine - signalLine;\n        \n        return {\n            macd: macdLine,\n            signal: signalLine,\n            histogram: histogram,\n            crossover: macdLine > signalLine ? 'BULLISH' : 'BEARISH'\n        };\n    }\n\n    /**\n     * Exponential Moving Average (EMA)\n     */\n    calculateEMA(prices, period) {\n        if (prices.length < period) return null;\n        \n        const multiplier = 2 / (period + 1);\n        let ema = prices.slice(0, period).reduce((sum, price) => sum + price, 0) / period;\n        \n        for (let i = period; i < prices.length; i++) {\n            ema = (prices[i] - ema) * multiplier + ema;\n        }\n        \n        return ema;\n    }\n\n    /**\n     * Simple Moving Average (SMA)\n     */\n    calculateSMA(prices, period) {\n        if (prices.length < period) return null;\n        const sum = prices.slice(-period).reduce((sum, price) => sum + price, 0);\n        return sum / period;\n    }\n\n    /**\n     * Average Directional Index (ADX)\n     */\n    calculateADX(highs, lows, closes, period = 14) {\n        if (highs.length < period + 1) return null;\n        \n        const trueRanges = [];\n        const plusDMs = [];\n        const minusDMs = [];\n        \n        for (let i = 1; i < closes.length; i++) {\n            // True Range\n            const tr = Math.max(\n                highs[i] - lows[i],\n                Math.abs(highs[i] - closes[i - 1]),\n                Math.abs(lows[i] - closes[i - 1])\n            );\n            trueRanges.push(tr);\n            \n            // Directional Movement\n            const plusDM = highs[i] - highs[i - 1] > lows[i - 1] - lows[i] \n                ? Math.max(highs[i] - highs[i - 1], 0) : 0;\n            const minusDM = lows[i - 1] - lows[i] > highs[i] - highs[i - 1] \n                ? Math.max(lows[i - 1] - lows[i], 0) : 0;\n            \n            plusDMs.push(plusDM);\n            minusDMs.push(minusDM);\n        }\n        \n        // Calculate smoothed values\n        const avgTR = trueRanges.slice(-period).reduce((sum, tr) => sum + tr, 0) / period;\n        const avgPlusDM = plusDMs.slice(-period).reduce((sum, dm) => sum + dm, 0) / period;\n        const avgMinusDM = minusDMs.slice(-period).reduce((sum, dm) => sum + dm, 0) / period;\n        \n        const plusDI = (avgPlusDM / avgTR) * 100;\n        const minusDI = (avgMinusDM / avgTR) * 100;\n        const dx = Math.abs(plusDI - minusDI) / (plusDI + minusDI) * 100;\n        \n        return {\n            adx: dx,\n            plusDI: plusDI,\n            minusDI: minusDI,\n            trend: dx > 25 ? (plusDI > minusDI ? 'STRONG_UPTREND' : 'STRONG_DOWNTREND') : 'WEAK_TREND'\n        };\n    }\n\n    // ==================== VOLATILITY INDICATORS ====================\n\n    /**\n     * Bollinger Bands\n     */\n    calculateBollingerBands(prices, period = 20, stdDev = 2) {\n        if (prices.length < period) return null;\n        \n        const sma = this.calculateSMA(prices, period);\n        const variance = prices.slice(-period)\n            .reduce((sum, price) => sum + Math.pow(price - sma, 2), 0) / period;\n        const standardDeviation = Math.sqrt(variance);\n        \n        const upperBand = sma + (standardDeviation * stdDev);\n        const lowerBand = sma - (standardDeviation * stdDev);\n        const currentPrice = prices[prices.length - 1];\n        \n        return {\n            upper: upperBand,\n            middle: sma,\n            lower: lowerBand,\n            bandwidth: (upperBand - lowerBand) / sma * 100,\n            position: (currentPrice - lowerBand) / (upperBand - lowerBand) * 100,\n            signal: currentPrice > upperBand ? 'OVERBOUGHT' : \n                   currentPrice < lowerBand ? 'OVERSOLD' : 'NEUTRAL'\n        };\n    }\n\n    /**\n     * Average True Range (ATR)\n     */\n    calculateATR(highs, lows, closes, period = 14) {\n        if (highs.length < period + 1) return null;\n        \n        const trueRanges = [];\n        for (let i = 1; i < closes.length; i++) {\n            const tr = Math.max(\n                highs[i] - lows[i],\n                Math.abs(highs[i] - closes[i - 1]),\n                Math.abs(lows[i] - closes[i - 1])\n            );\n            trueRanges.push(tr);\n        }\n        \n        return trueRanges.slice(-period).reduce((sum, tr) => sum + tr, 0) / period;\n    }\n\n    // ==================== VOLUME INDICATORS ====================\n\n    /**\n     * Volume Weighted Average Price (VWAP)\n     */\n    calculateVWAP(prices, volumes) {\n        if (prices.length !== volumes.length) return null;\n        \n        let totalPriceVolume = 0;\n        let totalVolume = 0;\n        \n        for (let i = 0; i < prices.length; i++) {\n            totalPriceVolume += prices[i] * volumes[i];\n            totalVolume += volumes[i];\n        }\n        \n        return totalVolume > 0 ? totalPriceVolume / totalVolume : null;\n    }\n\n    /**\n     * On-Balance Volume (OBV)\n     */\n    calculateOBV(prices, volumes) {\n        if (prices.length !== volumes.length || prices.length < 2) return null;\n        \n        let obv = 0;\n        const obvValues = [0];\n        \n        for (let i = 1; i < prices.length; i++) {\n            if (prices[i] > prices[i - 1]) {\n                obv += volumes[i];\n            } else if (prices[i] < prices[i - 1]) {\n                obv -= volumes[i];\n            }\n            obvValues.push(obv);\n        }\n        \n        return obvValues[obvValues.length - 1];\n    }\n\n    // ==================== SUPPORT & RESISTANCE ====================\n\n    /**\n     * Fibonacci Retracement Levels\n     */\n    calculateFibonacci(high, low) {\n        const range = high - low;\n        \n        return {\n            level_0: high,\n            level_236: high - (range * 0.236),\n            level_382: high - (range * 0.382),\n            level_500: high - (range * 0.500),\n            level_618: high - (range * 0.618),\n            level_786: high - (range * 0.786),\n            level_100: low\n        };\n    }\n\n    /**\n     * Pivot Points\n     */\n    calculatePivotPoints(high, low, close) {\n        const pivot = (high + low + close) / 3;\n        \n        return {\n            pivot: pivot,\n            r1: 2 * pivot - low,\n            r2: pivot + (high - low),\n            r3: high + 2 * (pivot - low),\n            s1: 2 * pivot - high,\n            s2: pivot - (high - low),\n            s3: low - 2 * (high - pivot)\n        };\n    }\n\n    // ==================== PATTERN RECOGNITION ====================\n\n    /**\n     * Detect Candlestick Patterns\n     */\n    detectCandlestickPatterns(ohlcData) {\n        if (ohlcData.length < 3) return [];\n        \n        const patterns = [];\n        const current = ohlcData[ohlcData.length - 1];\n        const previous = ohlcData[ohlcData.length - 2];\n        const beforePrevious = ohlcData[ohlcData.length - 3];\n        \n        // Doji\n        if (Math.abs(current.close - current.open) < (current.high - current.low) * 0.1) {\n            patterns.push({\n                name: 'Doji',\n                type: 'REVERSAL',\n                confidence: 70,\n                signal: 'NEUTRAL'\n            });\n        }\n        \n        // Hammer\n        const bodySize = Math.abs(current.close - current.open);\n        const lowerShadow = current.open < current.close ? \n            current.open - current.low : current.close - current.low;\n        const upperShadow = current.high - Math.max(current.open, current.close);\n        \n        if (lowerShadow > bodySize * 2 && upperShadow < bodySize * 0.5) {\n            patterns.push({\n                name: 'Hammer',\n                type: 'REVERSAL',\n                confidence: 75,\n                signal: 'BULLISH'\n            });\n        }\n        \n        // Engulfing Pattern\n        if (previous.close > previous.open && current.open < current.close &&\n            current.open < previous.close && current.close > previous.open) {\n            patterns.push({\n                name: 'Bullish Engulfing',\n                type: 'REVERSAL',\n                confidence: 80,\n                signal: 'BULLISH'\n            });\n        }\n        \n        return patterns;\n    }\n\n    /**\n     * Detect Chart Patterns\n     */\n    detectChartPatterns(prices, period = 20) {\n        if (prices.length < period) return [];\n        \n        const patterns = [];\n        const recentPrices = prices.slice(-period);\n        const high = Math.max(...recentPrices);\n        const low = Math.min(...recentPrices);\n        const current = prices[prices.length - 1];\n        \n        // Breakout Detection\n        const sma20 = this.calculateSMA(prices, 20);\n        if (current > high * 0.99) {\n            patterns.push({\n                name: 'Upward Breakout',\n                type: 'CONTINUATION',\n                confidence: 85,\n                signal: 'BULLISH'\n            });\n        }\n        \n        if (current < low * 1.01) {\n            patterns.push({\n                name: 'Downward Breakdown',\n                type: 'CONTINUATION',\n                confidence: 85,\n                signal: 'BEARISH'\n            });\n        }\n        \n        // Triangle Pattern Detection\n        const slope1 = this.calculateSlope(recentPrices.slice(0, 10));\n        const slope2 = this.calculateSlope(recentPrices.slice(10));\n        \n        if (Math.abs(slope1) < 0.1 && Math.abs(slope2) < 0.1) {\n            patterns.push({\n                name: 'Symmetrical Triangle',\n                type: 'CONTINUATION',\n                confidence: 70,\n                signal: 'NEUTRAL'\n            });\n        }\n        \n        return patterns;\n    }\n\n    /**\n     * Calculate slope of price series\n     */\n    calculateSlope(prices) {\n        const n = prices.length;\n        const sumX = n * (n - 1) / 2;\n        const sumY = prices.reduce((sum, price) => sum + price, 0);\n        const sumXY = prices.reduce((sum, price, index) => sum + index * price, 0);\n        const sumX2 = n * (n - 1) * (2 * n - 1) / 6;\n        \n        return (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n    }\n\n    // ==================== COMPREHENSIVE ANALYSIS ====================\n\n    /**\n     * Perform complete technical analysis on stock data\n     */\n    performCompleteAnalysis(stockData, historicalData = null) {\n        const prices = historicalData ? historicalData.closes : this.generatePriceHistory(stockData.price);\n        const highs = historicalData ? historicalData.highs : this.generatePriceHistory(stockData.high);\n        const lows = historicalData ? historicalData.lows : this.generatePriceHistory(stockData.low);\n        const volumes = historicalData ? historicalData.volumes : this.generateVolumeHistory(stockData.volume);\n        \n        return {\n            // Momentum Indicators\n            rsi: this.calculateRSI(prices),\n            stochastic: this.calculateStochastic(prices, highs, lows),\n            williamsR: this.calculateWilliamsR(prices, highs, lows),\n            \n            // Trend Indicators\n            macd: this.calculateMACD(prices),\n            sma20: this.calculateSMA(prices, 20),\n            sma50: this.calculateSMA(prices, 50),\n            ema12: this.calculateEMA(prices, 12),\n            ema26: this.calculateEMA(prices, 26),\n            adx: this.calculateADX(highs, lows, prices),\n            \n            // Volatility Indicators\n            bollingerBands: this.calculateBollingerBands(prices),\n            atr: this.calculateATR(highs, lows, prices),\n            \n            // Volume Indicators\n            vwap: this.calculateVWAP(prices, volumes),\n            obv: this.calculateOBV(prices, volumes),\n            \n            // Support & Resistance\n            fibonacci: this.calculateFibonacci(Math.max(...highs), Math.min(...lows)),\n            pivotPoints: this.calculatePivotPoints(stockData.high, stockData.low, stockData.price),\n            \n            // Pattern Recognition\n            candlestickPatterns: this.detectCandlestickPatterns(this.generateOHLCData(stockData, prices)),\n            chartPatterns: this.detectChartPatterns(prices),\n            \n            // Overall Signal\n            overallSignal: this.calculateOverallSignal({\n                rsi: this.calculateRSI(prices),\n                macd: this.calculateMACD(prices),\n                bollingerBands: this.calculateBollingerBands(prices),\n                adx: this.calculateADX(highs, lows, prices)\n            })\n        };\n    }\n\n    /**\n     * Calculate overall trading signal from multiple indicators\n     */\n    calculateOverallSignal(indicators) {\n        let bullishSignals = 0;\n        let bearishSignals = 0;\n        let totalSignals = 0;\n        \n        // RSI Analysis\n        if (indicators.rsi) {\n            totalSignals++;\n            if (indicators.rsi < 30) bullishSignals++;\n            else if (indicators.rsi > 70) bearishSignals++;\n        }\n        \n        // MACD Analysis\n        if (indicators.macd) {\n            totalSignals++;\n            if (indicators.macd.crossover === 'BULLISH') bullishSignals++;\n            else if (indicators.macd.crossover === 'BEARISH') bearishSignals++;\n        }\n        \n        // Bollinger Bands Analysis\n        if (indicators.bollingerBands) {\n            totalSignals++;\n            if (indicators.bollingerBands.signal === 'OVERSOLD') bullishSignals++;\n            else if (indicators.bollingerBands.signal === 'OVERBOUGHT') bearishSignals++;\n        }\n        \n        // ADX Analysis\n        if (indicators.adx) {\n            totalSignals++;\n            if (indicators.adx.trend === 'STRONG_UPTREND') bullishSignals++;\n            else if (indicators.adx.trend === 'STRONG_DOWNTREND') bearishSignals++;\n        }\n        \n        const bullishPercentage = (bullishSignals / totalSignals) * 100;\n        const bearishPercentage = (bearishSignals / totalSignals) * 100;\n        \n        return {\n            signal: bullishPercentage > 60 ? 'STRONG_BUY' :\n                   bullishPercentage > 40 ? 'BUY' :\n                   bearishPercentage > 60 ? 'STRONG_SELL' :\n                   bearishPercentage > 40 ? 'SELL' : 'HOLD',\n            confidence: Math.max(bullishPercentage, bearishPercentage),\n            bullishSignals,\n            bearishSignals,\n            totalSignals\n        };\n    }\n\n    // ==================== HELPER METHODS ====================\n\n    generatePriceHistory(currentPrice, days = 50) {\n        const prices = [];\n        let price = currentPrice * 0.95; // Start slightly lower\n        \n        for (let i = 0; i < days; i++) {\n            price = price * (1 + (Math.random() - 0.5) * 0.03);\n            prices.push(price);\n        }\n        \n        return prices;\n    }\n\n    generateVolumeHistory(currentVolume, days = 50) {\n        const volumes = [];\n        let volume = currentVolume;\n        \n        for (let i = 0; i < days; i++) {\n            volume = Math.max(volume * (1 + (Math.random() - 0.5) * 0.5), 100000);\n            volumes.push(Math.floor(volume));\n        }\n        \n        return volumes;\n    }\n\n    generateOHLCData(stockData, prices) {\n        const ohlc = [];\n        for (let i = 0; i < Math.min(prices.length, 10); i++) {\n            const price = prices[i];\n            ohlc.push({\n                open: price * (1 + (Math.random() - 0.5) * 0.02),\n                high: price * (1 + Math.random() * 0.03),\n                low: price * (1 - Math.random() * 0.03),\n                close: price\n            });\n        }\n        return ohlc;\n    }\n}\n\nexport default new TechnicalAnalysis();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}