{"ast":null,"code":"/**\n * Enhanced Machine Learning Trading Engine\n * Advanced AI-powered trading strategies with technical analysis and flow integration\n */\n\nimport technicalAnalysis from './technicalAnalysis.js';\nimport flowAnalysis from './flowAnalysis.js';\nclass EnhancedMLEngine {\n  constructor() {\n    this.strategies = {\n      momentum: {\n        weight: 0.25,\n        performance: 0.68,\n        parameters: {\n          rsiThreshold: 70,\n          macdSignal: true,\n          volumeMultiplier: 1.5\n        }\n      },\n      meanReversion: {\n        weight: 0.20,\n        performance: 0.62,\n        parameters: {\n          rsiOversold: 30,\n          rsiOverbought: 70,\n          bollingerPosition: 0.1\n        }\n      },\n      breakout: {\n        weight: 0.20,\n        performance: 0.75,\n        parameters: {\n          atrMultiplier: 2.0,\n          volumeThreshold: 2.0,\n          adxStrength: 25\n        }\n      },\n      flowBased: {\n        weight: 0.15,\n        performance: 0.72,\n        parameters: {\n          whaleThreshold: 50000,\n          sentimentScore: 60,\n          callPutRatio: 1.2\n        }\n      },\n      scalping: {\n        weight: 0.10,\n        performance: 0.58,\n        parameters: {\n          quickRsi: 14,\n          fastEma: 9,\n          slowEma: 21\n        }\n      },\n      swing: {\n        weight: 0.10,\n        performance: 0.71,\n        parameters: {\n          sma20: true,\n          sma50: true,\n          supportResistance: true\n        }\n      }\n    };\n    this.features = ['price', 'volume', 'change', 'rsi', 'macd', 'volatility', 'trend', 'momentum', 'support', 'resistance', 'bollinger', 'adx', 'stochastic', 'williamsR', 'atr', 'vwap', 'obv', 'flowSentiment', 'whaleActivity', 'gammaExposure'];\n    this.learning = {\n      totalTrades: 0,\n      successfulTrades: 0,\n      strategyPerformance: {},\n      adaptiveWeights: true,\n      confidenceThreshold: 65\n    };\n  }\n\n  // ==================== ENHANCED RECOMMENDATION ENGINE ====================\n\n  /**\n   * Generate enhanced AI recommendations using technical analysis and flow data\n   */\n  async generateEnhancedRecommendations(marketData, optionsFlowData = null) {\n    const recommendations = [];\n    for (const [symbol, stockData] of Object.entries(marketData)) {\n      try {\n        // Perform comprehensive technical analysis\n        const technicalData = technicalAnalysis.performCompleteAnalysis(stockData);\n\n        // Analyze options flow if available\n        let flowData = null;\n        if (optionsFlowData && optionsFlowData.length > 0) {\n          const symbolFlow = optionsFlowData.filter(flow => (flow.symbol || flow.ticker || '').toUpperCase() === symbol.toUpperCase());\n          flowData = flowAnalysis.analyzeFlowPatterns(symbolFlow);\n        }\n\n        // Extract enhanced features\n        const features = this.extractEnhancedFeatures(stockData, technicalData, flowData);\n\n        // Generate analysis using multiple strategies\n        const analysis = this.performEnhancedAnalysis(features, technicalData, flowData);\n        if (analysis.confidence >= this.learning.confidenceThreshold) {\n          const recommendation = {\n            symbol,\n            action: analysis.action,\n            confidence: analysis.confidence,\n            strategy: analysis.primaryStrategy,\n            entryPrice: stockData.price,\n            targetPrice: this.calculateEnhancedTarget(stockData.price, analysis),\n            stopLoss: this.calculateEnhancedStopLoss(stockData.price, analysis),\n            reasoning: analysis.reasoning,\n            riskReward: analysis.riskReward,\n            timeframe: analysis.timeframe,\n            technicalSignals: this.summarizeTechnicalSignals(technicalData),\n            flowSignals: flowData ? this.summarizeFlowSignals(flowData) : null,\n            probability: this.calculateSuccessProbability(analysis),\n            positionSize: this.calculatePositionSize(analysis),\n            timestamp: Date.now(),\n            // Enhanced data\n            technicalScore: analysis.technicalScore,\n            flowScore: flowData ? flowData.overallSignal.score : 0,\n            volatilityScore: features.volatilityScore,\n            momentumScore: features.momentumScore,\n            supportLevel: features.supportLevel,\n            resistanceLevel: features.resistanceLevel\n          };\n          recommendations.push(recommendation);\n        }\n      } catch (error) {\n        console.error(`Error analyzing ${symbol}:`, error);\n      }\n    }\n\n    // Sort by confidence and return top recommendations\n    return recommendations.sort((a, b) => b.confidence - a.confidence).slice(0, 10);\n  }\n\n  /**\n   * Extract enhanced features combining technical and flow data\n   */\n  extractEnhancedFeatures(stockData, technicalData, flowData) {\n    const prices = this.generatePriceHistory(stockData.price);\n    const features = {\n      // Basic features\n      price: stockData.price,\n      volume: stockData.volume / 1000000,\n      change: stockData.changePercent,\n      // Technical features\n      rsi: technicalData.rsi || 50,\n      macd: technicalData.macd ? technicalData.macd.macd : 0,\n      macdSignal: technicalData.macd ? technicalData.macd.signal : 0,\n      macdHistogram: technicalData.macd ? technicalData.macd.histogram : 0,\n      // Bollinger Bands\n      bollingerPosition: technicalData.bollingerBands ? technicalData.bollingerBands.position : 50,\n      bollingerBandwidth: technicalData.bollingerBands ? technicalData.bollingerBands.bandwidth : 20,\n      // Trend indicators\n      adx: technicalData.adx ? technicalData.adx.adx : 20,\n      adxTrend: technicalData.adx ? technicalData.adx.trend : 'WEAK_TREND',\n      sma20: technicalData.sma20 || stockData.price,\n      sma50: technicalData.sma50 || stockData.price,\n      ema12: technicalData.ema12 || stockData.price,\n      ema26: technicalData.ema26 || stockData.price,\n      // Volatility\n      atr: technicalData.atr || stockData.price * 0.02,\n      volatility: this.calculateVolatility(prices),\n      // Volume indicators\n      vwap: technicalData.vwap || stockData.price,\n      obv: technicalData.obv || 0,\n      // Support/Resistance\n      supportLevel: technicalData.pivotPoints ? technicalData.pivotPoints.s1 : stockData.low,\n      resistanceLevel: technicalData.pivotPoints ? technicalData.pivotPoints.r1 : stockData.high,\n      // Flow features (if available)\n      flowSentiment: flowData ? flowData.sentimentAnalysis.sentimentScore : 50,\n      whaleActivity: flowData ? flowData.whaleActivity.totalWhalePremium : 0,\n      callPutRatio: flowData ? flowData.sentimentAnalysis.callPutRatio : 1,\n      gammaExposure: flowData ? flowData.gamma.netGamma : 0,\n      // Derived features\n      trendStrength: this.calculateTrendStrength(technicalData),\n      momentumScore: this.calculateMomentumScore(technicalData),\n      volatilityScore: this.calculateVolatilityScore(technicalData),\n      volumeScore: this.calculateVolumeScore(stockData, technicalData)\n    };\n    return features;\n  }\n\n  /**\n   * Perform enhanced analysis using multiple strategies\n   */\n  performEnhancedAnalysis(features, technicalData, flowData) {\n    const strategyScores = {};\n    const strategyReasons = {};\n\n    // Momentum Strategy Analysis\n    strategyScores.momentum = this.analyzeMomentumStrategy(features, technicalData);\n    strategyReasons.momentum = this.getMomentumReasoning(features, technicalData);\n\n    // Mean Reversion Strategy Analysis\n    strategyScores.meanReversion = this.analyzeMeanReversionStrategy(features, technicalData);\n    strategyReasons.meanReversion = this.getMeanReversionReasoning(features, technicalData);\n\n    // Breakout Strategy Analysis\n    strategyScores.breakout = this.analyzeBreakoutStrategy(features, technicalData);\n    strategyReasons.breakout = this.getBreakoutReasoning(features, technicalData);\n\n    // Flow-Based Strategy Analysis\n    if (flowData) {\n      strategyScores.flowBased = this.analyzeFlowStrategy(features, flowData);\n      strategyReasons.flowBased = this.getFlowReasoning(features, flowData);\n    }\n\n    // Swing Strategy Analysis\n    strategyScores.swing = this.analyzeSwingStrategy(features, technicalData);\n    strategyReasons.swing = this.getSwingReasoning(features, technicalData);\n\n    // Calculate weighted final score\n    let finalScore = 0;\n    let totalWeight = 0;\n    const reasoning = [];\n    Object.keys(strategyScores).forEach(strategy => {\n      const weight = this.strategies[strategy].weight;\n      const performance = this.strategies[strategy].performance;\n      const adjustedWeight = weight * performance; // Weight by historical performance\n\n      finalScore += strategyScores[strategy] * adjustedWeight;\n      totalWeight += adjustedWeight;\n      if (Math.abs(strategyScores[strategy]) > 0.3) {\n        reasoning.push(`${strategy}: ${strategyReasons[strategy]}`);\n      }\n    });\n    const normalizedScore = totalWeight > 0 ? finalScore / totalWeight : 0;\n    const action = normalizedScore > 0.15 ? 'BUY' : normalizedScore < -0.15 ? 'SELL' : 'HOLD';\n    const confidence = Math.min(Math.abs(normalizedScore) * 100 + 50, 95);\n\n    // Determine primary strategy\n    const primaryStrategy = Object.keys(strategyScores).reduce((maxStrategy, strategy) => Math.abs(strategyScores[strategy]) > Math.abs(strategyScores[maxStrategy] || 0) ? strategy : maxStrategy, 'momentum');\n    return {\n      action,\n      confidence: parseFloat(confidence.toFixed(1)),\n      primaryStrategy,\n      reasoning: reasoning.join(' | '),\n      riskReward: this.calculateRiskReward(normalizedScore, features),\n      timeframe: this.selectTimeframe(features, primaryStrategy),\n      technicalScore: normalizedScore,\n      strategyScores,\n      overallTechnicalSignal: technicalData.overallSignal\n    };\n  }\n\n  // ==================== STRATEGY ANALYZERS ====================\n\n  /**\n   * Analyze momentum strategy\n   */\n  analyzeMomentumStrategy(features, technicalData) {\n    let score = 0;\n\n    // RSI momentum\n    if (features.rsi > 60 && features.rsi < 80) score += 0.3;else if (features.rsi < 40 && features.rsi > 20) score -= 0.3;\n\n    // MACD momentum\n    if (features.macdHistogram > 0 && features.macd > features.macdSignal) score += 0.25;else if (features.macdHistogram < 0 && features.macd < features.macdSignal) score -= 0.25;\n\n    // Price vs moving averages\n    if (features.price > features.ema12 && features.ema12 > features.ema26) score += 0.2;else if (features.price < features.ema12 && features.ema12 < features.ema26) score -= 0.2;\n\n    // Volume confirmation\n    if (features.volumeScore > 1.2) score += 0.15;\n\n    // ADX trend strength\n    if (features.adxTrend === 'STRONG_UPTREND') score += 0.1;else if (features.adxTrend === 'STRONG_DOWNTREND') score -= 0.1;\n    return Math.max(-1, Math.min(1, score));\n  }\n\n  /**\n   * Analyze mean reversion strategy\n   */\n  analyzeMeanReversionStrategy(features, technicalData) {\n    let score = 0;\n\n    // RSI extremes\n    if (features.rsi < 30) score += 0.4;else if (features.rsi > 70) score -= 0.4;\n\n    // Bollinger Bands position\n    if (features.bollingerPosition < 20) score += 0.3;else if (features.bollingerPosition > 80) score -= 0.3;\n\n    // Williams %R extremes\n    const williamsR = technicalData.williamsR;\n    if (williamsR && williamsR < -80) score += 0.2;else if (williamsR && williamsR > -20) score -= 0.2;\n\n    // Stochastic oversold/overbought\n    if (technicalData.stochastic) {\n      if (technicalData.stochastic.k < 20) score += 0.1;else if (technicalData.stochastic.k > 80) score -= 0.1;\n    }\n    return Math.max(-1, Math.min(1, score));\n  }\n\n  /**\n   * Analyze breakout strategy\n   */\n  analyzeBreakoutStrategy(features, technicalData) {\n    let score = 0;\n\n    // Price breakout above resistance\n    if (features.price > features.resistanceLevel * 1.02) score += 0.4;else if (features.price < features.supportLevel * 0.98) score -= 0.4;\n\n    // Volume confirmation\n    if (features.volumeScore > 1.5) score += 0.3;\n\n    // ATR expansion (volatility increase)\n    if (features.volatilityScore > 1.2) score += 0.2;\n\n    // Bollinger band squeeze release\n    if (features.bollingerBandwidth < 15 && features.bollingerPosition > 60) score += 0.1;else if (features.bollingerBandwidth < 15 && features.bollingerPosition < 40) score -= 0.1;\n    return Math.max(-1, Math.min(1, score));\n  }\n\n  /**\n   * Analyze flow-based strategy\n   */\n  analyzeFlowStrategy(features, flowData) {\n    let score = 0;\n\n    // Whale activity\n    if (flowData.whaleActivity.totalWhalePremium > 100000) {\n      if (flowData.whaleActivity.whaleCallPutRatio > 1.5) score += 0.4;else if (flowData.whaleActivity.whaleCallPutRatio < 0.7) score -= 0.4;\n    }\n\n    // Overall sentiment\n    if (flowData.sentimentAnalysis.sentimentScore > 70) score += 0.3;else if (flowData.sentimentAnalysis.sentimentScore < 30) score -= 0.3;\n\n    // Unusual activity\n    if (flowData.unusualActivity.length > 0) {\n      const significance = flowData.unusualActivity.reduce((max, activity) => activity.significance === 'HIGH' ? Math.max(max, 0.2) : activity.significance === 'MEDIUM' ? Math.max(max, 0.1) : max, 0);\n      score += flowData.overallSignal.score > 0 ? significance : -significance;\n    }\n    return Math.max(-1, Math.min(1, score));\n  }\n\n  /**\n   * Analyze swing strategy\n   */\n  analyzeSwingStrategy(features, technicalData) {\n    let score = 0;\n\n    // Price position relative to moving averages\n    if (features.price > features.sma20 && features.sma20 > features.sma50) score += 0.3;else if (features.price < features.sma20 && features.sma20 < features.sma50) score -= 0.3;\n\n    // Support/resistance levels\n    const distanceFromSupport = (features.price - features.supportLevel) / features.price;\n    const distanceFromResistance = (features.resistanceLevel - features.price) / features.price;\n    if (distanceFromSupport < 0.02 && distanceFromSupport > 0) score += 0.2;\n    if (distanceFromResistance < 0.02 && distanceFromResistance > 0) score -= 0.2;\n\n    // VWAP position\n    if (features.price > features.vwap * 1.01) score += 0.1;else if (features.price < features.vwap * 0.99) score -= 0.1;\n    return Math.max(-1, Math.min(1, score));\n  }\n\n  // ==================== HELPER METHODS ====================\n\n  calculateTrendStrength(technicalData) {\n    let strength = 0;\n    if (technicalData.adx && technicalData.adx.adx > 25) strength += 0.3;\n    if (technicalData.macd && technicalData.macd.crossover === 'BULLISH') strength += 0.2;\n    if (technicalData.sma20 && technicalData.sma50 && technicalData.sma20 > technicalData.sma50) strength += 0.2;\n    return Math.min(strength, 1);\n  }\n  calculateMomentumScore(technicalData) {\n    let momentum = 0;\n    if (technicalData.rsi > 50) momentum += (technicalData.rsi - 50) / 50 * 0.4;else momentum -= (50 - technicalData.rsi) / 50 * 0.4;\n    if (technicalData.macd && technicalData.macd.histogram > 0) momentum += 0.3;else if (technicalData.macd && technicalData.macd.histogram < 0) momentum -= 0.3;\n    return Math.max(-1, Math.min(1, momentum));\n  }\n  calculateVolatilityScore(technicalData) {\n    if (!technicalData.atr || !technicalData.bollingerBands) return 1;\n\n    // Higher ATR and Bollinger bandwidth = higher volatility\n    const atrScore = Math.min(technicalData.atr / 5, 2); // Normalize ATR\n    const bbScore = technicalData.bollingerBands.bandwidth / 20; // Normalize bandwidth\n\n    return (atrScore + bbScore) / 2;\n  }\n  calculateVolumeScore(stockData, technicalData) {\n    // Compare current volume to average (simplified)\n    const avgVolume = stockData.volume * 0.8; // Assume current is 20% above average\n    return stockData.volume / avgVolume;\n  }\n  calculateEnhancedTarget(price, analysis) {\n    const baseMultiplier = analysis.action === 'BUY' ? 1.05 : 0.95;\n\n    // Adjust based on volatility and confidence\n    const volatilityAdjustment = analysis.volatilityScore || 1;\n    const confidenceAdjustment = analysis.confidence / 100;\n    const adjustedMultiplier = analysis.action === 'BUY' ? 1 + 0.05 * volatilityAdjustment * confidenceAdjustment : 1 - 0.05 * volatilityAdjustment * confidenceAdjustment;\n    return parseFloat((price * adjustedMultiplier).toFixed(2));\n  }\n  calculateEnhancedStopLoss(price, analysis) {\n    const baseMultiplier = analysis.action === 'BUY' ? 0.97 : 1.03;\n\n    // Tighter stops for higher confidence trades\n    const confidenceAdjustment = analysis.confidence / 100;\n    const stopDistance = 0.03 * (1 - confidenceAdjustment * 0.3);\n    const adjustedMultiplier = analysis.action === 'BUY' ? 1 - stopDistance : 1 + stopDistance;\n    return parseFloat((price * adjustedMultiplier).toFixed(2));\n  }\n  calculateRiskReward(score, features) {\n    const baseRatio = Math.abs(score) * 2 + 1;\n    const volatilityAdjustment = (features.volatilityScore || 1) * 0.5;\n    const finalRatio = baseRatio + volatilityAdjustment;\n    return `1:${finalRatio.toFixed(1)}`;\n  }\n  calculateSuccessProbability(analysis) {\n    // Base probability from confidence\n    let probability = analysis.confidence;\n\n    // Adjust based on strategy performance\n    const strategyPerf = this.strategies[analysis.primaryStrategy].performance;\n    probability = probability * strategyPerf;\n    return Math.min(95, Math.max(5, Math.round(probability)));\n  }\n  calculatePositionSize(analysis) {\n    // Risk-based position sizing (simplified)\n    const baseSize = 1000; // Base position size\n    const confidenceMultiplier = analysis.confidence / 100;\n    const riskAdjustment = 1 / (analysis.volatilityScore || 1);\n    return Math.round(baseSize * confidenceMultiplier * riskAdjustment);\n  }\n  selectTimeframe(features, strategy) {\n    if (strategy === 'scalping') return '5-15 minutes';\n    if (strategy === 'momentum') return '1-3 hours';\n    if (strategy === 'meanReversion') return '2-6 hours';\n    if (strategy === 'breakout') return '1-5 days';\n    if (strategy === 'swing') return '3-10 days';\n    if (strategy === 'flowBased') return '1-2 days';\n    return '1-3 days';\n  }\n\n  // Reasoning methods\n  getMomentumReasoning(features, technicalData) {\n    const reasons = [];\n    if (features.rsi > 60) reasons.push('Strong RSI momentum');\n    if (features.macd > features.macdSignal) reasons.push('MACD bullish crossover');\n    if (features.adxTrend.includes('STRONG')) reasons.push('Strong trend detected');\n    return reasons.join(', ') || 'Momentum analysis';\n  }\n  getMeanReversionReasoning(features, technicalData) {\n    const reasons = [];\n    if (features.rsi < 30) reasons.push('RSI oversold');\n    if (features.rsi > 70) reasons.push('RSI overbought');\n    if (features.bollingerPosition < 20) reasons.push('Below lower Bollinger band');\n    if (features.bollingerPosition > 80) reasons.push('Above upper Bollinger band');\n    return reasons.join(', ') || 'Mean reversion opportunity';\n  }\n  getBreakoutReasoning(features, technicalData) {\n    const reasons = [];\n    if (features.price > features.resistanceLevel) reasons.push('Resistance breakout');\n    if (features.price < features.supportLevel) reasons.push('Support breakdown');\n    if (features.volumeScore > 1.5) reasons.push('Volume confirmation');\n    return reasons.join(', ') || 'Breakout pattern';\n  }\n  getFlowReasoning(features, flowData) {\n    const reasons = [];\n    if (flowData.whaleActivity.totalWhalePremium > 100000) reasons.push('Whale activity detected');\n    if (flowData.sentimentAnalysis.sentimentScore > 70) reasons.push('Bullish flow sentiment');\n    if (flowData.sentimentAnalysis.sentimentScore < 30) reasons.push('Bearish flow sentiment');\n    return reasons.join(', ') || 'Options flow analysis';\n  }\n  getSwingReasoning(features, technicalData) {\n    const reasons = [];\n    if (features.price > features.sma20) reasons.push('Above SMA20');\n    if (features.price > features.vwap) reasons.push('Above VWAP');\n    return reasons.join(', ') || 'Swing trading setup';\n  }\n  summarizeTechnicalSignals(technicalData) {\n    return {\n      rsi: technicalData.rsi,\n      macdSignal: technicalData.macd ? technicalData.macd.crossover : null,\n      bollingerSignal: technicalData.bollingerBands ? technicalData.bollingerBands.signal : null,\n      overallSignal: technicalData.overallSignal ? technicalData.overallSignal.signal : null,\n      trendStrength: technicalData.adx ? technicalData.adx.trend : null\n    };\n  }\n  summarizeFlowSignals(flowData) {\n    return {\n      sentiment: flowData.sentimentAnalysis.sentiment,\n      whaleActivity: flowData.whaleActivity.totalWhaleFlows,\n      callPutRatio: flowData.sentimentAnalysis.callPutRatio,\n      overallSignal: flowData.overallSignal.signal,\n      confidence: flowData.overallSignal.confidence\n    };\n  }\n\n  // Existing helper methods\n  generatePriceHistory(currentPrice, days = 50) {\n    const prices = [];\n    let price = currentPrice * 0.95;\n    for (let i = 0; i < days; i++) {\n      price = price * (1 + (Math.random() - 0.5) * 0.03);\n      prices.push(price);\n    }\n    return prices;\n  }\n  calculateVolatility(prices) {\n    if (prices.length < 2) return 0.2;\n    const returns = [];\n    for (let i = 1; i < prices.length; i++) {\n      returns.push((prices[i] - prices[i - 1]) / prices[i - 1]);\n    }\n    const avgReturn = returns.reduce((a, b) => a + b, 0) / returns.length;\n    const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - avgReturn, 2), 0) / returns.length;\n    return Math.sqrt(variance * 252);\n  }\n}\nexport default new EnhancedMLEngine();","map":{"version":3,"names":["technicalAnalysis","flowAnalysis","EnhancedMLEngine","constructor","strategies","momentum","weight","performance","parameters","rsiThreshold","macdSignal","volumeMultiplier","meanReversion","rsiOversold","rsiOverbought","bollingerPosition","breakout","atrMultiplier","volumeThreshold","adxStrength","flowBased","whaleThreshold","sentimentScore","callPutRatio","scalping","quickRsi","fastEma","slowEma","swing","sma20","sma50","supportResistance","features","learning","totalTrades","successfulTrades","strategyPerformance","adaptiveWeights","confidenceThreshold","generateEnhancedRecommendations","marketData","optionsFlowData","recommendations","symbol","stockData","Object","entries","technicalData","performCompleteAnalysis","flowData","length","symbolFlow","filter","flow","ticker","toUpperCase","analyzeFlowPatterns","extractEnhancedFeatures","analysis","performEnhancedAnalysis","confidence","recommendation","action","strategy","primaryStrategy","entryPrice","price","targetPrice","calculateEnhancedTarget","stopLoss","calculateEnhancedStopLoss","reasoning","riskReward","timeframe","technicalSignals","summarizeTechnicalSignals","flowSignals","summarizeFlowSignals","probability","calculateSuccessProbability","positionSize","calculatePositionSize","timestamp","Date","now","technicalScore","flowScore","overallSignal","score","volatilityScore","momentumScore","supportLevel","resistanceLevel","push","error","console","sort","a","b","slice","prices","generatePriceHistory","volume","change","changePercent","rsi","macd","signal","macdHistogram","histogram","bollingerBands","position","bollingerBandwidth","bandwidth","adx","adxTrend","trend","ema12","ema26","atr","volatility","calculateVolatility","vwap","obv","pivotPoints","s1","low","r1","high","flowSentiment","sentimentAnalysis","whaleActivity","totalWhalePremium","gammaExposure","gamma","netGamma","trendStrength","calculateTrendStrength","calculateMomentumScore","calculateVolatilityScore","volumeScore","calculateVolumeScore","strategyScores","strategyReasons","analyzeMomentumStrategy","getMomentumReasoning","analyzeMeanReversionStrategy","getMeanReversionReasoning","analyzeBreakoutStrategy","getBreakoutReasoning","analyzeFlowStrategy","getFlowReasoning","analyzeSwingStrategy","getSwingReasoning","finalScore","totalWeight","keys","forEach","adjustedWeight","Math","abs","normalizedScore","min","reduce","maxStrategy","parseFloat","toFixed","join","calculateRiskReward","selectTimeframe","overallTechnicalSignal","max","williamsR","stochastic","k","whaleCallPutRatio","unusualActivity","significance","activity","distanceFromSupport","distanceFromResistance","strength","crossover","atrScore","bbScore","avgVolume","baseMultiplier","volatilityAdjustment","confidenceAdjustment","adjustedMultiplier","stopDistance","baseRatio","finalRatio","strategyPerf","round","baseSize","confidenceMultiplier","riskAdjustment","reasons","includes","bollingerSignal","sentiment","totalWhaleFlows","currentPrice","days","i","random","returns","avgReturn","variance","sum","ret","pow","sqrt"],"sources":["/home/user/webapp/src/services/enhancedMLEngine.js"],"sourcesContent":["/**\n * Enhanced Machine Learning Trading Engine\n * Advanced AI-powered trading strategies with technical analysis and flow integration\n */\n\nimport technicalAnalysis from './technicalAnalysis.js';\nimport flowAnalysis from './flowAnalysis.js';\n\nclass EnhancedMLEngine {\n    constructor() {\n        this.strategies = {\n            momentum: { \n                weight: 0.25, \n                performance: 0.68,\n                parameters: { rsiThreshold: 70, macdSignal: true, volumeMultiplier: 1.5 }\n            },\n            meanReversion: { \n                weight: 0.20, \n                performance: 0.62,\n                parameters: { rsiOversold: 30, rsiOverbought: 70, bollingerPosition: 0.1 }\n            },\n            breakout: { \n                weight: 0.20, \n                performance: 0.75,\n                parameters: { atrMultiplier: 2.0, volumeThreshold: 2.0, adxStrength: 25 }\n            },\n            flowBased: { \n                weight: 0.15, \n                performance: 0.72,\n                parameters: { whaleThreshold: 50000, sentimentScore: 60, callPutRatio: 1.2 }\n            },\n            scalping: { \n                weight: 0.10, \n                performance: 0.58,\n                parameters: { quickRsi: 14, fastEma: 9, slowEma: 21 }\n            },\n            swing: { \n                weight: 0.10, \n                performance: 0.71,\n                parameters: { sma20: true, sma50: true, supportResistance: true }\n            }\n        };\n        \n        this.features = [\n            'price', 'volume', 'change', 'rsi', 'macd', 'volatility',\n            'trend', 'momentum', 'support', 'resistance', 'bollinger',\n            'adx', 'stochastic', 'williamsR', 'atr', 'vwap', 'obv',\n            'flowSentiment', 'whaleActivity', 'gammaExposure'\n        ];\n        \n        this.learning = {\n            totalTrades: 0,\n            successfulTrades: 0,\n            strategyPerformance: {},\n            adaptiveWeights: true,\n            confidenceThreshold: 65\n        };\n    }\n\n    // ==================== ENHANCED RECOMMENDATION ENGINE ====================\n\n    /**\n     * Generate enhanced AI recommendations using technical analysis and flow data\n     */\n    async generateEnhancedRecommendations(marketData, optionsFlowData = null) {\n        const recommendations = [];\n        \n        for (const [symbol, stockData] of Object.entries(marketData)) {\n            try {\n                // Perform comprehensive technical analysis\n                const technicalData = technicalAnalysis.performCompleteAnalysis(stockData);\n                \n                // Analyze options flow if available\n                let flowData = null;\n                if (optionsFlowData && optionsFlowData.length > 0) {\n                    const symbolFlow = optionsFlowData.filter(flow => \n                        (flow.symbol || flow.ticker || '').toUpperCase() === symbol.toUpperCase()\n                    );\n                    flowData = flowAnalysis.analyzeFlowPatterns(symbolFlow);\n                }\n                \n                // Extract enhanced features\n                const features = this.extractEnhancedFeatures(stockData, technicalData, flowData);\n                \n                // Generate analysis using multiple strategies\n                const analysis = this.performEnhancedAnalysis(features, technicalData, flowData);\n                \n                if (analysis.confidence >= this.learning.confidenceThreshold) {\n                    const recommendation = {\n                        symbol,\n                        action: analysis.action,\n                        confidence: analysis.confidence,\n                        strategy: analysis.primaryStrategy,\n                        entryPrice: stockData.price,\n                        targetPrice: this.calculateEnhancedTarget(stockData.price, analysis),\n                        stopLoss: this.calculateEnhancedStopLoss(stockData.price, analysis),\n                        reasoning: analysis.reasoning,\n                        riskReward: analysis.riskReward,\n                        timeframe: analysis.timeframe,\n                        technicalSignals: this.summarizeTechnicalSignals(technicalData),\n                        flowSignals: flowData ? this.summarizeFlowSignals(flowData) : null,\n                        probability: this.calculateSuccessProbability(analysis),\n                        positionSize: this.calculatePositionSize(analysis),\n                        timestamp: Date.now(),\n                        // Enhanced data\n                        technicalScore: analysis.technicalScore,\n                        flowScore: flowData ? flowData.overallSignal.score : 0,\n                        volatilityScore: features.volatilityScore,\n                        momentumScore: features.momentumScore,\n                        supportLevel: features.supportLevel,\n                        resistanceLevel: features.resistanceLevel\n                    };\n                    \n                    recommendations.push(recommendation);\n                }\n            } catch (error) {\n                console.error(`Error analyzing ${symbol}:`, error);\n            }\n        }\n        \n        // Sort by confidence and return top recommendations\n        return recommendations\n            .sort((a, b) => b.confidence - a.confidence)\n            .slice(0, 10);\n    }\n\n    /**\n     * Extract enhanced features combining technical and flow data\n     */\n    extractEnhancedFeatures(stockData, technicalData, flowData) {\n        const prices = this.generatePriceHistory(stockData.price);\n        \n        const features = {\n            // Basic features\n            price: stockData.price,\n            volume: stockData.volume / 1000000,\n            change: stockData.changePercent,\n            \n            // Technical features\n            rsi: technicalData.rsi || 50,\n            macd: technicalData.macd ? technicalData.macd.macd : 0,\n            macdSignal: technicalData.macd ? technicalData.macd.signal : 0,\n            macdHistogram: technicalData.macd ? technicalData.macd.histogram : 0,\n            \n            // Bollinger Bands\n            bollingerPosition: technicalData.bollingerBands ? \n                technicalData.bollingerBands.position : 50,\n            bollingerBandwidth: technicalData.bollingerBands ? \n                technicalData.bollingerBands.bandwidth : 20,\n            \n            // Trend indicators\n            adx: technicalData.adx ? technicalData.adx.adx : 20,\n            adxTrend: technicalData.adx ? technicalData.adx.trend : 'WEAK_TREND',\n            sma20: technicalData.sma20 || stockData.price,\n            sma50: technicalData.sma50 || stockData.price,\n            ema12: technicalData.ema12 || stockData.price,\n            ema26: technicalData.ema26 || stockData.price,\n            \n            // Volatility\n            atr: technicalData.atr || (stockData.price * 0.02),\n            volatility: this.calculateVolatility(prices),\n            \n            // Volume indicators\n            vwap: technicalData.vwap || stockData.price,\n            obv: technicalData.obv || 0,\n            \n            // Support/Resistance\n            supportLevel: technicalData.pivotPoints ? technicalData.pivotPoints.s1 : stockData.low,\n            resistanceLevel: technicalData.pivotPoints ? technicalData.pivotPoints.r1 : stockData.high,\n            \n            // Flow features (if available)\n            flowSentiment: flowData ? flowData.sentimentAnalysis.sentimentScore : 50,\n            whaleActivity: flowData ? flowData.whaleActivity.totalWhalePremium : 0,\n            callPutRatio: flowData ? flowData.sentimentAnalysis.callPutRatio : 1,\n            gammaExposure: flowData ? flowData.gamma.netGamma : 0,\n            \n            // Derived features\n            trendStrength: this.calculateTrendStrength(technicalData),\n            momentumScore: this.calculateMomentumScore(technicalData),\n            volatilityScore: this.calculateVolatilityScore(technicalData),\n            volumeScore: this.calculateVolumeScore(stockData, technicalData)\n        };\n        \n        return features;\n    }\n\n    /**\n     * Perform enhanced analysis using multiple strategies\n     */\n    performEnhancedAnalysis(features, technicalData, flowData) {\n        const strategyScores = {};\n        const strategyReasons = {};\n        \n        // Momentum Strategy Analysis\n        strategyScores.momentum = this.analyzeMomentumStrategy(features, technicalData);\n        strategyReasons.momentum = this.getMomentumReasoning(features, technicalData);\n        \n        // Mean Reversion Strategy Analysis\n        strategyScores.meanReversion = this.analyzeMeanReversionStrategy(features, technicalData);\n        strategyReasons.meanReversion = this.getMeanReversionReasoning(features, technicalData);\n        \n        // Breakout Strategy Analysis\n        strategyScores.breakout = this.analyzeBreakoutStrategy(features, technicalData);\n        strategyReasons.breakout = this.getBreakoutReasoning(features, technicalData);\n        \n        // Flow-Based Strategy Analysis\n        if (flowData) {\n            strategyScores.flowBased = this.analyzeFlowStrategy(features, flowData);\n            strategyReasons.flowBased = this.getFlowReasoning(features, flowData);\n        }\n        \n        // Swing Strategy Analysis\n        strategyScores.swing = this.analyzeSwingStrategy(features, technicalData);\n        strategyReasons.swing = this.getSwingReasoning(features, technicalData);\n        \n        // Calculate weighted final score\n        let finalScore = 0;\n        let totalWeight = 0;\n        const reasoning = [];\n        \n        Object.keys(strategyScores).forEach(strategy => {\n            const weight = this.strategies[strategy].weight;\n            const performance = this.strategies[strategy].performance;\n            const adjustedWeight = weight * performance; // Weight by historical performance\n            \n            finalScore += strategyScores[strategy] * adjustedWeight;\n            totalWeight += adjustedWeight;\n            \n            if (Math.abs(strategyScores[strategy]) > 0.3) {\n                reasoning.push(`${strategy}: ${strategyReasons[strategy]}`);\n            }\n        });\n        \n        const normalizedScore = totalWeight > 0 ? finalScore / totalWeight : 0;\n        const action = normalizedScore > 0.15 ? 'BUY' : \n                     normalizedScore < -0.15 ? 'SELL' : 'HOLD';\n        const confidence = Math.min(Math.abs(normalizedScore) * 100 + 50, 95);\n        \n        // Determine primary strategy\n        const primaryStrategy = Object.keys(strategyScores).reduce((maxStrategy, strategy) => \n            Math.abs(strategyScores[strategy]) > Math.abs(strategyScores[maxStrategy] || 0) ? \n            strategy : maxStrategy, 'momentum');\n        \n        return {\n            action,\n            confidence: parseFloat(confidence.toFixed(1)),\n            primaryStrategy,\n            reasoning: reasoning.join(' | '),\n            riskReward: this.calculateRiskReward(normalizedScore, features),\n            timeframe: this.selectTimeframe(features, primaryStrategy),\n            technicalScore: normalizedScore,\n            strategyScores,\n            overallTechnicalSignal: technicalData.overallSignal\n        };\n    }\n\n    // ==================== STRATEGY ANALYZERS ====================\n\n    /**\n     * Analyze momentum strategy\n     */\n    analyzeMomentumStrategy(features, technicalData) {\n        let score = 0;\n        \n        // RSI momentum\n        if (features.rsi > 60 && features.rsi < 80) score += 0.3;\n        else if (features.rsi < 40 && features.rsi > 20) score -= 0.3;\n        \n        // MACD momentum\n        if (features.macdHistogram > 0 && features.macd > features.macdSignal) score += 0.25;\n        else if (features.macdHistogram < 0 && features.macd < features.macdSignal) score -= 0.25;\n        \n        // Price vs moving averages\n        if (features.price > features.ema12 && features.ema12 > features.ema26) score += 0.2;\n        else if (features.price < features.ema12 && features.ema12 < features.ema26) score -= 0.2;\n        \n        // Volume confirmation\n        if (features.volumeScore > 1.2) score += 0.15;\n        \n        // ADX trend strength\n        if (features.adxTrend === 'STRONG_UPTREND') score += 0.1;\n        else if (features.adxTrend === 'STRONG_DOWNTREND') score -= 0.1;\n        \n        return Math.max(-1, Math.min(1, score));\n    }\n\n    /**\n     * Analyze mean reversion strategy\n     */\n    analyzeMeanReversionStrategy(features, technicalData) {\n        let score = 0;\n        \n        // RSI extremes\n        if (features.rsi < 30) score += 0.4;\n        else if (features.rsi > 70) score -= 0.4;\n        \n        // Bollinger Bands position\n        if (features.bollingerPosition < 20) score += 0.3;\n        else if (features.bollingerPosition > 80) score -= 0.3;\n        \n        // Williams %R extremes\n        const williamsR = technicalData.williamsR;\n        if (williamsR && williamsR < -80) score += 0.2;\n        else if (williamsR && williamsR > -20) score -= 0.2;\n        \n        // Stochastic oversold/overbought\n        if (technicalData.stochastic) {\n            if (technicalData.stochastic.k < 20) score += 0.1;\n            else if (technicalData.stochastic.k > 80) score -= 0.1;\n        }\n        \n        return Math.max(-1, Math.min(1, score));\n    }\n\n    /**\n     * Analyze breakout strategy\n     */\n    analyzeBreakoutStrategy(features, technicalData) {\n        let score = 0;\n        \n        // Price breakout above resistance\n        if (features.price > features.resistanceLevel * 1.02) score += 0.4;\n        else if (features.price < features.supportLevel * 0.98) score -= 0.4;\n        \n        // Volume confirmation\n        if (features.volumeScore > 1.5) score += 0.3;\n        \n        // ATR expansion (volatility increase)\n        if (features.volatilityScore > 1.2) score += 0.2;\n        \n        // Bollinger band squeeze release\n        if (features.bollingerBandwidth < 15 && features.bollingerPosition > 60) score += 0.1;\n        else if (features.bollingerBandwidth < 15 && features.bollingerPosition < 40) score -= 0.1;\n        \n        return Math.max(-1, Math.min(1, score));\n    }\n\n    /**\n     * Analyze flow-based strategy\n     */\n    analyzeFlowStrategy(features, flowData) {\n        let score = 0;\n        \n        // Whale activity\n        if (flowData.whaleActivity.totalWhalePremium > 100000) {\n            if (flowData.whaleActivity.whaleCallPutRatio > 1.5) score += 0.4;\n            else if (flowData.whaleActivity.whaleCallPutRatio < 0.7) score -= 0.4;\n        }\n        \n        // Overall sentiment\n        if (flowData.sentimentAnalysis.sentimentScore > 70) score += 0.3;\n        else if (flowData.sentimentAnalysis.sentimentScore < 30) score -= 0.3;\n        \n        // Unusual activity\n        if (flowData.unusualActivity.length > 0) {\n            const significance = flowData.unusualActivity.reduce((max, activity) => \n                activity.significance === 'HIGH' ? Math.max(max, 0.2) : \n                activity.significance === 'MEDIUM' ? Math.max(max, 0.1) : max, 0);\n            score += flowData.overallSignal.score > 0 ? significance : -significance;\n        }\n        \n        return Math.max(-1, Math.min(1, score));\n    }\n\n    /**\n     * Analyze swing strategy\n     */\n    analyzeSwingStrategy(features, technicalData) {\n        let score = 0;\n        \n        // Price position relative to moving averages\n        if (features.price > features.sma20 && features.sma20 > features.sma50) score += 0.3;\n        else if (features.price < features.sma20 && features.sma20 < features.sma50) score -= 0.3;\n        \n        // Support/resistance levels\n        const distanceFromSupport = (features.price - features.supportLevel) / features.price;\n        const distanceFromResistance = (features.resistanceLevel - features.price) / features.price;\n        \n        if (distanceFromSupport < 0.02 && distanceFromSupport > 0) score += 0.2;\n        if (distanceFromResistance < 0.02 && distanceFromResistance > 0) score -= 0.2;\n        \n        // VWAP position\n        if (features.price > features.vwap * 1.01) score += 0.1;\n        else if (features.price < features.vwap * 0.99) score -= 0.1;\n        \n        return Math.max(-1, Math.min(1, score));\n    }\n\n    // ==================== HELPER METHODS ====================\n\n    calculateTrendStrength(technicalData) {\n        let strength = 0;\n        \n        if (technicalData.adx && technicalData.adx.adx > 25) strength += 0.3;\n        if (technicalData.macd && technicalData.macd.crossover === 'BULLISH') strength += 0.2;\n        if (technicalData.sma20 && technicalData.sma50 && technicalData.sma20 > technicalData.sma50) strength += 0.2;\n        \n        return Math.min(strength, 1);\n    }\n\n    calculateMomentumScore(technicalData) {\n        let momentum = 0;\n        \n        if (technicalData.rsi > 50) momentum += (technicalData.rsi - 50) / 50 * 0.4;\n        else momentum -= (50 - technicalData.rsi) / 50 * 0.4;\n        \n        if (technicalData.macd && technicalData.macd.histogram > 0) momentum += 0.3;\n        else if (technicalData.macd && technicalData.macd.histogram < 0) momentum -= 0.3;\n        \n        return Math.max(-1, Math.min(1, momentum));\n    }\n\n    calculateVolatilityScore(technicalData) {\n        if (!technicalData.atr || !technicalData.bollingerBands) return 1;\n        \n        // Higher ATR and Bollinger bandwidth = higher volatility\n        const atrScore = Math.min(technicalData.atr / 5, 2); // Normalize ATR\n        const bbScore = technicalData.bollingerBands.bandwidth / 20; // Normalize bandwidth\n        \n        return (atrScore + bbScore) / 2;\n    }\n\n    calculateVolumeScore(stockData, technicalData) {\n        // Compare current volume to average (simplified)\n        const avgVolume = stockData.volume * 0.8; // Assume current is 20% above average\n        return stockData.volume / avgVolume;\n    }\n\n    calculateEnhancedTarget(price, analysis) {\n        const baseMultiplier = analysis.action === 'BUY' ? 1.05 : 0.95;\n        \n        // Adjust based on volatility and confidence\n        const volatilityAdjustment = analysis.volatilityScore || 1;\n        const confidenceAdjustment = analysis.confidence / 100;\n        \n        const adjustedMultiplier = analysis.action === 'BUY' ? \n            1 + (0.05 * volatilityAdjustment * confidenceAdjustment) :\n            1 - (0.05 * volatilityAdjustment * confidenceAdjustment);\n        \n        return parseFloat((price * adjustedMultiplier).toFixed(2));\n    }\n\n    calculateEnhancedStopLoss(price, analysis) {\n        const baseMultiplier = analysis.action === 'BUY' ? 0.97 : 1.03;\n        \n        // Tighter stops for higher confidence trades\n        const confidenceAdjustment = analysis.confidence / 100;\n        const stopDistance = 0.03 * (1 - confidenceAdjustment * 0.3);\n        \n        const adjustedMultiplier = analysis.action === 'BUY' ? \n            1 - stopDistance : 1 + stopDistance;\n        \n        return parseFloat((price * adjustedMultiplier).toFixed(2));\n    }\n\n    calculateRiskReward(score, features) {\n        const baseRatio = Math.abs(score) * 2 + 1;\n        const volatilityAdjustment = (features.volatilityScore || 1) * 0.5;\n        const finalRatio = baseRatio + volatilityAdjustment;\n        \n        return `1:${finalRatio.toFixed(1)}`;\n    }\n\n    calculateSuccessProbability(analysis) {\n        // Base probability from confidence\n        let probability = analysis.confidence;\n        \n        // Adjust based on strategy performance\n        const strategyPerf = this.strategies[analysis.primaryStrategy].performance;\n        probability = probability * strategyPerf;\n        \n        return Math.min(95, Math.max(5, Math.round(probability)));\n    }\n\n    calculatePositionSize(analysis) {\n        // Risk-based position sizing (simplified)\n        const baseSize = 1000; // Base position size\n        const confidenceMultiplier = analysis.confidence / 100;\n        const riskAdjustment = 1 / (analysis.volatilityScore || 1);\n        \n        return Math.round(baseSize * confidenceMultiplier * riskAdjustment);\n    }\n\n    selectTimeframe(features, strategy) {\n        if (strategy === 'scalping') return '5-15 minutes';\n        if (strategy === 'momentum') return '1-3 hours';\n        if (strategy === 'meanReversion') return '2-6 hours';\n        if (strategy === 'breakout') return '1-5 days';\n        if (strategy === 'swing') return '3-10 days';\n        if (strategy === 'flowBased') return '1-2 days';\n        \n        return '1-3 days';\n    }\n\n    // Reasoning methods\n    getMomentumReasoning(features, technicalData) {\n        const reasons = [];\n        if (features.rsi > 60) reasons.push('Strong RSI momentum');\n        if (features.macd > features.macdSignal) reasons.push('MACD bullish crossover');\n        if (features.adxTrend.includes('STRONG')) reasons.push('Strong trend detected');\n        return reasons.join(', ') || 'Momentum analysis';\n    }\n\n    getMeanReversionReasoning(features, technicalData) {\n        const reasons = [];\n        if (features.rsi < 30) reasons.push('RSI oversold');\n        if (features.rsi > 70) reasons.push('RSI overbought');\n        if (features.bollingerPosition < 20) reasons.push('Below lower Bollinger band');\n        if (features.bollingerPosition > 80) reasons.push('Above upper Bollinger band');\n        return reasons.join(', ') || 'Mean reversion opportunity';\n    }\n\n    getBreakoutReasoning(features, technicalData) {\n        const reasons = [];\n        if (features.price > features.resistanceLevel) reasons.push('Resistance breakout');\n        if (features.price < features.supportLevel) reasons.push('Support breakdown');\n        if (features.volumeScore > 1.5) reasons.push('Volume confirmation');\n        return reasons.join(', ') || 'Breakout pattern';\n    }\n\n    getFlowReasoning(features, flowData) {\n        const reasons = [];\n        if (flowData.whaleActivity.totalWhalePremium > 100000) reasons.push('Whale activity detected');\n        if (flowData.sentimentAnalysis.sentimentScore > 70) reasons.push('Bullish flow sentiment');\n        if (flowData.sentimentAnalysis.sentimentScore < 30) reasons.push('Bearish flow sentiment');\n        return reasons.join(', ') || 'Options flow analysis';\n    }\n\n    getSwingReasoning(features, technicalData) {\n        const reasons = [];\n        if (features.price > features.sma20) reasons.push('Above SMA20');\n        if (features.price > features.vwap) reasons.push('Above VWAP');\n        return reasons.join(', ') || 'Swing trading setup';\n    }\n\n    summarizeTechnicalSignals(technicalData) {\n        return {\n            rsi: technicalData.rsi,\n            macdSignal: technicalData.macd ? technicalData.macd.crossover : null,\n            bollingerSignal: technicalData.bollingerBands ? technicalData.bollingerBands.signal : null,\n            overallSignal: technicalData.overallSignal ? technicalData.overallSignal.signal : null,\n            trendStrength: technicalData.adx ? technicalData.adx.trend : null\n        };\n    }\n\n    summarizeFlowSignals(flowData) {\n        return {\n            sentiment: flowData.sentimentAnalysis.sentiment,\n            whaleActivity: flowData.whaleActivity.totalWhaleFlows,\n            callPutRatio: flowData.sentimentAnalysis.callPutRatio,\n            overallSignal: flowData.overallSignal.signal,\n            confidence: flowData.overallSignal.confidence\n        };\n    }\n\n    // Existing helper methods\n    generatePriceHistory(currentPrice, days = 50) {\n        const prices = [];\n        let price = currentPrice * 0.95;\n        \n        for (let i = 0; i < days; i++) {\n            price = price * (1 + (Math.random() - 0.5) * 0.03);\n            prices.push(price);\n        }\n        \n        return prices;\n    }\n\n    calculateVolatility(prices) {\n        if (prices.length < 2) return 0.2;\n        \n        const returns = [];\n        for (let i = 1; i < prices.length; i++) {\n            returns.push((prices[i] - prices[i - 1]) / prices[i - 1]);\n        }\n        \n        const avgReturn = returns.reduce((a, b) => a + b, 0) / returns.length;\n        const variance = returns.reduce((sum, ret) => \n            sum + Math.pow(ret - avgReturn, 2), 0) / returns.length;\n        \n        return Math.sqrt(variance * 252);\n    }\n}\n\nexport default new EnhancedMLEngine();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}