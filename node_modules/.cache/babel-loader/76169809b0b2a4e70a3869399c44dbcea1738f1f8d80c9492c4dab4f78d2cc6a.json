{"ast":null,"code":"class MLTradingEngine {\n  constructor() {\n    this.features = ['price', 'volume', 'change', 'rsi', 'macd', 'volatility', 'trend', 'momentum', 'support', 'resistance'];\n    this.strategies = {\n      momentum: {\n        weight: 0.3,\n        performance: 0.65\n      },\n      meanReversion: {\n        weight: 0.25,\n        performance: 0.58\n      },\n      breakout: {\n        weight: 0.2,\n        performance: 0.72\n      },\n      scalping: {\n        weight: 0.15,\n        performance: 0.45\n      },\n      swing: {\n        weight: 0.1,\n        performance: 0.68\n      }\n    };\n  }\n\n  // Calculate technical indicators\n  calculateRSI(prices, period = 14) {\n    if (prices.length < period) return 50;\n    let gains = 0,\n      losses = 0;\n    for (let i = 1; i < period; i++) {\n      const diff = prices[i] - prices[i - 1];\n      if (diff > 0) gains += diff;else losses -= diff;\n    }\n    const avgGain = gains / period;\n    const avgLoss = losses / period;\n    const rs = avgGain / (avgLoss || 1);\n    return 100 - 100 / (1 + rs);\n  }\n  calculateMACD(prices) {\n    const ema12 = this.calculateEMA(prices, 12);\n    const ema26 = this.calculateEMA(prices, 26);\n    return ema12 - ema26;\n  }\n  calculateEMA(prices, period) {\n    if (prices.length === 0) return 0;\n    const multiplier = 2 / (period + 1);\n    let ema = prices[0];\n    for (let i = 1; i < prices.length; i++) {\n      ema = (prices[i] - ema) * multiplier + ema;\n    }\n    return ema;\n  }\n  calculateVolatility(prices) {\n    if (prices.length < 2) return 0;\n    const returns = [];\n    for (let i = 1; i < prices.length; i++) {\n      returns.push((prices[i] - prices[i - 1]) / prices[i - 1]);\n    }\n    const avgReturn = returns.reduce((a, b) => a + b, 0) / returns.length;\n    const variance = returns.reduce((sum, ret) => sum + Math.pow(ret - avgReturn, 2), 0) / returns.length;\n    return Math.sqrt(variance * 252); // Annualized\n  }\n\n  // Extract features from market data\n  extractFeatures(stockData) {\n    const prices = this.generatePriceHistory(stockData.price);\n    return {\n      price: stockData.price,\n      volume: stockData.volume / 1000000,\n      // Normalize\n      change: stockData.changePercent,\n      rsi: this.calculateRSI(prices),\n      macd: this.calculateMACD(prices),\n      volatility: this.calculateVolatility(prices),\n      trend: stockData.changePercent > 0 ? 1 : -1,\n      momentum: Math.abs(stockData.changePercent) / 10,\n      support: stockData.low,\n      resistance: stockData.high\n    };\n  }\n\n  // Generate realistic price history\n  generatePriceHistory(currentPrice, days = 50) {\n    const prices = [];\n    let price = currentPrice;\n    for (let i = 0; i < days; i++) {\n      price = price * (1 + (Math.random() - 0.5) * 0.02);\n      prices.push(price);\n    }\n    return prices;\n  }\n\n  // Generate AI trading recommendations\n  generateRecommendations(marketData) {\n    const recommendations = [];\n    Object.entries(marketData).forEach(([symbol, data]) => {\n      const features = this.extractFeatures(data);\n      const analysis = this.analyzeStock(features);\n      if (analysis.confidence > 60) {\n        recommendations.push({\n          symbol,\n          action: analysis.action,\n          confidence: analysis.confidence,\n          strategy: analysis.strategy,\n          entryPrice: data.price,\n          targetPrice: this.calculateTarget(data.price, analysis.action),\n          stopLoss: this.calculateStopLoss(data.price, analysis.action),\n          reasoning: analysis.reasoning,\n          riskReward: analysis.riskReward,\n          timeframe: analysis.timeframe,\n          timestamp: Date.now()\n        });\n      }\n    });\n    return recommendations.sort((a, b) => b.confidence - a.confidence).slice(0, 5);\n  }\n\n  // Analyze individual stock\n  analyzeStock(features) {\n    let score = 0;\n    let reasoning = [];\n\n    // RSI Analysis\n    if (features.rsi < 30) {\n      score += 0.3;\n      reasoning.push('RSI indicates oversold conditions');\n    } else if (features.rsi > 70) {\n      score -= 0.3;\n      reasoning.push('RSI indicates overbought conditions');\n    }\n\n    // MACD Analysis\n    if (features.macd > 0) {\n      score += 0.2;\n      reasoning.push('MACD showing bullish momentum');\n    } else {\n      score -= 0.2;\n      reasoning.push('MACD showing bearish momentum');\n    }\n\n    // Volume Analysis\n    if (features.volume > 5) {\n      score += 0.15;\n      reasoning.push('High volume supporting move');\n    }\n\n    // Trend Analysis\n    if (features.trend > 0 && features.momentum > 0.5) {\n      score += 0.25;\n      reasoning.push('Strong upward trend detected');\n    } else if (features.trend < 0 && features.momentum > 0.5) {\n      score -= 0.25;\n      reasoning.push('Strong downward trend detected');\n    }\n\n    // Volatility Analysis\n    if (features.volatility > 0.3) {\n      score += 0.1;\n      reasoning.push('High volatility creating opportunities');\n    }\n    const action = score > 0.1 ? 'BUY' : score < -0.1 ? 'SELL' : 'HOLD';\n    const confidence = Math.min(Math.abs(score) * 100 + 50, 95);\n    return {\n      action,\n      confidence: parseFloat(confidence.toFixed(1)),\n      strategy: this.selectStrategy(features),\n      reasoning: reasoning.join(', '),\n      riskReward: this.calculateRiskReward(score),\n      timeframe: this.selectTimeframe(features.volatility)\n    };\n  }\n  selectStrategy(features) {\n    if (features.rsi < 30 || features.rsi > 70) return 'meanReversion';\n    if (features.momentum > 0.7) return 'momentum';\n    if (features.volatility > 0.4) return 'breakout';\n    return 'swing';\n  }\n  calculateTarget(price, action) {\n    const multiplier = action === 'BUY' ? 1.05 : 0.95;\n    return parseFloat((price * multiplier).toFixed(2));\n  }\n  calculateStopLoss(price, action) {\n    const multiplier = action === 'BUY' ? 0.97 : 1.03;\n    return parseFloat((price * multiplier).toFixed(2));\n  }\n  calculateRiskReward(score) {\n    const ratio = Math.abs(score) * 3 + 1;\n    return `1:${ratio.toFixed(1)}`;\n  }\n  selectTimeframe(volatility) {\n    if (volatility > 0.4) return '1-3 days';\n    if (volatility > 0.2) return '3-7 days';\n    return '1-3 weeks';\n  }\n\n  // Learn from completed trades\n  learnFromTrade(trade) {\n    const strategy = trade.strategy;\n    if (!this.strategies[strategy]) {\n      this.strategies[strategy] = {\n        weight: 0.1,\n        performance: 0.5\n      };\n    }\n    const isWin = trade.profit > 0;\n    const currentPerf = this.strategies[strategy].performance;\n\n    // Update performance with exponential moving average\n    this.strategies[strategy].performance = currentPerf * 0.9 + (isWin ? 1 : 0) * 0.1;\n\n    // Adjust weight based on performance\n    if (this.strategies[strategy].performance > 0.6) {\n      this.strategies[strategy].weight = Math.min(this.strategies[strategy].weight * 1.1, 0.4);\n    } else if (this.strategies[strategy].performance < 0.4) {\n      this.strategies[strategy].weight = Math.max(this.strategies[strategy].weight * 0.9, 0.05);\n    }\n    return {\n      strategy,\n      newPerformance: this.strategies[strategy].performance,\n      newWeight: this.strategies[strategy].weight\n    };\n  }\n\n  // Mock market data for testing\n  generateMockData(symbol) {\n    const basePrice = {\n      'AAPL': 175,\n      'NVDA': 485,\n      'TSLA': 248,\n      'SPY': 485,\n      'QQQ': 385\n    }[symbol] || 150;\n    const change = (Math.random() - 0.5) * 10;\n    const price = basePrice + change;\n    return {\n      symbol,\n      price: parseFloat(price.toFixed(2)),\n      change: parseFloat(change.toFixed(2)),\n      changePercent: parseFloat((change / basePrice * 100).toFixed(2)),\n      volume: Math.floor(Math.random() * 10000000) + 1000000,\n      high: parseFloat((price * 1.02).toFixed(2)),\n      low: parseFloat((price * 0.98).toFixed(2)),\n      open: parseFloat(basePrice.toFixed(2)),\n      source: 'Mock Data',\n      timestamp: Date.now()\n    };\n  }\n\n  // Get market overview\n  async getMarketOverview() {\n    const symbols = ['SPY', 'QQQ', 'AAPL', 'NVDA', 'TSLA'];\n    const stocks = {};\n    symbols.forEach(symbol => {\n      stocks[symbol] = this.generateMockData(symbol);\n    });\n    const totalChange = Object.values(stocks).reduce((sum, stock) => sum + stock.changePercent, 0);\n    const avgChange = totalChange / symbols.length;\n    return {\n      stocks,\n      marketSentiment: avgChange > 0.5 ? 'Bullish' : avgChange < -0.5 ? 'Bearish' : 'Neutral',\n      avgChange: parseFloat(avgChange.toFixed(2)),\n      timestamp: Date.now()\n    };\n  }\n}\nexport default new MLTradingEngine();","map":{"version":3,"names":["MLTradingEngine","constructor","features","strategies","momentum","weight","performance","meanReversion","breakout","scalping","swing","calculateRSI","prices","period","length","gains","losses","i","diff","avgGain","avgLoss","rs","calculateMACD","ema12","calculateEMA","ema26","multiplier","ema","calculateVolatility","returns","push","avgReturn","reduce","a","b","variance","sum","ret","Math","pow","sqrt","extractFeatures","stockData","generatePriceHistory","price","volume","change","changePercent","rsi","macd","volatility","trend","abs","support","low","resistance","high","currentPrice","days","random","generateRecommendations","marketData","recommendations","Object","entries","forEach","symbol","data","analysis","analyzeStock","confidence","action","strategy","entryPrice","targetPrice","calculateTarget","stopLoss","calculateStopLoss","reasoning","riskReward","timeframe","timestamp","Date","now","sort","slice","score","min","parseFloat","toFixed","selectStrategy","join","calculateRiskReward","selectTimeframe","ratio","learnFromTrade","trade","isWin","profit","currentPerf","max","newPerformance","newWeight","generateMockData","basePrice","floor","open","source","getMarketOverview","symbols","stocks","totalChange","values","stock","avgChange","marketSentiment"],"sources":["/home/user/webapp/src/services/apiService.js"],"sourcesContent":["class MLTradingEngine {\n    constructor() {\n        this.features = [\n            'price', 'volume', 'change', 'rsi', 'macd', 'volatility',\n            'trend', 'momentum', 'support', 'resistance'\n        ];\n        \n        this.strategies = {\n            momentum: { weight: 0.3, performance: 0.65 },\n            meanReversion: { weight: 0.25, performance: 0.58 },\n            breakout: { weight: 0.2, performance: 0.72 },\n            scalping: { weight: 0.15, performance: 0.45 },\n            swing: { weight: 0.1, performance: 0.68 }\n        };\n    }\n\n    // Calculate technical indicators\n    calculateRSI(prices, period = 14) {\n        if (prices.length < period) return 50;\n        \n        let gains = 0, losses = 0;\n        for (let i = 1; i < period; i++) {\n            const diff = prices[i] - prices[i - 1];\n            if (diff > 0) gains += diff;\n            else losses -= diff;\n        }\n        \n        const avgGain = gains / period;\n        const avgLoss = losses / period;\n        const rs = avgGain / (avgLoss || 1);\n        return 100 - (100 / (1 + rs));\n    }\n\n    calculateMACD(prices) {\n        const ema12 = this.calculateEMA(prices, 12);\n        const ema26 = this.calculateEMA(prices, 26);\n        return ema12 - ema26;\n    }\n\n    calculateEMA(prices, period) {\n        if (prices.length === 0) return 0;\n        \n        const multiplier = 2 / (period + 1);\n        let ema = prices[0];\n        \n        for (let i = 1; i < prices.length; i++) {\n            ema = (prices[i] - ema) * multiplier + ema;\n        }\n        return ema;\n    }\n\n    calculateVolatility(prices) {\n        if (prices.length < 2) return 0;\n        \n        const returns = [];\n        for (let i = 1; i < prices.length; i++) {\n            returns.push((prices[i] - prices[i - 1]) / prices[i - 1]);\n        }\n        \n        const avgReturn = returns.reduce((a, b) => a + b, 0) / returns.length;\n        const variance = returns.reduce((sum, ret) => \n            sum + Math.pow(ret - avgReturn, 2), 0) / returns.length;\n        \n        return Math.sqrt(variance * 252); // Annualized\n    }\n\n    // Extract features from market data\n    extractFeatures(stockData) {\n        const prices = this.generatePriceHistory(stockData.price);\n        return {\n            price: stockData.price,\n            volume: stockData.volume / 1000000, // Normalize\n            change: stockData.changePercent,\n            rsi: this.calculateRSI(prices),\n            macd: this.calculateMACD(prices),\n            volatility: this.calculateVolatility(prices),\n            trend: stockData.changePercent > 0 ? 1 : -1,\n            momentum: Math.abs(stockData.changePercent) / 10,\n            support: stockData.low,\n            resistance: stockData.high\n        };\n    }\n\n    // Generate realistic price history\n    generatePriceHistory(currentPrice, days = 50) {\n        const prices = [];\n        let price = currentPrice;\n        \n        for (let i = 0; i < days; i++) {\n            price = price * (1 + (Math.random() - 0.5) * 0.02);\n            prices.push(price);\n        }\n        return prices;\n    }\n\n    // Generate AI trading recommendations\n    generateRecommendations(marketData) {\n        const recommendations = [];\n        \n        Object.entries(marketData).forEach(([symbol, data]) => {\n            const features = this.extractFeatures(data);\n            const analysis = this.analyzeStock(features);\n            \n            if (analysis.confidence > 60) {\n                recommendations.push({\n                    symbol,\n                    action: analysis.action,\n                    confidence: analysis.confidence,\n                    strategy: analysis.strategy,\n                    entryPrice: data.price,\n                    targetPrice: this.calculateTarget(data.price, analysis.action),\n                    stopLoss: this.calculateStopLoss(data.price, analysis.action),\n                    reasoning: analysis.reasoning,\n                    riskReward: analysis.riskReward,\n                    timeframe: analysis.timeframe,\n                    timestamp: Date.now()\n                });\n            }\n        });\n        \n        return recommendations\n            .sort((a, b) => b.confidence - a.confidence)\n            .slice(0, 5);\n    }\n\n    // Analyze individual stock\n    analyzeStock(features) {\n        let score = 0;\n        let reasoning = [];\n\n        // RSI Analysis\n        if (features.rsi < 30) {\n            score += 0.3;\n            reasoning.push('RSI indicates oversold conditions');\n        } else if (features.rsi > 70) {\n            score -= 0.3;\n            reasoning.push('RSI indicates overbought conditions');\n        }\n\n        // MACD Analysis\n        if (features.macd > 0) {\n            score += 0.2;\n            reasoning.push('MACD showing bullish momentum');\n        } else {\n            score -= 0.2;\n            reasoning.push('MACD showing bearish momentum');\n        }\n\n        // Volume Analysis\n        if (features.volume > 5) {\n            score += 0.15;\n            reasoning.push('High volume supporting move');\n        }\n\n        // Trend Analysis\n        if (features.trend > 0 && features.momentum > 0.5) {\n            score += 0.25;\n            reasoning.push('Strong upward trend detected');\n        } else if (features.trend < 0 && features.momentum > 0.5) {\n            score -= 0.25;\n            reasoning.push('Strong downward trend detected');\n        }\n\n        // Volatility Analysis\n        if (features.volatility > 0.3) {\n            score += 0.1;\n            reasoning.push('High volatility creating opportunities');\n        }\n\n        const action = score > 0.1 ? 'BUY' : score < -0.1 ? 'SELL' : 'HOLD';\n        const confidence = Math.min(Math.abs(score) * 100 + 50, 95);\n\n        return {\n            action,\n            confidence: parseFloat(confidence.toFixed(1)),\n            strategy: this.selectStrategy(features),\n            reasoning: reasoning.join(', '),\n            riskReward: this.calculateRiskReward(score),\n            timeframe: this.selectTimeframe(features.volatility)\n        };\n    }\n\n    selectStrategy(features) {\n        if (features.rsi < 30 || features.rsi > 70) return 'meanReversion';\n        if (features.momentum > 0.7) return 'momentum';\n        if (features.volatility > 0.4) return 'breakout';\n        return 'swing';\n    }\n\n    calculateTarget(price, action) {\n        const multiplier = action === 'BUY' ? 1.05 : 0.95;\n        return parseFloat((price * multiplier).toFixed(2));\n    }\n\n    calculateStopLoss(price, action) {\n        const multiplier = action === 'BUY' ? 0.97 : 1.03;\n        return parseFloat((price * multiplier).toFixed(2));\n    }\n\n    calculateRiskReward(score) {\n        const ratio = Math.abs(score) * 3 + 1;\n        return `1:${ratio.toFixed(1)}`;\n    }\n\n    selectTimeframe(volatility) {\n        if (volatility > 0.4) return '1-3 days';\n        if (volatility > 0.2) return '3-7 days';\n        return '1-3 weeks';\n    }\n\n    // Learn from completed trades\n    learnFromTrade(trade) {\n        const strategy = trade.strategy;\n        if (!this.strategies[strategy]) {\n            this.strategies[strategy] = { weight: 0.1, performance: 0.5 };\n        }\n\n        const isWin = trade.profit > 0;\n        const currentPerf = this.strategies[strategy].performance;\n\n        // Update performance with exponential moving average\n        this.strategies[strategy].performance = currentPerf * 0.9 + (isWin ? 1 : 0) * 0.1;\n\n        // Adjust weight based on performance\n        if (this.strategies[strategy].performance > 0.6) {\n            this.strategies[strategy].weight = Math.min(\n                this.strategies[strategy].weight * 1.1, \n                0.4\n            );\n        } else if (this.strategies[strategy].performance < 0.4) {\n            this.strategies[strategy].weight = Math.max(\n                this.strategies[strategy].weight * 0.9, \n                0.05\n            );\n        }\n\n        return {\n            strategy,\n            newPerformance: this.strategies[strategy].performance,\n            newWeight: this.strategies[strategy].weight\n        };\n    }\n\n    // Mock market data for testing\n    generateMockData(symbol) {\n        const basePrice = {\n            'AAPL': 175,\n            'NVDA': 485,\n            'TSLA': 248,\n            'SPY': 485,\n            'QQQ': 385\n        }[symbol] || 150;\n\n        const change = (Math.random() - 0.5) * 10;\n        const price = basePrice + change;\n\n        return {\n            symbol,\n            price: parseFloat(price.toFixed(2)),\n            change: parseFloat(change.toFixed(2)),\n            changePercent: parseFloat((change / basePrice * 100).toFixed(2)),\n            volume: Math.floor(Math.random() * 10000000) + 1000000,\n            high: parseFloat((price * 1.02).toFixed(2)),\n            low: parseFloat((price * 0.98).toFixed(2)),\n            open: parseFloat(basePrice.toFixed(2)),\n            source: 'Mock Data',\n            timestamp: Date.now()\n        };\n    }\n\n    // Get market overview\n    async getMarketOverview() {\n        const symbols = ['SPY', 'QQQ', 'AAPL', 'NVDA', 'TSLA'];\n        const stocks = {};\n        \n        symbols.forEach(symbol => {\n            stocks[symbol] = this.generateMockData(symbol);\n        });\n\n        const totalChange = Object.values(stocks).reduce((sum, stock) => sum + stock.changePercent, 0);\n        const avgChange = totalChange / symbols.length;\n\n        return {\n            stocks,\n            marketSentiment: avgChange > 0.5 ? 'Bullish' : avgChange < -0.5 ? 'Bearish' : 'Neutral',\n            avgChange: parseFloat(avgChange.toFixed(2)),\n            timestamp: Date.now()\n        };\n    }\n}\n\nexport default new MLTradingEngine();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}