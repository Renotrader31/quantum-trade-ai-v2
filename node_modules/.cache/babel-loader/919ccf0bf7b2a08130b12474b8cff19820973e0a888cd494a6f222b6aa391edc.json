{"ast":null,"code":"import _objectSpread from\"/home/user/webapp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n * Advanced Machine Learning Trading System\n * Self-improving algorithm that learns from every trade and strategy\n */const isBrowser=typeof window!=='undefined';class MLTradingSystem{constructor(){this.model={version:'2.0',accuracy:0.65,// Starting accuracy\nconfidence:0.5,trainingData:[],patterns:new Map(),strategies:new Map(),performance:new Map()};this.features={technical:['rsi','macd','bollinger','vwap','ema','sma'],sentiment:['social','news','options_flow'],market:['volume','volatility','trend','momentum']};this.tradeHistory=[];this.activeTrades=[];this.recommendations=[];this.loadModel();this.initializeNeuralNetwork();}/**\n     * Initialize a simple neural network for pattern recognition\n     */initializeNeuralNetwork(){this.network={inputLayer:15,// Number of input features\nhiddenLayers:[30,20,10],// 3 hidden layers\noutputLayer:5,// Buy strong, buy, hold, sell, sell strong\nweights:this.initializeWeights(),learningRate:0.01};}initializeWeights(){// Initialize random weights for the neural network\nconst weights={};// Input to first hidden layer\nweights.ih=Array(30).fill(0).map(()=>Array(15).fill(0).map(()=>Math.random()-0.5));// Hidden layers\nweights.hh1=Array(20).fill(0).map(()=>Array(30).fill(0).map(()=>Math.random()-0.5));weights.hh2=Array(10).fill(0).map(()=>Array(20).fill(0).map(()=>Math.random()-0.5));// Hidden to output\nweights.ho=Array(5).fill(0).map(()=>Array(10).fill(0).map(()=>Math.random()-0.5));return weights;}/**\n     * Load saved model from storage\n     */loadModel(){if(!isBrowser)return;const savedModel=localStorage.getItem('mlTradingModel');if(savedModel){try{const parsed=JSON.parse(savedModel);this.model=_objectSpread(_objectSpread({},this.model),parsed);// Convert arrays back to Maps\nif(parsed.patterns){this.model.patterns=new Map(parsed.patterns);}if(parsed.strategies){this.model.strategies=new Map(parsed.strategies);}if(parsed.performance){this.model.performance=new Map(parsed.performance);}console.log('ML Model loaded. Accuracy:',this.model.accuracy);}catch(e){console.log('Starting fresh ML model');}}const savedHistory=localStorage.getItem('mlTradeHistory');if(savedHistory){this.tradeHistory=JSON.parse(savedHistory);}}/**\n     * Save model to storage\n     */saveModel(){if(!isBrowser)return;const modelToSave=_objectSpread(_objectSpread({},this.model),{},{patterns:Array.from(this.model.patterns.entries()),strategies:Array.from(this.model.strategies.entries()),performance:Array.from(this.model.performance.entries())});localStorage.setItem('mlTradingModel',JSON.stringify(modelToSave));localStorage.setItem('mlTradeHistory',JSON.stringify(this.tradeHistory));}/**\n     * Extract features from market data\n     */extractFeatures(data){const features=[];// Technical indicators\nfeatures.push(this.calculateRSI(data.prices));features.push(this.calculateMACD(data.prices));features.push(this.calculateBollingerBands(data.prices));features.push(data.vwap||0);// Volume and volatility\nfeatures.push(this.normalizeVolume(data.volume));features.push(this.calculateVolatility(data.prices));// Trend indicators\nfeatures.push(this.calculateTrend(data.prices));features.push(this.calculateMomentum(data.prices));// Options flow\nfeatures.push(data.callVolume/(data.putVolume||1));// Call/Put ratio\nfeatures.push(data.unusualActivity?1:0);// Sentiment scores\nfeatures.push(data.socialSentiment||0);features.push(data.newsSentiment||0);// Market conditions\nfeatures.push(data.marketCap||0);features.push(data.sectorStrength||0);features.push(data.correlationSPY||0);return features.map(f=>isNaN(f)?0:f);// Handle NaN values\n}/**\n     * Forward propagation through the neural network\n     */predict(features){let current=features;const{weights}=this.network;// Input to hidden layer 1\ncurrent=this.activate(this.matrixMultiply(current,weights.ih));// Hidden layer 1 to 2\ncurrent=this.activate(this.matrixMultiply(current,weights.hh1));// Hidden layer 2 to 3\ncurrent=this.activate(this.matrixMultiply(current,weights.hh2));// Hidden layer 3 to output\nconst output=this.softmax(this.matrixMultiply(current,weights.ho));return{buyStrong:output[0],buy:output[1],hold:output[2],sell:output[3],sellStrong:output[4],confidence:Math.max(...output)};}/**\n     * Train the model with new data\n     */async train(tradeData){const features=this.extractFeatures(tradeData.marketData);const actualOutcome=this.encodeOutcome(tradeData.result);// Store training data\nthis.model.trainingData.push({features,outcome:actualOutcome,timestamp:Date.now(),symbol:tradeData.symbol,strategy:tradeData.strategy});// Keep only recent data (last 10,000 trades)\nif(this.model.trainingData.length>10000){this.model.trainingData=this.model.trainingData.slice(-10000);}// Backpropagation\nawait this.backpropagate(features,actualOutcome);// Update patterns\nthis.updatePatterns(tradeData);// Update strategy performance\nthis.updateStrategyPerformance(tradeData);// Recalculate model accuracy\nthis.updateModelAccuracy();// Save the updated model\nthis.saveModel();return{accuracy:this.model.accuracy,confidence:this.model.confidence,totalTrades:this.model.trainingData.length};}/**\n     * Backpropagation for neural network training\n     */async backpropagate(features,target){const prediction=this.predict(features);const error=this.calculateError(prediction,target);// Update weights based on error (simplified)\nconst{weights,learningRate}=this.network;// This is a simplified version - real implementation would be more complex\nObject.keys(weights).forEach(layer=>{weights[layer]=weights[layer].map(row=>row.map(w=>w-learningRate*error*Math.random()));});this.network.weights=weights;}/**\n     * Identify and learn patterns\n     */updatePatterns(tradeData){const pattern=this.identifyPattern(tradeData.marketData);if(!this.model.patterns.has(pattern.type)){this.model.patterns.set(pattern.type,{occurrences:0,successRate:0,totalReturn:0});}const patternStats=this.model.patterns.get(pattern.type);patternStats.occurrences++;if(tradeData.result.profit>0){patternStats.successRate=(patternStats.successRate*(patternStats.occurrences-1)+1)/patternStats.occurrences;}else{patternStats.successRate=patternStats.successRate*(patternStats.occurrences-1)/patternStats.occurrences;}patternStats.totalReturn+=tradeData.result.percentReturn;this.model.patterns.set(pattern.type,patternStats);}/**\n     * Identify market patterns\n     */identifyPattern(marketData){const patterns=[];// Bullish patterns\nif(this.isGoldenCross(marketData))patterns.push('golden_cross');if(this.isBullFlag(marketData))patterns.push('bull_flag');if(this.isCupAndHandle(marketData))patterns.push('cup_handle');// Bearish patterns\nif(this.isDeathCross(marketData))patterns.push('death_cross');if(this.isBearFlag(marketData))patterns.push('bear_flag');if(this.isHeadAndShoulders(marketData))patterns.push('head_shoulders');// Neutral patterns\nif(this.isTriangle(marketData))patterns.push('triangle');if(this.isRange(marketData))patterns.push('range_bound');return{type:patterns.join('_')||'unknown',patterns:patterns};}/**\n     * Update strategy performance metrics\n     */updateStrategyPerformance(tradeData){const{strategy}=tradeData;if(!this.model.strategies.has(strategy)){this.model.strategies.set(strategy,{trades:0,wins:0,losses:0,totalReturn:0,avgReturn:0,winRate:0,sharpeRatio:0});}const stats=this.model.strategies.get(strategy);stats.trades++;if(tradeData.result.profit>0){stats.wins++;}else{stats.losses++;}stats.totalReturn+=tradeData.result.percentReturn;stats.avgReturn=stats.totalReturn/stats.trades;stats.winRate=stats.wins/stats.trades;// Calculate Sharpe ratio (simplified)\nstats.sharpeRatio=this.calculateSharpeRatio(strategy);this.model.strategies.set(strategy,stats);}/**\n     * Generate AI-powered recommendations\n     */generateRecommendations(marketData){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const recommendations=[];const symbols=options.symbols||['SPY','QQQ','AAPL','NVDA','TSLA'];symbols.forEach(symbol=>{const symbolData=this.getMarketData(symbol,marketData);const features=this.extractFeatures(symbolData);const prediction=this.predict(features);const pattern=this.identifyPattern(symbolData);// Get historical performance for this pattern\nconst patternPerformance=this.model.patterns.get(pattern.type)||{successRate:0.5,occurrences:0};// Generate recommendation\nconst action=this.determineAction(prediction);if(action!=='hold'||options.includeHold){recommendations.push({symbol,action,confidence:prediction.confidence,expectedReturn:this.calculateExpectedReturn(prediction,patternPerformance),risk:this.calculateRisk(symbolData),pattern:pattern.type,patternSuccess:patternPerformance.successRate,reasoning:this.generateReasoning(prediction,pattern,symbolData),timeframe:options.timeframe||'1D',entryPrice:symbolData.currentPrice,stopLoss:this.calculateStopLoss(symbolData,action),takeProfit:this.calculateTakeProfit(symbolData,action),positionSize:this.calculatePositionSize(symbolData,options.capital||10000)});}});// Sort by confidence and expected return\nrecommendations.sort((a,b)=>b.confidence*b.expectedReturn-a.confidence*a.expectedReturn);return recommendations.slice(0,options.limit||5);}/**\n     * Record actual trade for learning\n     */recordTrade(trade){// Add to trade history\nthis.tradeHistory.push(_objectSpread(_objectSpread({},trade),{},{timestamp:Date.now(),modelVersion:this.model.version,modelAccuracy:this.model.accuracy}));// If trade is closed, train the model\nif(trade.status==='closed'){this.train({symbol:trade.symbol,strategy:trade.strategy,marketData:trade.entryMarketData,result:{profit:trade.profit,percentReturn:trade.percentReturn,holdingPeriod:trade.exitTime-trade.entryTime}});}// Update active trades\nif(trade.status==='open'){this.activeTrades.push(trade);}else{this.activeTrades=this.activeTrades.filter(t=>t.id!==trade.id);}this.saveModel();}/**\n     * Get performance metrics\n     */getPerformanceMetrics(){const metrics={modelAccuracy:this.model.accuracy,modelConfidence:this.model.confidence,totalTrades:this.tradeHistory.length,winRate:this.calculateWinRate(),avgReturn:this.calculateAvgReturn(),sharpeRatio:this.calculateOverallSharpe(),maxDrawdown:this.calculateMaxDrawdown(),profitFactor:this.calculateProfitFactor(),strategies:Array.from(this.model.strategies.entries()).map(_ref=>{let[name,stats]=_ref;return _objectSpread({name},stats);}),patterns:Array.from(this.model.patterns.entries()).sort((a,b)=>b[1].successRate-a[1].successRate).slice(0,10).map(_ref2=>{let[name,stats]=_ref2;return _objectSpread({name},stats);}),recentTrades:this.tradeHistory.slice(-10),activeTrades:this.activeTrades};return metrics;}/**\n     * Calculate technical indicators\n     */calculateRSI(prices){let period=arguments.length>1&&arguments[1]!==undefined?arguments[1]:14;if(prices.length<period)return 50;let gains=0;let losses=0;for(let i=1;i<period;i++){const diff=prices[i]-prices[i-1];if(diff>0)gains+=diff;else losses-=diff;}const avgGain=gains/period;const avgLoss=losses/period;const rs=avgGain/(avgLoss||1);const rsi=100-100/(1+rs);return rsi;}calculateMACD(prices){const ema12=this.calculateEMA(prices,12);const ema26=this.calculateEMA(prices,26);return ema12-ema26;}calculateEMA(prices,period){if(prices.length===0)return 0;const multiplier=2/(period+1);let ema=prices[0];for(let i=1;i<prices.length;i++){ema=(prices[i]-ema)*multiplier+ema;}return ema;}calculateBollingerBands(prices){let period=arguments.length>1&&arguments[1]!==undefined?arguments[1]:20;const sma=prices.slice(-period).reduce((a,b)=>a+b,0)/period;const variance=prices.slice(-period).reduce((sum,price)=>sum+Math.pow(price-sma,2),0)/period;const stdDev=Math.sqrt(variance);const current=prices[prices.length-1];const position=(current-sma)/(stdDev*2);// Position within bands\nreturn position;// -1 to 1, where -1 is lower band, 1 is upper band\n}calculateVolatility(prices){if(prices.length<2)return 0;const returns=[];for(let i=1;i<prices.length;i++){returns.push((prices[i]-prices[i-1])/prices[i-1]);}const avgReturn=returns.reduce((a,b)=>a+b,0)/returns.length;const variance=returns.reduce((sum,ret)=>sum+Math.pow(ret-avgReturn,2),0)/returns.length;return Math.sqrt(variance*252);// Annualized volatility\n}calculateTrend(prices){if(prices.length<2)return 0;// Simple linear regression\nconst n=prices.length;const indices=Array.from({length:n},(_,i)=>i);const sumX=indices.reduce((a,b)=>a+b,0);const sumY=prices.reduce((a,b)=>a+b,0);const sumXY=indices.reduce((sum,x,i)=>sum+x*prices[i],0);const sumX2=indices.reduce((sum,x)=>sum+x*x,0);const slope=(n*sumXY-sumX*sumY)/(n*sumX2-sumX*sumX);return slope;// Positive = uptrend, negative = downtrend\n}calculateMomentum(prices){let period=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;if(prices.length<period)return 0;const current=prices[prices.length-1];const past=prices[prices.length-period];return(current-past)/past;}/**\n     * Pattern detection methods\n     */isGoldenCross(data){const sma50=this.calculateSMA(data.prices,50);const sma200=this.calculateSMA(data.prices,200);const prevSma50=this.calculateSMA(data.prices.slice(0,-1),50);const prevSma200=this.calculateSMA(data.prices.slice(0,-1),200);return prevSma50<=prevSma200&&sma50>sma200;}isDeathCross(data){const sma50=this.calculateSMA(data.prices,50);const sma200=this.calculateSMA(data.prices,200);const prevSma50=this.calculateSMA(data.prices.slice(0,-1),50);const prevSma200=this.calculateSMA(data.prices.slice(0,-1),200);return prevSma50>=prevSma200&&sma50<sma200;}isBullFlag(data){// Simplified bull flag detection\nconst recent=data.prices.slice(-20);const trend=this.calculateTrend(recent);const consolidation=this.calculateVolatility(recent.slice(-5));return trend>0.02&&consolidation<0.1;}isBearFlag(data){const recent=data.prices.slice(-20);const trend=this.calculateTrend(recent);const consolidation=this.calculateVolatility(recent.slice(-5));return trend<-0.02&&consolidation<0.1;}isCupAndHandle(data){// Simplified cup and handle detection\nif(data.prices.length<50)return false;const prices=data.prices.slice(-50);const midPoint=Math.floor(prices.length/2);const leftHigh=Math.max(...prices.slice(0,midPoint));const bottom=Math.min(...prices.slice(midPoint-10,midPoint+10));const rightHigh=Math.max(...prices.slice(midPoint));return Math.abs(leftHigh-rightHigh)/leftHigh<0.05&&(leftHigh-bottom)/leftHigh>0.1;}isHeadAndShoulders(data){// Simplified head and shoulders detection\nif(data.prices.length<30)return false;const prices=data.prices.slice(-30);const third=Math.floor(prices.length/3);const leftShoulder=Math.max(...prices.slice(0,third));const head=Math.max(...prices.slice(third,third*2));const rightShoulder=Math.max(...prices.slice(third*2));return head>leftShoulder&&head>rightShoulder&&Math.abs(leftShoulder-rightShoulder)/leftShoulder<0.05;}isTriangle(data){// Simplified triangle pattern detection\nconst highs=[];const lows=[];const period=5;for(let i=0;i<data.prices.length-period;i+=period){const slice=data.prices.slice(i,i+period);highs.push(Math.max(...slice));lows.push(Math.min(...slice));}const highTrend=this.calculateTrend(highs);const lowTrend=this.calculateTrend(lows);return Math.abs(highTrend)<0.01&&lowTrend>0.01;}isRange(data){const volatility=this.calculateVolatility(data.prices);const trend=Math.abs(this.calculateTrend(data.prices));return volatility<0.15&&trend<0.001;}/**\n     * Helper methods\n     */calculateSMA(prices,period){if(prices.length<period)return prices[prices.length-1]||0;return prices.slice(-period).reduce((a,b)=>a+b,0)/period;}normalizeVolume(volume){// Normalize volume to 0-1 scale\nconst avgVolume=10000000;// 10M average\nreturn Math.min(volume/avgVolume,2);}activate(x){// ReLU activation\nreturn Array.isArray(x)?x.map(v=>Math.max(0,v)):Math.max(0,x);}softmax(x){const max=Math.max(...x);const exp=x.map(v=>Math.exp(v-max));const sum=exp.reduce((a,b)=>a+b,0);return exp.map(v=>v/sum);}matrixMultiply(vector,matrix){return matrix.map(row=>row.reduce((sum,val,i)=>sum+val*(vector[i]||0),0));}calculateError(prediction,target){const predArray=[prediction.buyStrong,prediction.buy,prediction.hold,prediction.sell,prediction.sellStrong];return predArray.reduce((sum,val,i)=>sum+Math.pow(val-(target[i]||0),2),0);}encodeOutcome(result){// Encode trading outcome to neural network output format\nconst returnPercent=result.percentReturn;if(returnPercent>10)return[1,0,0,0,0];// Buy Strong\nif(returnPercent>3)return[0,1,0,0,0];// Buy\nif(returnPercent>-3)return[0,0,1,0,0];// Hold\nif(returnPercent>-10)return[0,0,0,1,0];// Sell\nreturn[0,0,0,0,1];// Sell Strong\n}determineAction(prediction){const actions=['buyStrong','buy','hold','sell','sellStrong'];const values=[prediction.buyStrong,prediction.buy,prediction.hold,prediction.sell,prediction.sellStrong];const maxIndex=values.indexOf(Math.max(...values));return actions[maxIndex];}calculateExpectedReturn(prediction,patternPerformance){const baseReturn=prediction.buyStrong*15+prediction.buy*7+prediction.hold*0+prediction.sell*-7+prediction.sellStrong*-15;// Adjust based on pattern performance\nconst patternAdjustment=(patternPerformance.successRate-0.5)*10;return baseReturn+patternAdjustment;}calculateRisk(data){const volatility=this.calculateVolatility(data.prices);const atr=this.calculateATR(data);return Math.min(volatility*atr,1);}calculateATR(data){let period=arguments.length>1&&arguments[1]!==undefined?arguments[1]:14;// Average True Range calculation\nif(!data.highs||!data.lows||data.highs.length<period){return 0.02;// Default 2%\n}const trueRanges=[];for(let i=1;i<data.highs.length;i++){const high=data.highs[i];const low=data.lows[i];const prevClose=data.prices[i-1];const tr=Math.max(high-low,Math.abs(high-prevClose),Math.abs(low-prevClose));trueRanges.push(tr);}const atr=trueRanges.slice(-period).reduce((a,b)=>a+b,0)/period;return atr/data.prices[data.prices.length-1];}calculateStopLoss(data,action){const atr=this.calculateATR(data);const currentPrice=data.currentPrice;if(action.includes('buy')){return currentPrice*(1-atr*2);}else if(action.includes('sell')){return currentPrice*(1+atr*2);}return currentPrice;}calculateTakeProfit(data,action){const atr=this.calculateATR(data);const currentPrice=data.currentPrice;if(action.includes('buy')){return currentPrice*(1+atr*3);}else if(action.includes('sell')){return currentPrice*(1-atr*3);}return currentPrice;}calculatePositionSize(data,capital){const risk=this.calculateRisk(data);const maxRisk=0.02;// Max 2% risk per trade\nconst positionSize=capital*maxRisk/risk;return Math.min(positionSize,capital*0.25);// Max 25% per position\n}generateReasoning(prediction,pattern,data){const reasons=[];// Add prediction reasoning\nif(prediction.buyStrong>0.5){reasons.push('Strong bullish signals detected');}else if(prediction.buy>0.5){reasons.push('Moderate bullish signals present');}else if(prediction.sell>0.5){reasons.push('Bearish indicators dominating');}// Add pattern reasoning\nif(pattern.patterns.length>0){reasons.push(\"Pattern detected: \".concat(pattern.patterns.join(', ')));}// Add technical reasoning\nconst rsi=this.calculateRSI(data.prices);if(rsi<30)reasons.push('RSI indicates oversold conditions');if(rsi>70)reasons.push('RSI indicates overbought conditions');// Add volume reasoning\nif(data.volume>data.avgVolume*1.5){reasons.push('Unusual volume detected');}// Add confidence reasoning\nreasons.push(\"Model confidence: \".concat((prediction.confidence*100).toFixed(1),\"%\"));return reasons.join('. ');}updateModelAccuracy(){if(this.tradeHistory.length<10)return;const recentTrades=this.tradeHistory.slice(-100);const correctPredictions=recentTrades.filter(trade=>trade.prediction==='buy'&&trade.result&&trade.result.profit>0||trade.prediction==='sell'&&trade.result&&trade.result.profit>0||trade.prediction==='hold'&&trade.result&&Math.abs(trade.result.percentReturn)<2).length;this.model.accuracy=correctPredictions/recentTrades.length;this.model.confidence=Math.min(this.model.accuracy*1.2,1);}calculateWinRate(){if(this.tradeHistory.length===0)return 0;const wins=this.tradeHistory.filter(t=>t.result&&t.result.profit>0).length;return wins/this.tradeHistory.length;}calculateAvgReturn(){if(this.tradeHistory.length===0)return 0;const totalReturn=this.tradeHistory.reduce((sum,trade)=>{var _trade$result;return sum+(((_trade$result=trade.result)===null||_trade$result===void 0?void 0:_trade$result.percentReturn)||0);},0);return totalReturn/this.tradeHistory.length;}calculateOverallSharpe(){if(this.tradeHistory.length<2)return 0;const returns=this.tradeHistory.map(t=>{var _t$result;return((_t$result=t.result)===null||_t$result===void 0?void 0:_t$result.percentReturn)||0;});const avgReturn=returns.reduce((a,b)=>a+b,0)/returns.length;const variance=returns.reduce((sum,ret)=>sum+Math.pow(ret-avgReturn,2),0)/returns.length;const stdDev=Math.sqrt(variance);return stdDev===0?0:(avgReturn-0.02)/stdDev;// 2% risk-free rate\n}calculateSharpeRatio(strategy){const trades=this.tradeHistory.filter(t=>t.strategy===strategy);if(trades.length<2)return 0;const returns=trades.map(t=>{var _t$result2;return((_t$result2=t.result)===null||_t$result2===void 0?void 0:_t$result2.percentReturn)||0;});const avgReturn=returns.reduce((a,b)=>a+b,0)/returns.length;const variance=returns.reduce((sum,ret)=>sum+Math.pow(ret-avgReturn,2),0)/returns.length;const stdDev=Math.sqrt(variance);return stdDev===0?0:(avgReturn-0.02)/stdDev;}calculateMaxDrawdown(){if(this.tradeHistory.length===0)return 0;let peak=0;let maxDrawdown=0;let runningTotal=0;this.tradeHistory.forEach(trade=>{var _trade$result2;runningTotal+=((_trade$result2=trade.result)===null||_trade$result2===void 0?void 0:_trade$result2.profit)||0;if(runningTotal>peak){peak=runningTotal;}const drawdown=(peak-runningTotal)/peak;if(drawdown>maxDrawdown){maxDrawdown=drawdown;}});return maxDrawdown;}calculateProfitFactor(){const wins=this.tradeHistory.filter(t=>t.result&&t.result.profit>0).reduce((sum,t)=>sum+t.result.profit,0);const losses=Math.abs(this.tradeHistory.filter(t=>t.result&&t.result.profit<0).reduce((sum,t)=>sum+t.result.profit,0));return losses===0?wins:wins/losses;}getMarketData(symbol,marketData){// Extract symbol-specific data from market data\nreturn marketData[symbol]||{symbol,prices:[],volume:0,currentPrice:0,highs:[],lows:[],vwap:0,callVolume:0,putVolume:0,unusualActivity:false,socialSentiment:0,newsSentiment:0,marketCap:0,sectorStrength:0,correlationSPY:0,avgVolume:0};}}// Export for use in React components\nexport default MLTradingSystem;","map":{"version":3,"names":["isBrowser","window","MLTradingSystem","constructor","model","version","accuracy","confidence","trainingData","patterns","Map","strategies","performance","features","technical","sentiment","market","tradeHistory","activeTrades","recommendations","loadModel","initializeNeuralNetwork","network","inputLayer","hiddenLayers","outputLayer","weights","initializeWeights","learningRate","ih","Array","fill","map","Math","random","hh1","hh2","ho","savedModel","localStorage","getItem","parsed","JSON","parse","_objectSpread","console","log","e","savedHistory","saveModel","modelToSave","from","entries","setItem","stringify","extractFeatures","data","push","calculateRSI","prices","calculateMACD","calculateBollingerBands","vwap","normalizeVolume","volume","calculateVolatility","calculateTrend","calculateMomentum","callVolume","putVolume","unusualActivity","socialSentiment","newsSentiment","marketCap","sectorStrength","correlationSPY","f","isNaN","predict","current","activate","matrixMultiply","output","softmax","buyStrong","buy","hold","sell","sellStrong","max","train","tradeData","marketData","actualOutcome","encodeOutcome","result","outcome","timestamp","Date","now","symbol","strategy","length","slice","backpropagate","updatePatterns","updateStrategyPerformance","updateModelAccuracy","totalTrades","target","prediction","error","calculateError","Object","keys","forEach","layer","row","w","pattern","identifyPattern","has","type","set","occurrences","successRate","totalReturn","patternStats","get","profit","percentReturn","isGoldenCross","isBullFlag","isCupAndHandle","isDeathCross","isBearFlag","isHeadAndShoulders","isTriangle","isRange","join","trades","wins","losses","avgReturn","winRate","sharpeRatio","stats","calculateSharpeRatio","generateRecommendations","options","arguments","undefined","symbols","symbolData","getMarketData","patternPerformance","action","determineAction","includeHold","expectedReturn","calculateExpectedReturn","risk","calculateRisk","patternSuccess","reasoning","generateReasoning","timeframe","entryPrice","currentPrice","stopLoss","calculateStopLoss","takeProfit","calculateTakeProfit","positionSize","calculatePositionSize","capital","sort","a","b","limit","recordTrade","trade","modelVersion","modelAccuracy","status","entryMarketData","holdingPeriod","exitTime","entryTime","filter","t","id","getPerformanceMetrics","metrics","modelConfidence","calculateWinRate","calculateAvgReturn","calculateOverallSharpe","maxDrawdown","calculateMaxDrawdown","profitFactor","calculateProfitFactor","_ref","name","_ref2","recentTrades","period","gains","i","diff","avgGain","avgLoss","rs","rsi","ema12","calculateEMA","ema26","multiplier","ema","sma","reduce","variance","sum","price","pow","stdDev","sqrt","position","returns","ret","n","indices","_","sumX","sumY","sumXY","x","sumX2","slope","past","sma50","calculateSMA","sma200","prevSma50","prevSma200","recent","trend","consolidation","midPoint","floor","leftHigh","bottom","min","rightHigh","abs","third","leftShoulder","head","rightShoulder","highs","lows","highTrend","lowTrend","volatility","avgVolume","isArray","v","exp","vector","matrix","val","predArray","returnPercent","actions","values","maxIndex","indexOf","baseReturn","patternAdjustment","atr","calculateATR","trueRanges","high","low","prevClose","tr","includes","maxRisk","reasons","concat","toFixed","correctPredictions","_trade$result","_t$result","_t$result2","peak","runningTotal","_trade$result2","drawdown"],"sources":["/home/user/webapp/src/services/MLTradingSystem.js"],"sourcesContent":["/**\n * Advanced Machine Learning Trading System\n * Self-improving algorithm that learns from every trade and strategy\n */\n\nconst isBrowser = typeof window !== 'undefined';\n\nclass MLTradingSystem {\n    constructor() {\n        this.model = {\n            version: '2.0',\n            accuracy: 0.65, // Starting accuracy\n            confidence: 0.5,\n            trainingData: [],\n            patterns: new Map(),\n            strategies: new Map(),\n            performance: new Map()\n        };\n        \n        this.features = {\n            technical: ['rsi', 'macd', 'bollinger', 'vwap', 'ema', 'sma'],\n            sentiment: ['social', 'news', 'options_flow'],\n            market: ['volume', 'volatility', 'trend', 'momentum']\n        };\n        \n        this.tradeHistory = [];\n        this.activeTrades = [];\n        this.recommendations = [];\n        \n        this.loadModel();\n        this.initializeNeuralNetwork();\n    }\n\n    /**\n     * Initialize a simple neural network for pattern recognition\n     */\n    initializeNeuralNetwork() {\n        this.network = {\n            inputLayer: 15, // Number of input features\n            hiddenLayers: [30, 20, 10], // 3 hidden layers\n            outputLayer: 5, // Buy strong, buy, hold, sell, sell strong\n            weights: this.initializeWeights(),\n            learningRate: 0.01\n        };\n    }\n\n    initializeWeights() {\n        // Initialize random weights for the neural network\n        const weights = {};\n        \n        // Input to first hidden layer\n        weights.ih = Array(30).fill(0).map(() => \n            Array(15).fill(0).map(() => Math.random() - 0.5)\n        );\n        \n        // Hidden layers\n        weights.hh1 = Array(20).fill(0).map(() => \n            Array(30).fill(0).map(() => Math.random() - 0.5)\n        );\n        weights.hh2 = Array(10).fill(0).map(() => \n            Array(20).fill(0).map(() => Math.random() - 0.5)\n        );\n        \n        // Hidden to output\n        weights.ho = Array(5).fill(0).map(() => \n            Array(10).fill(0).map(() => Math.random() - 0.5)\n        );\n        \n        return weights;\n    }\n\n    /**\n     * Load saved model from storage\n     */\n    loadModel() {\n        if (!isBrowser) return;\n        \n        const savedModel = localStorage.getItem('mlTradingModel');\n        if (savedModel) {\n            try {\n                const parsed = JSON.parse(savedModel);\n                this.model = { ...this.model, ...parsed };\n                \n                // Convert arrays back to Maps\n                if (parsed.patterns) {\n                    this.model.patterns = new Map(parsed.patterns);\n                }\n                if (parsed.strategies) {\n                    this.model.strategies = new Map(parsed.strategies);\n                }\n                if (parsed.performance) {\n                    this.model.performance = new Map(parsed.performance);\n                }\n                \n                console.log('ML Model loaded. Accuracy:', this.model.accuracy);\n            } catch (e) {\n                console.log('Starting fresh ML model');\n            }\n        }\n        \n        const savedHistory = localStorage.getItem('mlTradeHistory');\n        if (savedHistory) {\n            this.tradeHistory = JSON.parse(savedHistory);\n        }\n    }\n\n    /**\n     * Save model to storage\n     */\n    saveModel() {\n        if (!isBrowser) return;\n        \n        const modelToSave = {\n            ...this.model,\n            patterns: Array.from(this.model.patterns.entries()),\n            strategies: Array.from(this.model.strategies.entries()),\n            performance: Array.from(this.model.performance.entries())\n        };\n        \n        localStorage.setItem('mlTradingModel', JSON.stringify(modelToSave));\n        localStorage.setItem('mlTradeHistory', JSON.stringify(this.tradeHistory));\n    }\n\n    /**\n     * Extract features from market data\n     */\n    extractFeatures(data) {\n        const features = [];\n        \n        // Technical indicators\n        features.push(this.calculateRSI(data.prices));\n        features.push(this.calculateMACD(data.prices));\n        features.push(this.calculateBollingerBands(data.prices));\n        features.push(data.vwap || 0);\n        \n        // Volume and volatility\n        features.push(this.normalizeVolume(data.volume));\n        features.push(this.calculateVolatility(data.prices));\n        \n        // Trend indicators\n        features.push(this.calculateTrend(data.prices));\n        features.push(this.calculateMomentum(data.prices));\n        \n        // Options flow\n        features.push(data.callVolume / (data.putVolume || 1)); // Call/Put ratio\n        features.push(data.unusualActivity ? 1 : 0);\n        \n        // Sentiment scores\n        features.push(data.socialSentiment || 0);\n        features.push(data.newsSentiment || 0);\n        \n        // Market conditions\n        features.push(data.marketCap || 0);\n        features.push(data.sectorStrength || 0);\n        features.push(data.correlationSPY || 0);\n        \n        return features.map(f => isNaN(f) ? 0 : f); // Handle NaN values\n    }\n\n    /**\n     * Forward propagation through the neural network\n     */\n    predict(features) {\n        let current = features;\n        const { weights } = this.network;\n        \n        // Input to hidden layer 1\n        current = this.activate(this.matrixMultiply(current, weights.ih));\n        \n        // Hidden layer 1 to 2\n        current = this.activate(this.matrixMultiply(current, weights.hh1));\n        \n        // Hidden layer 2 to 3\n        current = this.activate(this.matrixMultiply(current, weights.hh2));\n        \n        // Hidden layer 3 to output\n        const output = this.softmax(this.matrixMultiply(current, weights.ho));\n        \n        return {\n            buyStrong: output[0],\n            buy: output[1],\n            hold: output[2],\n            sell: output[3],\n            sellStrong: output[4],\n            confidence: Math.max(...output)\n        };\n    }\n\n    /**\n     * Train the model with new data\n     */\n    async train(tradeData) {\n        const features = this.extractFeatures(tradeData.marketData);\n        const actualOutcome = this.encodeOutcome(tradeData.result);\n        \n        // Store training data\n        this.model.trainingData.push({\n            features,\n            outcome: actualOutcome,\n            timestamp: Date.now(),\n            symbol: tradeData.symbol,\n            strategy: tradeData.strategy\n        });\n        \n        // Keep only recent data (last 10,000 trades)\n        if (this.model.trainingData.length > 10000) {\n            this.model.trainingData = this.model.trainingData.slice(-10000);\n        }\n        \n        // Backpropagation\n        await this.backpropagate(features, actualOutcome);\n        \n        // Update patterns\n        this.updatePatterns(tradeData);\n        \n        // Update strategy performance\n        this.updateStrategyPerformance(tradeData);\n        \n        // Recalculate model accuracy\n        this.updateModelAccuracy();\n        \n        // Save the updated model\n        this.saveModel();\n        \n        return {\n            accuracy: this.model.accuracy,\n            confidence: this.model.confidence,\n            totalTrades: this.model.trainingData.length\n        };\n    }\n\n    /**\n     * Backpropagation for neural network training\n     */\n    async backpropagate(features, target) {\n        const prediction = this.predict(features);\n        const error = this.calculateError(prediction, target);\n        \n        // Update weights based on error (simplified)\n        const { weights, learningRate } = this.network;\n        \n        // This is a simplified version - real implementation would be more complex\n        Object.keys(weights).forEach(layer => {\n            weights[layer] = weights[layer].map(row =>\n                row.map(w => w - learningRate * error * Math.random())\n            );\n        });\n        \n        this.network.weights = weights;\n    }\n\n    /**\n     * Identify and learn patterns\n     */\n    updatePatterns(tradeData) {\n        const pattern = this.identifyPattern(tradeData.marketData);\n        \n        if (!this.model.patterns.has(pattern.type)) {\n            this.model.patterns.set(pattern.type, {\n                occurrences: 0,\n                successRate: 0,\n                totalReturn: 0\n            });\n        }\n        \n        const patternStats = this.model.patterns.get(pattern.type);\n        patternStats.occurrences++;\n        \n        if (tradeData.result.profit > 0) {\n            patternStats.successRate = \n                (patternStats.successRate * (patternStats.occurrences - 1) + 1) / \n                patternStats.occurrences;\n        } else {\n            patternStats.successRate = \n                (patternStats.successRate * (patternStats.occurrences - 1)) / \n                patternStats.occurrences;\n        }\n        \n        patternStats.totalReturn += tradeData.result.percentReturn;\n        \n        this.model.patterns.set(pattern.type, patternStats);\n    }\n\n    /**\n     * Identify market patterns\n     */\n    identifyPattern(marketData) {\n        const patterns = [];\n        \n        // Bullish patterns\n        if (this.isGoldenCross(marketData)) patterns.push('golden_cross');\n        if (this.isBullFlag(marketData)) patterns.push('bull_flag');\n        if (this.isCupAndHandle(marketData)) patterns.push('cup_handle');\n        \n        // Bearish patterns\n        if (this.isDeathCross(marketData)) patterns.push('death_cross');\n        if (this.isBearFlag(marketData)) patterns.push('bear_flag');\n        if (this.isHeadAndShoulders(marketData)) patterns.push('head_shoulders');\n        \n        // Neutral patterns\n        if (this.isTriangle(marketData)) patterns.push('triangle');\n        if (this.isRange(marketData)) patterns.push('range_bound');\n        \n        return {\n            type: patterns.join('_') || 'unknown',\n            patterns: patterns\n        };\n    }\n\n    /**\n     * Update strategy performance metrics\n     */\n    updateStrategyPerformance(tradeData) {\n        const { strategy } = tradeData;\n        \n        if (!this.model.strategies.has(strategy)) {\n            this.model.strategies.set(strategy, {\n                trades: 0,\n                wins: 0,\n                losses: 0,\n                totalReturn: 0,\n                avgReturn: 0,\n                winRate: 0,\n                sharpeRatio: 0\n            });\n        }\n        \n        const stats = this.model.strategies.get(strategy);\n        stats.trades++;\n        \n        if (tradeData.result.profit > 0) {\n            stats.wins++;\n        } else {\n            stats.losses++;\n        }\n        \n        stats.totalReturn += tradeData.result.percentReturn;\n        stats.avgReturn = stats.totalReturn / stats.trades;\n        stats.winRate = stats.wins / stats.trades;\n        \n        // Calculate Sharpe ratio (simplified)\n        stats.sharpeRatio = this.calculateSharpeRatio(strategy);\n        \n        this.model.strategies.set(strategy, stats);\n    }\n\n    /**\n     * Generate AI-powered recommendations\n     */\n    generateRecommendations(marketData, options = {}) {\n        const recommendations = [];\n        const symbols = options.symbols || ['SPY', 'QQQ', 'AAPL', 'NVDA', 'TSLA'];\n        \n        symbols.forEach(symbol => {\n            const symbolData = this.getMarketData(symbol, marketData);\n            const features = this.extractFeatures(symbolData);\n            const prediction = this.predict(features);\n            const pattern = this.identifyPattern(symbolData);\n            \n            // Get historical performance for this pattern\n            const patternPerformance = this.model.patterns.get(pattern.type) || {\n                successRate: 0.5,\n                occurrences: 0\n            };\n            \n            // Generate recommendation\n            const action = this.determineAction(prediction);\n            \n            if (action !== 'hold' || options.includeHold) {\n                recommendations.push({\n                    symbol,\n                    action,\n                    confidence: prediction.confidence,\n                    expectedReturn: this.calculateExpectedReturn(prediction, patternPerformance),\n                    risk: this.calculateRisk(symbolData),\n                    pattern: pattern.type,\n                    patternSuccess: patternPerformance.successRate,\n                    reasoning: this.generateReasoning(prediction, pattern, symbolData),\n                    timeframe: options.timeframe || '1D',\n                    entryPrice: symbolData.currentPrice,\n                    stopLoss: this.calculateStopLoss(symbolData, action),\n                    takeProfit: this.calculateTakeProfit(symbolData, action),\n                    positionSize: this.calculatePositionSize(symbolData, options.capital || 10000)\n                });\n            }\n        });\n        \n        // Sort by confidence and expected return\n        recommendations.sort((a, b) => \n            (b.confidence * b.expectedReturn) - (a.confidence * a.expectedReturn)\n        );\n        \n        return recommendations.slice(0, options.limit || 5);\n    }\n\n    /**\n     * Record actual trade for learning\n     */\n    recordTrade(trade) {\n        // Add to trade history\n        this.tradeHistory.push({\n            ...trade,\n            timestamp: Date.now(),\n            modelVersion: this.model.version,\n            modelAccuracy: this.model.accuracy\n        });\n        \n        // If trade is closed, train the model\n        if (trade.status === 'closed') {\n            this.train({\n                symbol: trade.symbol,\n                strategy: trade.strategy,\n                marketData: trade.entryMarketData,\n                result: {\n                    profit: trade.profit,\n                    percentReturn: trade.percentReturn,\n                    holdingPeriod: trade.exitTime - trade.entryTime\n                }\n            });\n        }\n        \n        // Update active trades\n        if (trade.status === 'open') {\n            this.activeTrades.push(trade);\n        } else {\n            this.activeTrades = this.activeTrades.filter(t => t.id !== trade.id);\n        }\n        \n        this.saveModel();\n    }\n\n    /**\n     * Get performance metrics\n     */\n    getPerformanceMetrics() {\n        const metrics = {\n            modelAccuracy: this.model.accuracy,\n            modelConfidence: this.model.confidence,\n            totalTrades: this.tradeHistory.length,\n            winRate: this.calculateWinRate(),\n            avgReturn: this.calculateAvgReturn(),\n            sharpeRatio: this.calculateOverallSharpe(),\n            maxDrawdown: this.calculateMaxDrawdown(),\n            profitFactor: this.calculateProfitFactor(),\n            strategies: Array.from(this.model.strategies.entries()).map(([name, stats]) => ({\n                name,\n                ...stats\n            })),\n            patterns: Array.from(this.model.patterns.entries())\n                .sort((a, b) => b[1].successRate - a[1].successRate)\n                .slice(0, 10)\n                .map(([name, stats]) => ({\n                    name,\n                    ...stats\n                })),\n            recentTrades: this.tradeHistory.slice(-10),\n            activeTrades: this.activeTrades\n        };\n        \n        return metrics;\n    }\n\n    /**\n     * Calculate technical indicators\n     */\n    calculateRSI(prices, period = 14) {\n        if (prices.length < period) return 50;\n        \n        let gains = 0;\n        let losses = 0;\n        \n        for (let i = 1; i < period; i++) {\n            const diff = prices[i] - prices[i - 1];\n            if (diff > 0) gains += diff;\n            else losses -= diff;\n        }\n        \n        const avgGain = gains / period;\n        const avgLoss = losses / period;\n        const rs = avgGain / (avgLoss || 1);\n        const rsi = 100 - (100 / (1 + rs));\n        \n        return rsi;\n    }\n\n    calculateMACD(prices) {\n        const ema12 = this.calculateEMA(prices, 12);\n        const ema26 = this.calculateEMA(prices, 26);\n        return ema12 - ema26;\n    }\n\n    calculateEMA(prices, period) {\n        if (prices.length === 0) return 0;\n        \n        const multiplier = 2 / (period + 1);\n        let ema = prices[0];\n        \n        for (let i = 1; i < prices.length; i++) {\n            ema = (prices[i] - ema) * multiplier + ema;\n        }\n        \n        return ema;\n    }\n\n    calculateBollingerBands(prices, period = 20) {\n        const sma = prices.slice(-period).reduce((a, b) => a + b, 0) / period;\n        const variance = prices.slice(-period).reduce((sum, price) => \n            sum + Math.pow(price - sma, 2), 0) / period;\n        const stdDev = Math.sqrt(variance);\n        \n        const current = prices[prices.length - 1];\n        const position = (current - sma) / (stdDev * 2); // Position within bands\n        \n        return position; // -1 to 1, where -1 is lower band, 1 is upper band\n    }\n\n    calculateVolatility(prices) {\n        if (prices.length < 2) return 0;\n        \n        const returns = [];\n        for (let i = 1; i < prices.length; i++) {\n            returns.push((prices[i] - prices[i - 1]) / prices[i - 1]);\n        }\n        \n        const avgReturn = returns.reduce((a, b) => a + b, 0) / returns.length;\n        const variance = returns.reduce((sum, ret) => \n            sum + Math.pow(ret - avgReturn, 2), 0) / returns.length;\n        \n        return Math.sqrt(variance * 252); // Annualized volatility\n    }\n\n    calculateTrend(prices) {\n        if (prices.length < 2) return 0;\n        \n        // Simple linear regression\n        const n = prices.length;\n        const indices = Array.from({ length: n }, (_, i) => i);\n        \n        const sumX = indices.reduce((a, b) => a + b, 0);\n        const sumY = prices.reduce((a, b) => a + b, 0);\n        const sumXY = indices.reduce((sum, x, i) => sum + x * prices[i], 0);\n        const sumX2 = indices.reduce((sum, x) => sum + x * x, 0);\n        \n        const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n        \n        return slope; // Positive = uptrend, negative = downtrend\n    }\n\n    calculateMomentum(prices, period = 10) {\n        if (prices.length < period) return 0;\n        \n        const current = prices[prices.length - 1];\n        const past = prices[prices.length - period];\n        \n        return (current - past) / past;\n    }\n\n    /**\n     * Pattern detection methods\n     */\n    isGoldenCross(data) {\n        const sma50 = this.calculateSMA(data.prices, 50);\n        const sma200 = this.calculateSMA(data.prices, 200);\n        const prevSma50 = this.calculateSMA(data.prices.slice(0, -1), 50);\n        const prevSma200 = this.calculateSMA(data.prices.slice(0, -1), 200);\n        \n        return prevSma50 <= prevSma200 && sma50 > sma200;\n    }\n\n    isDeathCross(data) {\n        const sma50 = this.calculateSMA(data.prices, 50);\n        const sma200 = this.calculateSMA(data.prices, 200);\n        const prevSma50 = this.calculateSMA(data.prices.slice(0, -1), 50);\n        const prevSma200 = this.calculateSMA(data.prices.slice(0, -1), 200);\n        \n        return prevSma50 >= prevSma200 && sma50 < sma200;\n    }\n\n    isBullFlag(data) {\n        // Simplified bull flag detection\n        const recent = data.prices.slice(-20);\n        const trend = this.calculateTrend(recent);\n        const consolidation = this.calculateVolatility(recent.slice(-5));\n        \n        return trend > 0.02 && consolidation < 0.1;\n    }\n\n    isBearFlag(data) {\n        const recent = data.prices.slice(-20);\n        const trend = this.calculateTrend(recent);\n        const consolidation = this.calculateVolatility(recent.slice(-5));\n        \n        return trend < -0.02 && consolidation < 0.1;\n    }\n\n    isCupAndHandle(data) {\n        // Simplified cup and handle detection\n        if (data.prices.length < 50) return false;\n        \n        const prices = data.prices.slice(-50);\n        const midPoint = Math.floor(prices.length / 2);\n        const leftHigh = Math.max(...prices.slice(0, midPoint));\n        const bottom = Math.min(...prices.slice(midPoint - 10, midPoint + 10));\n        const rightHigh = Math.max(...prices.slice(midPoint));\n        \n        return (\n            Math.abs(leftHigh - rightHigh) / leftHigh < 0.05 &&\n            (leftHigh - bottom) / leftHigh > 0.1\n        );\n    }\n\n    isHeadAndShoulders(data) {\n        // Simplified head and shoulders detection\n        if (data.prices.length < 30) return false;\n        \n        const prices = data.prices.slice(-30);\n        const third = Math.floor(prices.length / 3);\n        \n        const leftShoulder = Math.max(...prices.slice(0, third));\n        const head = Math.max(...prices.slice(third, third * 2));\n        const rightShoulder = Math.max(...prices.slice(third * 2));\n        \n        return (\n            head > leftShoulder &&\n            head > rightShoulder &&\n            Math.abs(leftShoulder - rightShoulder) / leftShoulder < 0.05\n        );\n    }\n\n    isTriangle(data) {\n        // Simplified triangle pattern detection\n        const highs = [];\n        const lows = [];\n        const period = 5;\n        \n        for (let i = 0; i < data.prices.length - period; i += period) {\n            const slice = data.prices.slice(i, i + period);\n            highs.push(Math.max(...slice));\n            lows.push(Math.min(...slice));\n        }\n        \n        const highTrend = this.calculateTrend(highs);\n        const lowTrend = this.calculateTrend(lows);\n        \n        return Math.abs(highTrend) < 0.01 && lowTrend > 0.01;\n    }\n\n    isRange(data) {\n        const volatility = this.calculateVolatility(data.prices);\n        const trend = Math.abs(this.calculateTrend(data.prices));\n        \n        return volatility < 0.15 && trend < 0.001;\n    }\n\n    /**\n     * Helper methods\n     */\n    calculateSMA(prices, period) {\n        if (prices.length < period) return prices[prices.length - 1] || 0;\n        return prices.slice(-period).reduce((a, b) => a + b, 0) / period;\n    }\n\n    normalizeVolume(volume) {\n        // Normalize volume to 0-1 scale\n        const avgVolume = 10000000; // 10M average\n        return Math.min(volume / avgVolume, 2);\n    }\n\n    activate(x) {\n        // ReLU activation\n        return Array.isArray(x) ? x.map(v => Math.max(0, v)) : Math.max(0, x);\n    }\n\n    softmax(x) {\n        const max = Math.max(...x);\n        const exp = x.map(v => Math.exp(v - max));\n        const sum = exp.reduce((a, b) => a + b, 0);\n        return exp.map(v => v / sum);\n    }\n\n    matrixMultiply(vector, matrix) {\n        return matrix.map(row =>\n            row.reduce((sum, val, i) => sum + val * (vector[i] || 0), 0)\n        );\n    }\n\n    calculateError(prediction, target) {\n        const predArray = [\n            prediction.buyStrong,\n            prediction.buy,\n            prediction.hold,\n            prediction.sell,\n            prediction.sellStrong\n        ];\n        \n        return predArray.reduce((sum, val, i) => \n            sum + Math.pow(val - (target[i] || 0), 2), 0\n        );\n    }\n\n    encodeOutcome(result) {\n        // Encode trading outcome to neural network output format\n        const returnPercent = result.percentReturn;\n        \n        if (returnPercent > 10) return [1, 0, 0, 0, 0]; // Buy Strong\n        if (returnPercent > 3) return [0, 1, 0, 0, 0];  // Buy\n        if (returnPercent > -3) return [0, 0, 1, 0, 0]; // Hold\n        if (returnPercent > -10) return [0, 0, 0, 1, 0]; // Sell\n        return [0, 0, 0, 0, 1]; // Sell Strong\n    }\n\n    determineAction(prediction) {\n        const actions = ['buyStrong', 'buy', 'hold', 'sell', 'sellStrong'];\n        const values = [\n            prediction.buyStrong,\n            prediction.buy,\n            prediction.hold,\n            prediction.sell,\n            prediction.sellStrong\n        ];\n        \n        const maxIndex = values.indexOf(Math.max(...values));\n        return actions[maxIndex];\n    }\n\n    calculateExpectedReturn(prediction, patternPerformance) {\n        const baseReturn = \n            prediction.buyStrong * 15 +\n            prediction.buy * 7 +\n            prediction.hold * 0 +\n            prediction.sell * -7 +\n            prediction.sellStrong * -15;\n        \n        // Adjust based on pattern performance\n        const patternAdjustment = (patternPerformance.successRate - 0.5) * 10;\n        \n        return baseReturn + patternAdjustment;\n    }\n\n    calculateRisk(data) {\n        const volatility = this.calculateVolatility(data.prices);\n        const atr = this.calculateATR(data);\n        \n        return Math.min(volatility * atr, 1);\n    }\n\n    calculateATR(data, period = 14) {\n        // Average True Range calculation\n        if (!data.highs || !data.lows || data.highs.length < period) {\n            return 0.02; // Default 2%\n        }\n        \n        const trueRanges = [];\n        for (let i = 1; i < data.highs.length; i++) {\n            const high = data.highs[i];\n            const low = data.lows[i];\n            const prevClose = data.prices[i - 1];\n            \n            const tr = Math.max(\n                high - low,\n                Math.abs(high - prevClose),\n                Math.abs(low - prevClose)\n            );\n            trueRanges.push(tr);\n        }\n        \n        const atr = trueRanges.slice(-period).reduce((a, b) => a + b, 0) / period;\n        return atr / data.prices[data.prices.length - 1];\n    }\n\n    calculateStopLoss(data, action) {\n        const atr = this.calculateATR(data);\n        const currentPrice = data.currentPrice;\n        \n        if (action.includes('buy')) {\n            return currentPrice * (1 - atr * 2);\n        } else if (action.includes('sell')) {\n            return currentPrice * (1 + atr * 2);\n        }\n        return currentPrice;\n    }\n\n    calculateTakeProfit(data, action) {\n        const atr = this.calculateATR(data);\n        const currentPrice = data.currentPrice;\n        \n        if (action.includes('buy')) {\n            return currentPrice * (1 + atr * 3);\n        } else if (action.includes('sell')) {\n            return currentPrice * (1 - atr * 3);\n        }\n        return currentPrice;\n    }\n\n    calculatePositionSize(data, capital) {\n        const risk = this.calculateRisk(data);\n        const maxRisk = 0.02; // Max 2% risk per trade\n        \n        const positionSize = (capital * maxRisk) / risk;\n        return Math.min(positionSize, capital * 0.25); // Max 25% per position\n    }\n\n    generateReasoning(prediction, pattern, data) {\n        const reasons = [];\n        \n        // Add prediction reasoning\n        if (prediction.buyStrong > 0.5) {\n            reasons.push('Strong bullish signals detected');\n        } else if (prediction.buy > 0.5) {\n            reasons.push('Moderate bullish signals present');\n        } else if (prediction.sell > 0.5) {\n            reasons.push('Bearish indicators dominating');\n        }\n        \n        // Add pattern reasoning\n        if (pattern.patterns.length > 0) {\n            reasons.push(`Pattern detected: ${pattern.patterns.join(', ')}`);\n        }\n        \n        // Add technical reasoning\n        const rsi = this.calculateRSI(data.prices);\n        if (rsi < 30) reasons.push('RSI indicates oversold conditions');\n        if (rsi > 70) reasons.push('RSI indicates overbought conditions');\n        \n        // Add volume reasoning\n        if (data.volume > data.avgVolume * 1.5) {\n            reasons.push('Unusual volume detected');\n        }\n        \n        // Add confidence reasoning\n        reasons.push(`Model confidence: ${(prediction.confidence * 100).toFixed(1)}%`);\n        \n        return reasons.join('. ');\n    }\n\n    updateModelAccuracy() {\n        if (this.tradeHistory.length < 10) return;\n        \n        const recentTrades = this.tradeHistory.slice(-100);\n        const correctPredictions = recentTrades.filter(trade => \n            (trade.prediction === 'buy' && trade.result && trade.result.profit > 0) ||\n            (trade.prediction === 'sell' && trade.result && trade.result.profit > 0) ||\n            (trade.prediction === 'hold' && trade.result && Math.abs(trade.result.percentReturn) < 2)\n        ).length;\n        \n        this.model.accuracy = correctPredictions / recentTrades.length;\n        this.model.confidence = Math.min(this.model.accuracy * 1.2, 1);\n    }\n\n    calculateWinRate() {\n        if (this.tradeHistory.length === 0) return 0;\n        \n        const wins = this.tradeHistory.filter(t => t.result && t.result.profit > 0).length;\n        return wins / this.tradeHistory.length;\n    }\n\n    calculateAvgReturn() {\n        if (this.tradeHistory.length === 0) return 0;\n        \n        const totalReturn = this.tradeHistory.reduce((sum, trade) => \n            sum + (trade.result?.percentReturn || 0), 0\n        );\n        \n        return totalReturn / this.tradeHistory.length;\n    }\n\n    calculateOverallSharpe() {\n        if (this.tradeHistory.length < 2) return 0;\n        \n        const returns = this.tradeHistory.map(t => t.result?.percentReturn || 0);\n        const avgReturn = returns.reduce((a, b) => a + b, 0) / returns.length;\n        const variance = returns.reduce((sum, ret) => \n            sum + Math.pow(ret - avgReturn, 2), 0\n        ) / returns.length;\n        const stdDev = Math.sqrt(variance);\n        \n        return stdDev === 0 ? 0 : (avgReturn - 0.02) / stdDev; // 2% risk-free rate\n    }\n\n    calculateSharpeRatio(strategy) {\n        const trades = this.tradeHistory.filter(t => t.strategy === strategy);\n        if (trades.length < 2) return 0;\n        \n        const returns = trades.map(t => t.result?.percentReturn || 0);\n        const avgReturn = returns.reduce((a, b) => a + b, 0) / returns.length;\n        const variance = returns.reduce((sum, ret) => \n            sum + Math.pow(ret - avgReturn, 2), 0\n        ) / returns.length;\n        const stdDev = Math.sqrt(variance);\n        \n        return stdDev === 0 ? 0 : (avgReturn - 0.02) / stdDev;\n    }\n\n    calculateMaxDrawdown() {\n        if (this.tradeHistory.length === 0) return 0;\n        \n        let peak = 0;\n        let maxDrawdown = 0;\n        let runningTotal = 0;\n        \n        this.tradeHistory.forEach(trade => {\n            runningTotal += trade.result?.profit || 0;\n            if (runningTotal > peak) {\n                peak = runningTotal;\n            }\n            const drawdown = (peak - runningTotal) / peak;\n            if (drawdown > maxDrawdown) {\n                maxDrawdown = drawdown;\n            }\n        });\n        \n        return maxDrawdown;\n    }\n\n    calculateProfitFactor() {\n        const wins = this.tradeHistory\n            .filter(t => t.result && t.result.profit > 0)\n            .reduce((sum, t) => sum + t.result.profit, 0);\n        \n        const losses = Math.abs(this.tradeHistory\n            .filter(t => t.result && t.result.profit < 0)\n            .reduce((sum, t) => sum + t.result.profit, 0));\n        \n        return losses === 0 ? wins : wins / losses;\n    }\n\n    getMarketData(symbol, marketData) {\n        // Extract symbol-specific data from market data\n        return marketData[symbol] || {\n            symbol,\n            prices: [],\n            volume: 0,\n            currentPrice: 0,\n            highs: [],\n            lows: [],\n            vwap: 0,\n            callVolume: 0,\n            putVolume: 0,\n            unusualActivity: false,\n            socialSentiment: 0,\n            newsSentiment: 0,\n            marketCap: 0,\n            sectorStrength: 0,\n            correlationSPY: 0,\n            avgVolume: 0\n        };\n    }\n}\n\n// Export for use in React components\nexport default MLTradingSystem;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}