{"ast":null,"code":"/**\n * Advanced Options Flow Analysis Engine\n * Sophisticated analysis of unusual options activity and market sentiment\n */class FlowAnalysis{constructor(){this.flowPatterns={};this.whaleThresholds={premium:50000,// $50K+ premium\nvolume:100,// 100+ contracts\nunusualVolume:5// 5x average volume\n};this.sentimentWeights={callPutRatio:0.3,volumeProfile:0.25,premiumFlow:0.25,timeDecay:0.2};}// ==================== FLOW PATTERN ANALYSIS ====================\n/**\n     * Analyze options flow patterns and identify whale activity\n     */analyzeFlowPatterns(flowData){if(!flowData||flowData.length===0){return this.getEmptyAnalysis();}const analysis={whaleActivity:this.detectWhaleActivity(flowData),sentimentAnalysis:this.analyzeSentiment(flowData),volumeAnalysis:this.analyzeVolume(flowData),premiumFlow:this.analyzePremiumFlow(flowData),timeAnalysis:this.analyzeTimePatterns(flowData),unusualActivity:this.detectUnusualActivity(flowData),gamma:this.analyzeGammaExposure(flowData),strategies:this.identifyStrategies(flowData)};analysis.overallSignal=this.calculateOverallFlowSignal(analysis);return analysis;}/**\n     * Detect whale activity (large premium trades)\n     */detectWhaleActivity(flowData){const whaleFlows=flowData.filter(flow=>{const premium=flow.premium||flow.total_premium||0;const volume=flow.volume||0;return premium>=this.whaleThresholds.premium||volume>=this.whaleThresholds.volume;});const totalWhalePremium=whaleFlows.reduce((sum,flow)=>sum+(flow.premium||flow.total_premium||0),0);const whaleCallPremium=whaleFlows.filter(f=>(f.type||f.call_put||'').toLowerCase().includes('call')).reduce((sum,flow)=>sum+(flow.premium||flow.total_premium||0),0);const whalePutPremium=whaleFlows.filter(f=>(f.type||f.call_put||'').toLowerCase().includes('put')).reduce((sum,flow)=>sum+(flow.premium||flow.total_premium||0),0);return{totalWhaleFlows:whaleFlows.length,totalWhalePremium:totalWhalePremium,whaleCallPremium:whaleCallPremium,whalePutPremium:whalePutPremium,whaleCallPutRatio:whalePutPremium>0?whaleCallPremium/whalePutPremium:whaleCallPremium>0?999:0,averageWhalePremium:whaleFlows.length>0?totalWhalePremium/whaleFlows.length:0,largestFlow:whaleFlows.reduce((max,flow)=>Math.max(max,flow.premium||flow.total_premium||0),0),whaleFlows:whaleFlows.slice(0,10)// Top 10 whale flows\n};}/**\n     * Analyze overall market sentiment from flow\n     */analyzeSentiment(flowData){const calls=flowData.filter(f=>(f.type||f.call_put||'').toLowerCase().includes('call'));const puts=flowData.filter(f=>(f.type||f.call_put||'').toLowerCase().includes('put'));const callVolume=calls.reduce((sum,f)=>sum+(f.volume||0),0);const putVolume=puts.reduce((sum,f)=>sum+(f.volume||0),0);const callPremium=calls.reduce((sum,f)=>sum+(f.premium||f.total_premium||0),0);const putPremium=puts.reduce((sum,f)=>sum+(f.premium||f.total_premium||0),0);const callPutRatio=putVolume>0?callVolume/putVolume:callVolume>0?999:1;const premiumRatio=putPremium>0?callPremium/putPremium:callPremium>0?999:1;// Calculate sentiment score (0-100, 50 = neutral)\nlet sentimentScore=50;// Call/Put ratio influence (higher ratio = more bullish)\nif(callPutRatio>1.5)sentimentScore+=15;else if(callPutRatio>1.2)sentimentScore+=10;else if(callPutRatio>1.0)sentimentScore+=5;else if(callPutRatio<0.7)sentimentScore-=15;else if(callPutRatio<0.8)sentimentScore-=10;else if(callPutRatio<0.9)sentimentScore-=5;// Premium flow influence\nif(premiumRatio>2.0)sentimentScore+=10;else if(premiumRatio<0.5)sentimentScore-=10;return{callCount:calls.length,putCount:puts.length,callVolume:callVolume,putVolume:putVolume,callPremium:callPremium,putPremium:putPremium,callPutRatio:callPutRatio,premiumRatio:premiumRatio,sentimentScore:Math.max(0,Math.min(100,sentimentScore)),sentiment:sentimentScore>70?'VERY_BULLISH':sentimentScore>60?'BULLISH':sentimentScore>40?'NEUTRAL':sentimentScore>30?'BEARISH':'VERY_BEARISH'};}/**\n     * Analyze volume patterns\n     */analyzeVolume(flowData){const totalVolume=flowData.reduce((sum,f)=>sum+(f.volume||0),0);const totalContracts=flowData.length;const avgVolumePerContract=totalContracts>0?totalVolume/totalContracts:0;// Group by strike ranges for volume distribution\nconst strikes=flowData.map(f=>f.strike||f.strike_price||0).filter(s=>s>0);const strikeVolumes={};flowData.forEach(flow=>{const strike=flow.strike||flow.strike_price||0;if(strike>0){strikeVolumes[strike]=(strikeVolumes[strike]||0)+(flow.volume||0);}});const maxVolumeStrike=Object.keys(strikeVolumes).reduce((maxStrike,strike)=>strikeVolumes[strike]>(strikeVolumes[maxStrike]||0)?strike:maxStrike,'0');return{totalVolume:totalVolume,totalContracts:totalContracts,avgVolumePerContract:avgVolumePerContract,maxVolumeStrike:parseFloat(maxVolumeStrike),maxVolumeAmount:strikeVolumes[maxVolumeStrike]||0,strikeDistribution:Object.keys(strikeVolumes).length,volumeConcentration:totalVolume>0?(strikeVolumes[maxVolumeStrike]||0)/totalVolume:0};}/**\n     * Analyze premium flow patterns\n     */analyzePremiumFlow(flowData){const totalPremium=flowData.reduce((sum,f)=>sum+(f.premium||f.total_premium||0),0);const premiumByStrike={};flowData.forEach(flow=>{const strike=flow.strike||flow.strike_price||0;const premium=flow.premium||flow.total_premium||0;if(strike>0&&premium>0){premiumByStrike[strike]=(premiumByStrike[strike]||0)+premium;}});const largestPremiumFlow=flowData.reduce((max,flow)=>{const premium=flow.premium||flow.total_premium||0;return premium>(max.premium||max.total_premium||0)?flow:max;},flowData[0]||{});return{totalPremium:totalPremium,avgPremiumPerFlow:flowData.length>0?totalPremium/flowData.length:0,largestPremiumFlow:largestPremiumFlow,premiumDistribution:premiumByStrike,highPremiumFlows:flowData.filter(f=>(f.premium||f.total_premium||0)>this.whaleThresholds.premium).length};}/**\n     * Analyze time-based patterns\n     */analyzeTimePatterns(flowData){const now=Date.now();const recentFlows=flowData.filter(flow=>{const flowTime=flow.timestamp||flow.time||now;return now-flowTime<3600000;// Last hour\n});// Group by expiration dates\nconst expirationGroups={};flowData.forEach(flow=>{const exp=flow.expiration||flow.exp_date||'unknown';expirationGroups[exp]=(expirationGroups[exp]||0)+1;});const mostPopularExpiration=Object.keys(expirationGroups).reduce((maxExp,exp)=>expirationGroups[exp]>(expirationGroups[maxExp]||0)?exp:maxExp,'unknown');return{totalFlows:flowData.length,recentFlows:recentFlows.length,recentActivity:flowData.length>0?recentFlows.length/flowData.length:0,expirationDistribution:expirationGroups,mostPopularExpiration:mostPopularExpiration,shortTermFlows:Object.keys(expirationGroups).filter(exp=>this.isShortTermExpiration(exp)).length};}/**\n     * Detect unusual activity patterns\n     */detectUnusualActivity(flowData){const unusualPatterns=[];// Large single trades\nconst largeTrades=flowData.filter(f=>(f.premium||f.total_premium||0)>this.whaleThresholds.premium*2);if(largeTrades.length>0){unusualPatterns.push({type:'LARGE_TRADES',count:largeTrades.length,description:\"\".concat(largeTrades.length,\" trades with premium > $\").concat(this.whaleThresholds.premium*2),significance:'HIGH'});}// Concentrated strikes\nconst strikes={};flowData.forEach(f=>{const strike=f.strike||f.strike_price||0;strikes[strike]=(strikes[strike]||0)+1;});const maxStrikes=Math.max(...Object.values(strikes));if(maxStrikes>flowData.length*0.3){unusualPatterns.push({type:'STRIKE_CONCENTRATION',count:maxStrikes,description:\"Heavy concentration at single strike level\",significance:'MEDIUM'});}// Time concentration\nconst hourGroups={};flowData.forEach(f=>{const time=new Date(f.timestamp||f.time||Date.now());const hour=time.getHours();hourGroups[hour]=(hourGroups[hour]||0)+1;});const maxHourActivity=Math.max(...Object.values(hourGroups));if(maxHourActivity>flowData.length*0.5){unusualPatterns.push({type:'TIME_CONCENTRATION',count:maxHourActivity,description:\"Heavy activity concentrated in single hour\",significance:'MEDIUM'});}return unusualPatterns;}/**\n     * Analyze gamma exposure implications\n     */analyzeGammaExposure(flowData){// Simplified gamma analysis\nconst callFlows=flowData.filter(f=>(f.type||f.call_put||'').toLowerCase().includes('call'));const putFlows=flowData.filter(f=>(f.type||f.call_put||'').toLowerCase().includes('put'));const totalCallVolume=callFlows.reduce((sum,f)=>sum+(f.volume||0),0);const totalPutVolume=putFlows.reduce((sum,f)=>sum+(f.volume||0),0);// Estimate net gamma exposure (simplified)\nconst netGammaExposure=totalCallVolume-totalPutVolume;return{callGamma:totalCallVolume,putGamma:totalPutVolume,netGamma:netGammaExposure,gammaImplication:netGammaExposure>1000?'POSITIVE_GAMMA':netGammaExposure<-1000?'NEGATIVE_GAMMA':'NEUTRAL_GAMMA',volatilityImpact:Math.abs(netGammaExposure)>2000?'HIGH':Math.abs(netGammaExposure)>500?'MEDIUM':'LOW'};}/**\n     * Identify potential trading strategies from flow\n     */identifyStrategies(flowData){const strategies=[];// Group by symbol and analyze\nconst symbolGroups={};flowData.forEach(flow=>{const symbol=flow.symbol||flow.ticker||'UNKNOWN';if(!symbolGroups[symbol])symbolGroups[symbol]=[];symbolGroups[symbol].push(flow);});Object.keys(symbolGroups).forEach(symbol=>{const flows=symbolGroups[symbol];if(flows.length<2)return;const calls=flows.filter(f=>(f.type||f.call_put||'').toLowerCase().includes('call'));const puts=flows.filter(f=>(f.type||f.call_put||'').toLowerCase().includes('put'));// Straddle/Strangle detection\nif(calls.length>0&&puts.length>0){const callStrikes=calls.map(f=>f.strike||f.strike_price||0);const putStrikes=puts.map(f=>f.strike||f.strike_price||0);// Check for same strikes (straddle)\nconst commonStrikes=callStrikes.filter(strike=>putStrikes.includes(strike));if(commonStrikes.length>0){strategies.push({type:'LONG_STRADDLE',symbol:symbol,strikes:commonStrikes,confidence:80,implication:'VOLATILITY_PLAY'});}// Check for different strikes (strangle)\nif(commonStrikes.length===0&&calls.length>0&&puts.length>0){strategies.push({type:'STRANGLE',symbol:symbol,callStrikes:[...new Set(callStrikes)],putStrikes:[...new Set(putStrikes)],confidence:70,implication:'VOLATILITY_PLAY'});}}// Sweep detection (large volume at specific strike)\nflows.forEach(flow=>{const volume=flow.volume||0;const premium=flow.premium||flow.total_premium||0;if(volume>500||premium>100000){strategies.push({type:'SWEEP',symbol:symbol,strike:flow.strike||flow.strike_price,volume:volume,premium:premium,confidence:90,implication:'DIRECTIONAL_BET'});}});});return strategies;}/**\n     * Calculate overall flow signal\n     */calculateOverallFlowSignal(analysis){let bullishScore=0;let bearishScore=0;let totalWeight=0;// Sentiment analysis weight\nconst sentimentWeight=this.sentimentWeights.callPutRatio;if(analysis.sentimentAnalysis.sentimentScore>60){bullishScore+=sentimentWeight*(analysis.sentimentAnalysis.sentimentScore-50)/50;}else if(analysis.sentimentAnalysis.sentimentScore<40){bearishScore+=sentimentWeight*(50-analysis.sentimentAnalysis.sentimentScore)/50;}totalWeight+=sentimentWeight;// Whale activity weight\nconst whaleWeight=this.sentimentWeights.premiumFlow;if(analysis.whaleActivity.whaleCallPutRatio>1.5){bullishScore+=whaleWeight*0.8;}else if(analysis.whaleActivity.whaleCallPutRatio<0.7){bearishScore+=whaleWeight*0.8;}totalWeight+=whaleWeight;// Volume analysis weight\nconst volumeWeight=this.sentimentWeights.volumeProfile;if(analysis.volumeAnalysis.volumeConcentration>0.7){// High concentration might indicate strong conviction\nif(analysis.sentimentAnalysis.sentimentScore>50){bullishScore+=volumeWeight*0.6;}else{bearishScore+=volumeWeight*0.6;}}totalWeight+=volumeWeight;const finalScore=totalWeight>0?(bullishScore-bearishScore)/totalWeight:0;const confidence=Math.abs(finalScore)*100;return{signal:finalScore>0.3?'BULLISH':finalScore>0.1?'SLIGHTLY_BULLISH':finalScore<-0.3?'BEARISH':finalScore<-0.1?'SLIGHTLY_BEARISH':'NEUTRAL',confidence:Math.min(confidence,95),score:finalScore,components:{sentimentContribution:(bullishScore-bearishScore)*sentimentWeight,whaleContribution:analysis.whaleActivity.whaleCallPutRatio,volumeContribution:analysis.volumeAnalysis.volumeConcentration}};}// ==================== HELPER METHODS ====================\nisShortTermExpiration(expiration){if(!expiration||expiration==='unknown')return false;try{const expDate=new Date(expiration);const now=new Date();const daysToExp=(expDate-now)/(1000*60*60*24);return daysToExp<=7;// 7 days or less\n}catch(_unused){return false;}}getEmptyAnalysis(){return{whaleActivity:{totalWhaleFlows:0,totalWhalePremium:0,whaleCallPremium:0,whalePutPremium:0,whaleCallPutRatio:0,averageWhalePremium:0,largestFlow:0,whaleFlows:[]},sentimentAnalysis:{callCount:0,putCount:0,callVolume:0,putVolume:0,callPremium:0,putPremium:0,callPutRatio:1,premiumRatio:1,sentimentScore:50,sentiment:'NEUTRAL'},overallSignal:{signal:'NO_DATA',confidence:0,score:0}};}}export default new FlowAnalysis();","map":{"version":3,"names":["FlowAnalysis","constructor","flowPatterns","whaleThresholds","premium","volume","unusualVolume","sentimentWeights","callPutRatio","volumeProfile","premiumFlow","timeDecay","analyzeFlowPatterns","flowData","length","getEmptyAnalysis","analysis","whaleActivity","detectWhaleActivity","sentimentAnalysis","analyzeSentiment","volumeAnalysis","analyzeVolume","analyzePremiumFlow","timeAnalysis","analyzeTimePatterns","unusualActivity","detectUnusualActivity","gamma","analyzeGammaExposure","strategies","identifyStrategies","overallSignal","calculateOverallFlowSignal","whaleFlows","filter","flow","total_premium","totalWhalePremium","reduce","sum","whaleCallPremium","f","type","call_put","toLowerCase","includes","whalePutPremium","totalWhaleFlows","whaleCallPutRatio","averageWhalePremium","largestFlow","max","Math","slice","calls","puts","callVolume","putVolume","callPremium","putPremium","premiumRatio","sentimentScore","callCount","putCount","min","sentiment","totalVolume","totalContracts","avgVolumePerContract","strikes","map","strike","strike_price","s","strikeVolumes","forEach","maxVolumeStrike","Object","keys","maxStrike","parseFloat","maxVolumeAmount","strikeDistribution","volumeConcentration","totalPremium","premiumByStrike","largestPremiumFlow","avgPremiumPerFlow","premiumDistribution","highPremiumFlows","now","Date","recentFlows","flowTime","timestamp","time","expirationGroups","exp","expiration","exp_date","mostPopularExpiration","maxExp","totalFlows","recentActivity","expirationDistribution","shortTermFlows","isShortTermExpiration","unusualPatterns","largeTrades","push","count","description","concat","significance","maxStrikes","values","hourGroups","hour","getHours","maxHourActivity","callFlows","putFlows","totalCallVolume","totalPutVolume","netGammaExposure","callGamma","putGamma","netGamma","gammaImplication","volatilityImpact","abs","symbolGroups","symbol","ticker","flows","callStrikes","putStrikes","commonStrikes","confidence","implication","Set","bullishScore","bearishScore","totalWeight","sentimentWeight","whaleWeight","volumeWeight","finalScore","signal","score","components","sentimentContribution","whaleContribution","volumeContribution","expDate","daysToExp","_unused"],"sources":["/home/user/webapp/src/services/flowAnalysis.js"],"sourcesContent":["/**\n * Advanced Options Flow Analysis Engine\n * Sophisticated analysis of unusual options activity and market sentiment\n */\n\nclass FlowAnalysis {\n    constructor() {\n        this.flowPatterns = {};\n        this.whaleThresholds = {\n            premium: 50000,    // $50K+ premium\n            volume: 100,       // 100+ contracts\n            unusualVolume: 5   // 5x average volume\n        };\n        \n        this.sentimentWeights = {\n            callPutRatio: 0.3,\n            volumeProfile: 0.25,\n            premiumFlow: 0.25,\n            timeDecay: 0.2\n        };\n    }\n\n    // ==================== FLOW PATTERN ANALYSIS ====================\n\n    /**\n     * Analyze options flow patterns and identify whale activity\n     */\n    analyzeFlowPatterns(flowData) {\n        if (!flowData || flowData.length === 0) {\n            return this.getEmptyAnalysis();\n        }\n\n        const analysis = {\n            whaleActivity: this.detectWhaleActivity(flowData),\n            sentimentAnalysis: this.analyzeSentiment(flowData),\n            volumeAnalysis: this.analyzeVolume(flowData),\n            premiumFlow: this.analyzePremiumFlow(flowData),\n            timeAnalysis: this.analyzeTimePatterns(flowData),\n            unusualActivity: this.detectUnusualActivity(flowData),\n            gamma: this.analyzeGammaExposure(flowData),\n            strategies: this.identifyStrategies(flowData)\n        };\n\n        analysis.overallSignal = this.calculateOverallFlowSignal(analysis);\n        return analysis;\n    }\n\n    /**\n     * Detect whale activity (large premium trades)\n     */\n    detectWhaleActivity(flowData) {\n        const whaleFlows = flowData.filter(flow => {\n            const premium = flow.premium || flow.total_premium || 0;\n            const volume = flow.volume || 0;\n            \n            return premium >= this.whaleThresholds.premium || \n                   volume >= this.whaleThresholds.volume;\n        });\n\n        const totalWhalePremium = whaleFlows.reduce((sum, flow) => \n            sum + (flow.premium || flow.total_premium || 0), 0);\n        \n        const whaleCallPremium = whaleFlows\n            .filter(f => (f.type || f.call_put || '').toLowerCase().includes('call'))\n            .reduce((sum, flow) => sum + (flow.premium || flow.total_premium || 0), 0);\n        \n        const whalePutPremium = whaleFlows\n            .filter(f => (f.type || f.call_put || '').toLowerCase().includes('put'))\n            .reduce((sum, flow) => sum + (flow.premium || flow.total_premium || 0), 0);\n\n        return {\n            totalWhaleFlows: whaleFlows.length,\n            totalWhalePremium: totalWhalePremium,\n            whaleCallPremium: whaleCallPremium,\n            whalePutPremium: whalePutPremium,\n            whaleCallPutRatio: whalePutPremium > 0 ? whaleCallPremium / whalePutPremium : \n                              whaleCallPremium > 0 ? 999 : 0,\n            averageWhalePremium: whaleFlows.length > 0 ? totalWhalePremium / whaleFlows.length : 0,\n            largestFlow: whaleFlows.reduce((max, flow) => \n                Math.max(max, flow.premium || flow.total_premium || 0), 0),\n            whaleFlows: whaleFlows.slice(0, 10) // Top 10 whale flows\n        };\n    }\n\n    /**\n     * Analyze overall market sentiment from flow\n     */\n    analyzeSentiment(flowData) {\n        const calls = flowData.filter(f => (f.type || f.call_put || '').toLowerCase().includes('call'));\n        const puts = flowData.filter(f => (f.type || f.call_put || '').toLowerCase().includes('put'));\n        \n        const callVolume = calls.reduce((sum, f) => sum + (f.volume || 0), 0);\n        const putVolume = puts.reduce((sum, f) => sum + (f.volume || 0), 0);\n        \n        const callPremium = calls.reduce((sum, f) => sum + (f.premium || f.total_premium || 0), 0);\n        const putPremium = puts.reduce((sum, f) => sum + (f.premium || f.total_premium || 0), 0);\n        \n        const callPutRatio = putVolume > 0 ? callVolume / putVolume : callVolume > 0 ? 999 : 1;\n        const premiumRatio = putPremium > 0 ? callPremium / putPremium : callPremium > 0 ? 999 : 1;\n        \n        // Calculate sentiment score (0-100, 50 = neutral)\n        let sentimentScore = 50;\n        \n        // Call/Put ratio influence (higher ratio = more bullish)\n        if (callPutRatio > 1.5) sentimentScore += 15;\n        else if (callPutRatio > 1.2) sentimentScore += 10;\n        else if (callPutRatio > 1.0) sentimentScore += 5;\n        else if (callPutRatio < 0.7) sentimentScore -= 15;\n        else if (callPutRatio < 0.8) sentimentScore -= 10;\n        else if (callPutRatio < 0.9) sentimentScore -= 5;\n        \n        // Premium flow influence\n        if (premiumRatio > 2.0) sentimentScore += 10;\n        else if (premiumRatio < 0.5) sentimentScore -= 10;\n        \n        return {\n            callCount: calls.length,\n            putCount: puts.length,\n            callVolume: callVolume,\n            putVolume: putVolume,\n            callPremium: callPremium,\n            putPremium: putPremium,\n            callPutRatio: callPutRatio,\n            premiumRatio: premiumRatio,\n            sentimentScore: Math.max(0, Math.min(100, sentimentScore)),\n            sentiment: sentimentScore > 70 ? 'VERY_BULLISH' :\n                      sentimentScore > 60 ? 'BULLISH' :\n                      sentimentScore > 40 ? 'NEUTRAL' :\n                      sentimentScore > 30 ? 'BEARISH' : 'VERY_BEARISH'\n        };\n    }\n\n    /**\n     * Analyze volume patterns\n     */\n    analyzeVolume(flowData) {\n        const totalVolume = flowData.reduce((sum, f) => sum + (f.volume || 0), 0);\n        const totalContracts = flowData.length;\n        const avgVolumePerContract = totalContracts > 0 ? totalVolume / totalContracts : 0;\n        \n        // Group by strike ranges for volume distribution\n        const strikes = flowData.map(f => f.strike || f.strike_price || 0).filter(s => s > 0);\n        const strikeVolumes = {};\n        \n        flowData.forEach(flow => {\n            const strike = flow.strike || flow.strike_price || 0;\n            if (strike > 0) {\n                strikeVolumes[strike] = (strikeVolumes[strike] || 0) + (flow.volume || 0);\n            }\n        });\n        \n        const maxVolumeStrike = Object.keys(strikeVolumes).reduce((maxStrike, strike) => \n            strikeVolumes[strike] > (strikeVolumes[maxStrike] || 0) ? strike : maxStrike, '0');\n        \n        return {\n            totalVolume: totalVolume,\n            totalContracts: totalContracts,\n            avgVolumePerContract: avgVolumePerContract,\n            maxVolumeStrike: parseFloat(maxVolumeStrike),\n            maxVolumeAmount: strikeVolumes[maxVolumeStrike] || 0,\n            strikeDistribution: Object.keys(strikeVolumes).length,\n            volumeConcentration: totalVolume > 0 ? (strikeVolumes[maxVolumeStrike] || 0) / totalVolume : 0\n        };\n    }\n\n    /**\n     * Analyze premium flow patterns\n     */\n    analyzePremiumFlow(flowData) {\n        const totalPremium = flowData.reduce((sum, f) => \n            sum + (f.premium || f.total_premium || 0), 0);\n        \n        const premiumByStrike = {};\n        flowData.forEach(flow => {\n            const strike = flow.strike || flow.strike_price || 0;\n            const premium = flow.premium || flow.total_premium || 0;\n            if (strike > 0 && premium > 0) {\n                premiumByStrike[strike] = (premiumByStrike[strike] || 0) + premium;\n            }\n        });\n        \n        const largestPremiumFlow = flowData.reduce((max, flow) => {\n            const premium = flow.premium || flow.total_premium || 0;\n            return premium > (max.premium || max.total_premium || 0) ? flow : max;\n        }, flowData[0] || {});\n        \n        return {\n            totalPremium: totalPremium,\n            avgPremiumPerFlow: flowData.length > 0 ? totalPremium / flowData.length : 0,\n            largestPremiumFlow: largestPremiumFlow,\n            premiumDistribution: premiumByStrike,\n            highPremiumFlows: flowData.filter(f => \n                (f.premium || f.total_premium || 0) > this.whaleThresholds.premium\n            ).length\n        };\n    }\n\n    /**\n     * Analyze time-based patterns\n     */\n    analyzeTimePatterns(flowData) {\n        const now = Date.now();\n        const recentFlows = flowData.filter(flow => {\n            const flowTime = flow.timestamp || flow.time || now;\n            return (now - flowTime) < 3600000; // Last hour\n        });\n        \n        // Group by expiration dates\n        const expirationGroups = {};\n        flowData.forEach(flow => {\n            const exp = flow.expiration || flow.exp_date || 'unknown';\n            expirationGroups[exp] = (expirationGroups[exp] || 0) + 1;\n        });\n        \n        const mostPopularExpiration = Object.keys(expirationGroups).reduce((maxExp, exp) => \n            expirationGroups[exp] > (expirationGroups[maxExp] || 0) ? exp : maxExp, 'unknown');\n        \n        return {\n            totalFlows: flowData.length,\n            recentFlows: recentFlows.length,\n            recentActivity: flowData.length > 0 ? recentFlows.length / flowData.length : 0,\n            expirationDistribution: expirationGroups,\n            mostPopularExpiration: mostPopularExpiration,\n            shortTermFlows: Object.keys(expirationGroups).filter(exp => \n                this.isShortTermExpiration(exp)).length\n        };\n    }\n\n    /**\n     * Detect unusual activity patterns\n     */\n    detectUnusualActivity(flowData) {\n        const unusualPatterns = [];\n        \n        // Large single trades\n        const largeTrades = flowData.filter(f => \n            (f.premium || f.total_premium || 0) > this.whaleThresholds.premium * 2);\n        if (largeTrades.length > 0) {\n            unusualPatterns.push({\n                type: 'LARGE_TRADES',\n                count: largeTrades.length,\n                description: `${largeTrades.length} trades with premium > $${this.whaleThresholds.premium * 2}`,\n                significance: 'HIGH'\n            });\n        }\n        \n        // Concentrated strikes\n        const strikes = {};\n        flowData.forEach(f => {\n            const strike = f.strike || f.strike_price || 0;\n            strikes[strike] = (strikes[strike] || 0) + 1;\n        });\n        \n        const maxStrikes = Math.max(...Object.values(strikes));\n        if (maxStrikes > flowData.length * 0.3) {\n            unusualPatterns.push({\n                type: 'STRIKE_CONCENTRATION',\n                count: maxStrikes,\n                description: `Heavy concentration at single strike level`,\n                significance: 'MEDIUM'\n            });\n        }\n        \n        // Time concentration\n        const hourGroups = {};\n        flowData.forEach(f => {\n            const time = new Date(f.timestamp || f.time || Date.now());\n            const hour = time.getHours();\n            hourGroups[hour] = (hourGroups[hour] || 0) + 1;\n        });\n        \n        const maxHourActivity = Math.max(...Object.values(hourGroups));\n        if (maxHourActivity > flowData.length * 0.5) {\n            unusualPatterns.push({\n                type: 'TIME_CONCENTRATION',\n                count: maxHourActivity,\n                description: `Heavy activity concentrated in single hour`,\n                significance: 'MEDIUM'\n            });\n        }\n        \n        return unusualPatterns;\n    }\n\n    /**\n     * Analyze gamma exposure implications\n     */\n    analyzeGammaExposure(flowData) {\n        // Simplified gamma analysis\n        const callFlows = flowData.filter(f => (f.type || f.call_put || '').toLowerCase().includes('call'));\n        const putFlows = flowData.filter(f => (f.type || f.call_put || '').toLowerCase().includes('put'));\n        \n        const totalCallVolume = callFlows.reduce((sum, f) => sum + (f.volume || 0), 0);\n        const totalPutVolume = putFlows.reduce((sum, f) => sum + (f.volume || 0), 0);\n        \n        // Estimate net gamma exposure (simplified)\n        const netGammaExposure = totalCallVolume - totalPutVolume;\n        \n        return {\n            callGamma: totalCallVolume,\n            putGamma: totalPutVolume,\n            netGamma: netGammaExposure,\n            gammaImplication: netGammaExposure > 1000 ? 'POSITIVE_GAMMA' :\n                            netGammaExposure < -1000 ? 'NEGATIVE_GAMMA' : 'NEUTRAL_GAMMA',\n            volatilityImpact: Math.abs(netGammaExposure) > 2000 ? 'HIGH' : \n                            Math.abs(netGammaExposure) > 500 ? 'MEDIUM' : 'LOW'\n        };\n    }\n\n    /**\n     * Identify potential trading strategies from flow\n     */\n    identifyStrategies(flowData) {\n        const strategies = [];\n        \n        // Group by symbol and analyze\n        const symbolGroups = {};\n        flowData.forEach(flow => {\n            const symbol = flow.symbol || flow.ticker || 'UNKNOWN';\n            if (!symbolGroups[symbol]) symbolGroups[symbol] = [];\n            symbolGroups[symbol].push(flow);\n        });\n        \n        Object.keys(symbolGroups).forEach(symbol => {\n            const flows = symbolGroups[symbol];\n            if (flows.length < 2) return;\n            \n            const calls = flows.filter(f => (f.type || f.call_put || '').toLowerCase().includes('call'));\n            const puts = flows.filter(f => (f.type || f.call_put || '').toLowerCase().includes('put'));\n            \n            // Straddle/Strangle detection\n            if (calls.length > 0 && puts.length > 0) {\n                const callStrikes = calls.map(f => f.strike || f.strike_price || 0);\n                const putStrikes = puts.map(f => f.strike || f.strike_price || 0);\n                \n                // Check for same strikes (straddle)\n                const commonStrikes = callStrikes.filter(strike => putStrikes.includes(strike));\n                if (commonStrikes.length > 0) {\n                    strategies.push({\n                        type: 'LONG_STRADDLE',\n                        symbol: symbol,\n                        strikes: commonStrikes,\n                        confidence: 80,\n                        implication: 'VOLATILITY_PLAY'\n                    });\n                }\n                \n                // Check for different strikes (strangle)\n                if (commonStrikes.length === 0 && calls.length > 0 && puts.length > 0) {\n                    strategies.push({\n                        type: 'STRANGLE',\n                        symbol: symbol,\n                        callStrikes: [...new Set(callStrikes)],\n                        putStrikes: [...new Set(putStrikes)],\n                        confidence: 70,\n                        implication: 'VOLATILITY_PLAY'\n                    });\n                }\n            }\n            \n            // Sweep detection (large volume at specific strike)\n            flows.forEach(flow => {\n                const volume = flow.volume || 0;\n                const premium = flow.premium || flow.total_premium || 0;\n                \n                if (volume > 500 || premium > 100000) {\n                    strategies.push({\n                        type: 'SWEEP',\n                        symbol: symbol,\n                        strike: flow.strike || flow.strike_price,\n                        volume: volume,\n                        premium: premium,\n                        confidence: 90,\n                        implication: 'DIRECTIONAL_BET'\n                    });\n                }\n            });\n        });\n        \n        return strategies;\n    }\n\n    /**\n     * Calculate overall flow signal\n     */\n    calculateOverallFlowSignal(analysis) {\n        let bullishScore = 0;\n        let bearishScore = 0;\n        let totalWeight = 0;\n        \n        // Sentiment analysis weight\n        const sentimentWeight = this.sentimentWeights.callPutRatio;\n        if (analysis.sentimentAnalysis.sentimentScore > 60) {\n            bullishScore += sentimentWeight * (analysis.sentimentAnalysis.sentimentScore - 50) / 50;\n        } else if (analysis.sentimentAnalysis.sentimentScore < 40) {\n            bearishScore += sentimentWeight * (50 - analysis.sentimentAnalysis.sentimentScore) / 50;\n        }\n        totalWeight += sentimentWeight;\n        \n        // Whale activity weight\n        const whaleWeight = this.sentimentWeights.premiumFlow;\n        if (analysis.whaleActivity.whaleCallPutRatio > 1.5) {\n            bullishScore += whaleWeight * 0.8;\n        } else if (analysis.whaleActivity.whaleCallPutRatio < 0.7) {\n            bearishScore += whaleWeight * 0.8;\n        }\n        totalWeight += whaleWeight;\n        \n        // Volume analysis weight\n        const volumeWeight = this.sentimentWeights.volumeProfile;\n        if (analysis.volumeAnalysis.volumeConcentration > 0.7) {\n            // High concentration might indicate strong conviction\n            if (analysis.sentimentAnalysis.sentimentScore > 50) {\n                bullishScore += volumeWeight * 0.6;\n            } else {\n                bearishScore += volumeWeight * 0.6;\n            }\n        }\n        totalWeight += volumeWeight;\n        \n        const finalScore = totalWeight > 0 ? (bullishScore - bearishScore) / totalWeight : 0;\n        const confidence = Math.abs(finalScore) * 100;\n        \n        return {\n            signal: finalScore > 0.3 ? 'BULLISH' :\n                   finalScore > 0.1 ? 'SLIGHTLY_BULLISH' :\n                   finalScore < -0.3 ? 'BEARISH' :\n                   finalScore < -0.1 ? 'SLIGHTLY_BEARISH' : 'NEUTRAL',\n            confidence: Math.min(confidence, 95),\n            score: finalScore,\n            components: {\n                sentimentContribution: (bullishScore - bearishScore) * sentimentWeight,\n                whaleContribution: analysis.whaleActivity.whaleCallPutRatio,\n                volumeContribution: analysis.volumeAnalysis.volumeConcentration\n            }\n        };\n    }\n\n    // ==================== HELPER METHODS ====================\n\n    isShortTermExpiration(expiration) {\n        if (!expiration || expiration === 'unknown') return false;\n        \n        try {\n            const expDate = new Date(expiration);\n            const now = new Date();\n            const daysToExp = (expDate - now) / (1000 * 60 * 60 * 24);\n            return daysToExp <= 7; // 7 days or less\n        } catch {\n            return false;\n        }\n    }\n\n    getEmptyAnalysis() {\n        return {\n            whaleActivity: {\n                totalWhaleFlows: 0,\n                totalWhalePremium: 0,\n                whaleCallPremium: 0,\n                whalePutPremium: 0,\n                whaleCallPutRatio: 0,\n                averageWhalePremium: 0,\n                largestFlow: 0,\n                whaleFlows: []\n            },\n            sentimentAnalysis: {\n                callCount: 0,\n                putCount: 0,\n                callVolume: 0,\n                putVolume: 0,\n                callPremium: 0,\n                putPremium: 0,\n                callPutRatio: 1,\n                premiumRatio: 1,\n                sentimentScore: 50,\n                sentiment: 'NEUTRAL'\n            },\n            overallSignal: {\n                signal: 'NO_DATA',\n                confidence: 0,\n                score: 0\n            }\n        };\n    }\n}\n\nexport default new FlowAnalysis();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}