"use strict";(self.webpackChunkquantum_trade_ai_v2=self.webpackChunkquantum_trade_ai_v2||[]).push([[693],{693:(e,t,a)=>{a.d(t,{default:()=>n});var o=a(555),s=a(910);const n=new class{constructor(){this.apiKeys={unusualWhales:"29a464c8-9da0-490a-ac24-0d4aa492dcbd",alphaVantage:"EB0MS9ZY5CU738IK",twelveData:"939cbb9310ad4325aedd33cde919b96c",polygon:"75rlu6cWGNnIqqR_x8M384YUjBgGk6kT",fmp:"m2XfxOS0sZxs6hLEY5yRzUgDyp5Dur4V",ortex:"Q0VpvWFI.wPuSEG6CNr7uoRZbtFcmVeeXpoJvjz75"},this.timeout=parseInt("10000")||1e4,this.cache=new Map,this.cacheTimeout=3e4,this.endpoints={polygon:"https://api.polygon.io",alphaVantage:"https://www.alphavantage.co",twelveData:"https://api.twelvedata.com",fmp:"https://financialmodelingprep.com/api/v3",unusualWhales:"https://api.unusualwhales.com",ortex:"https://api.ortex.com"},console.log("\ud83d\udd11 RealDataService initialized with API keys:",{unusualWhales:!!this.apiKeys.unusualWhales,alphaVantage:!!this.apiKeys.alphaVantage,twelveData:!!this.apiKeys.twelveData,polygon:!!this.apiKeys.polygon,fmp:!!this.apiKeys.fmp,ortex:!!this.apiKeys.ortex})}getCacheKey(e,t){return"".concat(e,"_").concat(JSON.stringify(t))}isCacheValid(e){return Date.now()-e<this.cacheTimeout}setCache(e,t){this.cache.set(e,{data:t,timestamp:Date.now()})}getCache(e){const t=this.cache.get(e);return t&&this.isCacheValid(t.timestamp)?t.data:null}async makeRequest(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};try{return(await s.A.get(e,(0,o.A)({timeout:this.timeout},t))).data}catch(a){throw console.error("\u274c API Request failed for ".concat(e,":"),a.message),a}}async getPolygonStockPrice(e){if(!this.apiKeys.polygon)throw new Error("Polygon API key not configured");const t=this.getCacheKey("polygon_stock",{symbol:e}),a=this.getCache(t);if(a)return a;try{const a="".concat(this.endpoints.polygon,"/v2/aggs/ticker/").concat(e,"/prev?adjusted=true&apikey=").concat(this.apiKeys.polygon),o=await this.makeRequest(a);if(o.results&&o.results.length>0){const a=o.results[0],s={symbol:e,price:a.c,open:a.o,high:a.h,low:a.l,volume:a.v,change:a.c-a.o,changePercent:(a.c-a.o)/a.o*100,source:"Polygon",timestamp:Date.now()};return this.setCache(t,s),s}}catch(o){throw console.error("\u274c Polygon API error for ".concat(e,":"),o.message),o}}async getAlphaVantageData(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"TIME_SERIES_INTRADAY";if(!this.apiKeys.alphaVantage)throw new Error("Alpha Vantage API key not configured");const a=this.getCacheKey("alphavantage",{symbol:e,function_type:t}),o=this.getCache(a);if(o)return o;try{const o="".concat(this.endpoints.alphaVantage,"/query?function=").concat(t,"&symbol=").concat(e,"&interval=1min&apikey=").concat(this.apiKeys.alphaVantage),s=await this.makeRequest(o);return this.setCache(a,s),s}catch(s){throw console.error("\u274c Alpha Vantage API error for ".concat(e,":"),s.message),s}}async getTwelveDataQuote(e){if(!this.apiKeys.twelveData)throw new Error("Twelve Data API key not configured");const t=this.getCacheKey("twelvedata_quote",{symbol:e}),a=this.getCache(t);if(a)return a;try{const a="".concat(this.endpoints.twelveData,"/quote?symbol=").concat(e,"&apikey=").concat(this.apiKeys.twelveData),o=await this.makeRequest(a);if(o&&!o.code){const e={symbol:o.symbol,price:parseFloat(o.close),open:parseFloat(o.open),high:parseFloat(o.high),low:parseFloat(o.low),volume:parseInt(o.volume),change:parseFloat(o.change),changePercent:parseFloat(o.percent_change),source:"Twelve Data",timestamp:Date.now()};return this.setCache(t,e),e}}catch(o){throw console.error("\u274c Twelve Data API error for ".concat(e,":"),o.message),o}}async getFMPQuote(e){if(!this.apiKeys.fmp)throw new Error("FMP API key not configured");const t=this.getCacheKey("fmp_quote",{symbol:e}),a=this.getCache(t);if(a)return a;try{const a="".concat(this.endpoints.fmp,"/quote/").concat(e,"?apikey=").concat(this.apiKeys.fmp),o=await this.makeRequest(a);if(o&&o.length>0){const e=o[0],a={symbol:e.symbol,price:e.price,open:e.open,high:e.dayHigh,low:e.dayLow,volume:e.volume,change:e.change,changePercent:e.changesPercentage,marketCap:e.marketCap,pe:e.pe,source:"FMP",timestamp:Date.now()};return this.setCache(t,a),a}}catch(o){throw console.error("\u274c FMP API error for ".concat(e,":"),o.message),o}}async getUnusualWhalesOptionsFlow(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(!this.apiKeys.unusualWhales)throw new Error("Unusual Whales API key not configured");const t=this.getCacheKey("unusual_whales_flow",{symbol:e}),a=this.getCache(t);if(a)return a;try{const a="".concat(this.endpoints.unusualWhales,"/api/stock_options_flow"),o=e?"".concat(a,"/").concat(e):a,s=await this.makeRequest(o,{headers:{Authorization:"Bearer ".concat(this.apiKeys.unusualWhales)}});return this.setCache(t,s),s}catch(o){throw console.error("\u274c Unusual Whales API error:",o.message),o}}async getOrtexShortInterest(e){if(!this.apiKeys.ortex)throw new Error("Ortex API key not configured");const t=this.getCacheKey("ortex_short",{symbol:e}),a=this.getCache(t);if(a)return a;try{const a="".concat(this.endpoints.ortex,"/securities/").concat(e,"/short_interest"),o=await this.makeRequest(a,{headers:{Authorization:"Bearer ".concat(this.apiKeys.ortex)}});return this.setCache(t,o),o}catch(o){throw console.error("\u274c Ortex API error for ".concat(e,":"),o.message),o}}async getStockData(e){const t={},a=[],s=[{name:"polygon",method:()=>this.getPolygonStockPrice(e)},{name:"twelveData",method:()=>this.getTwelveDataQuote(e)},{name:"fmp",method:()=>this.getFMPQuote(e)}].map(async e=>{try{const a=await e.method();return t[e.name]=a,{provider:e.name,success:!0,data:a}}catch(o){return a.push({provider:e.name,error:o.message}),{provider:e.name,success:!1,error:o.message}}}),n=(await Promise.allSettled(s)).filter(e=>"fulfilled"===e.status&&e.value.success).map(e=>e.value.data);if(n.length>0){const e=["fmp","twelveData","polygon"];for(const s of e)if(t[s])return(0,o.A)((0,o.A)({},t[s]),{},{sources:Object.keys(t),errors:a.length>0?a:void 0});return n[0]}throw new Error("Failed to fetch data for ".concat(e," from all providers: ").concat(a.map(e=>e.error).join(", ")))}async getMarketOverview(){const e=["SPY","QQQ","AAPL","NVDA","TSLA","MSFT","GOOGL","AMZN"],t={},a=[];console.log("\ud83d\udcca Fetching market overview for symbols:",e);if(!Object.values(this.apiKeys).some(e=>e&&""!==e.trim()))return console.log("\ud83c\udfaf No API keys configured - using demo data for enhanced features"),this.getDemoMarketData(e);const o=e.map(async e=>{try{const a=await this.getStockData(e);return t[e]=a,{symbol:e,success:!0,data:a}}catch(o){return console.error("\u274c Failed to fetch data for ".concat(e,":"),o.message),a.push({symbol:e,error:o.message}),{symbol:e,success:!1,error:o.message}}});if(await Promise.allSettled(o),0===Object.keys(t).length)return console.log("\ud83c\udfaf Real API calls failed - using demo data for enhanced features"),this.getDemoMarketData(e);const s=Object.values(t).filter(e=>void 0!==e.changePercent),n=s.reduce((e,t)=>e+t.changePercent,0)/s.length;return console.log("\u2705 Successfully fetched data for ".concat(Object.keys(t).length,"/").concat(e.length," symbols")),{stocks:t,marketSentiment:n>.5?"Bullish":n<-.5?"Bearish":"Neutral",avgChange:parseFloat(n.toFixed(2)),successCount:Object.keys(t).length,errorCount:a.length,errors:a.length>0?a:void 0,timestamp:Date.now()}}getDemoMarketData(e){console.log("\ud83c\udfaf Generating demo market data for enhanced features showcase");const t={SPY:{base:545.2,change:1.45},QQQ:{base:465.8,change:2.12},AAPL:{base:224.5,change:-.85},NVDA:{base:118.75,change:3.2},TSLA:{base:248.4,change:-1.6},MSFT:{base:415.3,change:1.25},GOOGL:{base:162.85,change:.75},AMZN:{base:185.2,change:-.45}},a={};e.forEach(e=>{const o=t[e]||{base:100,change:0},s=o.base+o.change,n=o.base,c=o.change/o.base*100;a[e]={symbol:e,price:parseFloat(s.toFixed(2)),open:parseFloat(n.toFixed(2)),high:parseFloat((s+.5*Math.abs(o.change)).toFixed(2)),low:parseFloat((s-.5*Math.abs(o.change)).toFixed(2)),volume:Math.floor(5e7*Math.random())+1e7,change:parseFloat(o.change.toFixed(2)),changePercent:parseFloat(c.toFixed(2)),source:"Demo",timestamp:Date.now()}});const o=Object.values(a),s=o.reduce((e,t)=>e+t.changePercent,0)/o.length;return{stocks:a,marketSentiment:s>.5?"Bullish":s<-.5?"Bearish":"Neutral",avgChange:parseFloat(s.toFixed(2)),successCount:e.length,errorCount:0,demoMode:!0,timestamp:Date.now()}}async getOptionsFlowData(){try{console.log("\ud83d\udcc8 Fetching options flow data from Unusual Whales...");return await this.getUnusualWhalesOptionsFlow()}catch(e){throw console.error("\u274c Failed to fetch options flow data:",e.message),e}}async getTechnicalIndicators(e){try{return await this.getAlphaVantageData(e,"RSI")}catch(t){throw console.error("\u274c Failed to fetch technical indicators for ".concat(e,":"),t.message),t}}async healthCheck(){const e=[{name:"Polygon",check:()=>this.getPolygonStockPrice("AAPL")},{name:"Twelve Data",check:()=>this.getTwelveDataQuote("AAPL")},{name:"FMP",check:()=>this.getFMPQuote("AAPL")},{name:"Alpha Vantage",check:()=>this.getAlphaVantageData("AAPL")}],t={};for(const o of e)try{await o.check(),t[o.name]={status:"OK",timestamp:Date.now()},console.log("\u2705 ".concat(o.name," API: OK"))}catch(a){t[o.name]={status:"ERROR",error:a.message,timestamp:Date.now()},console.log("\u274c ".concat(o.name," API: ERROR - ").concat(a.message))}return t}}}}]);